
traffic_lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fd8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080030e4  080030e4  000040e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003108  08003108  00005040  2**0
                  CONTENTS
  4 .ARM          00000000  08003108  08003108  00005040  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003108  08003108  00005040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003108  08003108  00004108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800310c  0800310c  0000410c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000040  20000000  08003110  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  20000040  08003150  00005040  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000012c  08003150  0000512c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005040  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000885b  00000000  00000000  00005069  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ce9  00000000  00000000  0000d8c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a60  00000000  00000000  0000f5b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00016f70  00000000  00000000  00010010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000c9e5  00000000  00000000  00026f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00082666  00000000  00000000  00033965  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  000b5fcb  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 000007dc  00000000  00000000  000b600e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000028ac  00000000  00000000  000b67ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000b9098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000040 	.word	0x20000040
 8000128:	00000000 	.word	0x00000000
 800012c:	080030cc 	.word	0x080030cc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000044 	.word	0x20000044
 8000148:	080030cc 	.word	0x080030cc

0800014c <button_reading>:

GPIO_TypeDef* buttons_port[NO_OF_BUTTONS] = {BUTTON1_GPIO_Port, BUTTON2_GPIO_Port, BUTTON3_GPIO_Port};
uint16_t buttons[NO_OF_BUTTONS] = {BUTTON1_Pin, BUTTON2_Pin, BUTTON3_Pin};


void button_reading(){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	for(int i = 0; i < NO_OF_BUTTONS; i++){
 8000152:	2300      	movs	r3, #0
 8000154:	607b      	str	r3, [r7, #4]
 8000156:	e07a      	b.n	800024e <button_reading+0x102>
		KeyReg2[i] = KeyReg1[i];
 8000158:	4a41      	ldr	r2, [pc, #260]	@ (8000260 <button_reading+0x114>)
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000160:	4940      	ldr	r1, [pc, #256]	@ (8000264 <button_reading+0x118>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg0[i];
 8000168:	4a3f      	ldr	r2, [pc, #252]	@ (8000268 <button_reading+0x11c>)
 800016a:	687b      	ldr	r3, [r7, #4]
 800016c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000170:	493b      	ldr	r1, [pc, #236]	@ (8000260 <button_reading+0x114>)
 8000172:	687b      	ldr	r3, [r7, #4]
 8000174:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg0[i] = HAL_GPIO_ReadPin(buttons_port[i], buttons[i]);
 8000178:	4a3c      	ldr	r2, [pc, #240]	@ (800026c <button_reading+0x120>)
 800017a:	687b      	ldr	r3, [r7, #4]
 800017c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000180:	493b      	ldr	r1, [pc, #236]	@ (8000270 <button_reading+0x124>)
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000188:	4619      	mov	r1, r3
 800018a:	4610      	mov	r0, r2
 800018c:	f001 ff70 	bl	8002070 <HAL_GPIO_ReadPin>
 8000190:	4603      	mov	r3, r0
 8000192:	4619      	mov	r1, r3
 8000194:	4a34      	ldr	r2, [pc, #208]	@ (8000268 <button_reading+0x11c>)
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		if((KeyReg2[i] == KeyReg1[i]) && (KeyReg1[i] == KeyReg0[i])){
 800019c:	4a31      	ldr	r2, [pc, #196]	@ (8000264 <button_reading+0x118>)
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001a4:	492e      	ldr	r1, [pc, #184]	@ (8000260 <button_reading+0x114>)
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001ac:	429a      	cmp	r2, r3
 80001ae:	d14b      	bne.n	8000248 <button_reading+0xfc>
 80001b0:	4a2b      	ldr	r2, [pc, #172]	@ (8000260 <button_reading+0x114>)
 80001b2:	687b      	ldr	r3, [r7, #4]
 80001b4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001b8:	492b      	ldr	r1, [pc, #172]	@ (8000268 <button_reading+0x11c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001c0:	429a      	cmp	r2, r3
 80001c2:	d141      	bne.n	8000248 <button_reading+0xfc>
			if(KeyReg3[i] != KeyReg2[i]){
 80001c4:	4a2b      	ldr	r2, [pc, #172]	@ (8000274 <button_reading+0x128>)
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001cc:	4925      	ldr	r1, [pc, #148]	@ (8000264 <button_reading+0x118>)
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001d4:	429a      	cmp	r2, r3
 80001d6:	d018      	beq.n	800020a <button_reading+0xbe>
				KeyReg3[i] = KeyReg2[i];
 80001d8:	4a22      	ldr	r2, [pc, #136]	@ (8000264 <button_reading+0x118>)
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001e0:	4924      	ldr	r1, [pc, #144]	@ (8000274 <button_reading+0x128>)
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(KeyReg2[i] == BUTTON_PRESSED){
 80001e8:	4a1e      	ldr	r2, [pc, #120]	@ (8000264 <button_reading+0x118>)
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d129      	bne.n	8000248 <button_reading+0xfc>
					button_flags[i] = 1;
 80001f4:	4a20      	ldr	r2, [pc, #128]	@ (8000278 <button_reading+0x12c>)
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	2101      	movs	r1, #1
 80001fa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					timers_key_pressed[i] = 100;
 80001fe:	4a1f      	ldr	r2, [pc, #124]	@ (800027c <button_reading+0x130>)
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	2164      	movs	r1, #100	@ 0x64
 8000204:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000208:	e01e      	b.n	8000248 <button_reading+0xfc>
				}
			}else{
				timers_key_pressed[i]--;
 800020a:	4a1c      	ldr	r2, [pc, #112]	@ (800027c <button_reading+0x130>)
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000212:	1e5a      	subs	r2, r3, #1
 8000214:	4919      	ldr	r1, [pc, #100]	@ (800027c <button_reading+0x130>)
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(timers_key_pressed[i] <= 0){
 800021c:	4a17      	ldr	r2, [pc, #92]	@ (800027c <button_reading+0x130>)
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000224:	2b00      	cmp	r3, #0
 8000226:	dc0f      	bgt.n	8000248 <button_reading+0xfc>
					if(KeyReg2[i] == BUTTON_PRESSED){
 8000228:	4a0e      	ldr	r2, [pc, #56]	@ (8000264 <button_reading+0x118>)
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000230:	2b00      	cmp	r3, #0
 8000232:	d104      	bne.n	800023e <button_reading+0xf2>
						button_flags[i] = 1;
 8000234:	4a10      	ldr	r2, [pc, #64]	@ (8000278 <button_reading+0x12c>)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	2101      	movs	r1, #1
 800023a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					}
					timers_key_pressed[i] = 100;
 800023e:	4a0f      	ldr	r2, [pc, #60]	@ (800027c <button_reading+0x130>)
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	2164      	movs	r1, #100	@ 0x64
 8000244:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < NO_OF_BUTTONS; i++){
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	3301      	adds	r3, #1
 800024c:	607b      	str	r3, [r7, #4]
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	2b02      	cmp	r3, #2
 8000252:	dd81      	ble.n	8000158 <button_reading+0xc>
				}
			}
		}
	}
}
 8000254:	bf00      	nop
 8000256:	bf00      	nop
 8000258:	3708      	adds	r7, #8
 800025a:	46bd      	mov	sp, r7
 800025c:	bd80      	pop	{r7, pc}
 800025e:	bf00      	nop
 8000260:	20000078 	.word	0x20000078
 8000264:	20000084 	.word	0x20000084
 8000268:	2000006c 	.word	0x2000006c
 800026c:	20000018 	.word	0x20000018
 8000270:	20000024 	.word	0x20000024
 8000274:	20000090 	.word	0x20000090
 8000278:	20000060 	.word	0x20000060
 800027c:	2000000c 	.word	0x2000000c

08000280 <is_button_pressed>:

int is_button_pressed(int index){
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
	if(button_flags[index] == 1){
 8000288:	4a09      	ldr	r2, [pc, #36]	@ (80002b0 <is_button_pressed+0x30>)
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000290:	2b01      	cmp	r3, #1
 8000292:	d106      	bne.n	80002a2 <is_button_pressed+0x22>
		button_flags[index] = 0;
 8000294:	4a06      	ldr	r2, [pc, #24]	@ (80002b0 <is_button_pressed+0x30>)
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	2100      	movs	r1, #0
 800029a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800029e:	2301      	movs	r3, #1
 80002a0:	e000      	b.n	80002a4 <is_button_pressed+0x24>
	}
	return 0;
 80002a2:	2300      	movs	r3, #0
}
 80002a4:	4618      	mov	r0, r3
 80002a6:	370c      	adds	r7, #12
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bc80      	pop	{r7}
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop
 80002b0:	20000060 	.word	0x20000060

080002b4 <display7SEG>:
 *  Created on: Oct 24, 2024
 *      Author: Onii-Chan
 */
#include "led7seg.h"

void display7SEG (int num) {
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b082      	sub	sp, #8
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	6078      	str	r0, [r7, #4]
  switch (num) {
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	2b09      	cmp	r3, #9
 80002c0:	f200 81bc 	bhi.w	800063c <display7SEG+0x388>
 80002c4:	a201      	add	r2, pc, #4	@ (adr r2, 80002cc <display7SEG+0x18>)
 80002c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002ca:	bf00      	nop
 80002cc:	080002f5 	.word	0x080002f5
 80002d0:	08000349 	.word	0x08000349
 80002d4:	0800039d 	.word	0x0800039d
 80002d8:	080003f1 	.word	0x080003f1
 80002dc:	08000445 	.word	0x08000445
 80002e0:	08000499 	.word	0x08000499
 80002e4:	080004ed 	.word	0x080004ed
 80002e8:	08000541 	.word	0x08000541
 80002ec:	08000595 	.word	0x08000595
 80002f0:	080005e9 	.word	0x080005e9
	case 0:
		HAL_GPIO_WritePin(SEGG_GPIO_Port, SEGG_Pin, SET);
 80002f4:	2201      	movs	r2, #1
 80002f6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80002fa:	48d3      	ldr	r0, [pc, #844]	@ (8000648 <display7SEG+0x394>)
 80002fc:	f001 fecf 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA_GPIO_Port, SEGA_Pin, RESET);
 8000300:	2200      	movs	r2, #0
 8000302:	2180      	movs	r1, #128	@ 0x80
 8000304:	48d0      	ldr	r0, [pc, #832]	@ (8000648 <display7SEG+0x394>)
 8000306:	f001 feca 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB_GPIO_Port, SEGB_Pin, RESET);
 800030a:	2200      	movs	r2, #0
 800030c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000310:	48cd      	ldr	r0, [pc, #820]	@ (8000648 <display7SEG+0x394>)
 8000312:	f001 fec4 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGC_GPIO_Port, SEGC_Pin, RESET);
 8000316:	2200      	movs	r2, #0
 8000318:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800031c:	48ca      	ldr	r0, [pc, #808]	@ (8000648 <display7SEG+0x394>)
 800031e:	f001 febe 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGD_GPIO_Port, SEGD_Pin, RESET);
 8000322:	2200      	movs	r2, #0
 8000324:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000328:	48c7      	ldr	r0, [pc, #796]	@ (8000648 <display7SEG+0x394>)
 800032a:	f001 feb8 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGE_GPIO_Port, SEGE_Pin, RESET);
 800032e:	2200      	movs	r2, #0
 8000330:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000334:	48c4      	ldr	r0, [pc, #784]	@ (8000648 <display7SEG+0x394>)
 8000336:	f001 feb2 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGF_GPIO_Port, SEGF_Pin, RESET);
 800033a:	2200      	movs	r2, #0
 800033c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000340:	48c1      	ldr	r0, [pc, #772]	@ (8000648 <display7SEG+0x394>)
 8000342:	f001 feac 	bl	800209e <HAL_GPIO_WritePin>
		break;
 8000346:	e17a      	b.n	800063e <display7SEG+0x38a>
	case 1:
		HAL_GPIO_WritePin(SEGA_GPIO_Port, SEGA_Pin, SET);
 8000348:	2201      	movs	r2, #1
 800034a:	2180      	movs	r1, #128	@ 0x80
 800034c:	48be      	ldr	r0, [pc, #760]	@ (8000648 <display7SEG+0x394>)
 800034e:	f001 fea6 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGF_GPIO_Port, SEGF_Pin, SET);
 8000352:	2201      	movs	r2, #1
 8000354:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000358:	48bb      	ldr	r0, [pc, #748]	@ (8000648 <display7SEG+0x394>)
 800035a:	f001 fea0 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGE_GPIO_Port, SEGE_Pin, SET);
 800035e:	2201      	movs	r2, #1
 8000360:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000364:	48b8      	ldr	r0, [pc, #736]	@ (8000648 <display7SEG+0x394>)
 8000366:	f001 fe9a 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGD_GPIO_Port, SEGD_Pin, SET);
 800036a:	2201      	movs	r2, #1
 800036c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000370:	48b5      	ldr	r0, [pc, #724]	@ (8000648 <display7SEG+0x394>)
 8000372:	f001 fe94 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGG_GPIO_Port, SEGG_Pin, SET);
 8000376:	2201      	movs	r2, #1
 8000378:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800037c:	48b2      	ldr	r0, [pc, #712]	@ (8000648 <display7SEG+0x394>)
 800037e:	f001 fe8e 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB_GPIO_Port, SEGB_Pin, RESET);
 8000382:	2200      	movs	r2, #0
 8000384:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000388:	48af      	ldr	r0, [pc, #700]	@ (8000648 <display7SEG+0x394>)
 800038a:	f001 fe88 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGC_GPIO_Port, SEGC_Pin, RESET);
 800038e:	2200      	movs	r2, #0
 8000390:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000394:	48ac      	ldr	r0, [pc, #688]	@ (8000648 <display7SEG+0x394>)
 8000396:	f001 fe82 	bl	800209e <HAL_GPIO_WritePin>
		break;
 800039a:	e150      	b.n	800063e <display7SEG+0x38a>
	case 2:
		HAL_GPIO_WritePin(SEGF_GPIO_Port, SEGF_Pin, SET);
 800039c:	2201      	movs	r2, #1
 800039e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80003a2:	48a9      	ldr	r0, [pc, #676]	@ (8000648 <display7SEG+0x394>)
 80003a4:	f001 fe7b 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGC_GPIO_Port, SEGC_Pin, SET);
 80003a8:	2201      	movs	r2, #1
 80003aa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80003ae:	48a6      	ldr	r0, [pc, #664]	@ (8000648 <display7SEG+0x394>)
 80003b0:	f001 fe75 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA_GPIO_Port, SEGA_Pin, RESET);
 80003b4:	2200      	movs	r2, #0
 80003b6:	2180      	movs	r1, #128	@ 0x80
 80003b8:	48a3      	ldr	r0, [pc, #652]	@ (8000648 <display7SEG+0x394>)
 80003ba:	f001 fe70 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB_GPIO_Port, SEGB_Pin, RESET);
 80003be:	2200      	movs	r2, #0
 80003c0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80003c4:	48a0      	ldr	r0, [pc, #640]	@ (8000648 <display7SEG+0x394>)
 80003c6:	f001 fe6a 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGG_GPIO_Port, SEGG_Pin, RESET);
 80003ca:	2200      	movs	r2, #0
 80003cc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80003d0:	489d      	ldr	r0, [pc, #628]	@ (8000648 <display7SEG+0x394>)
 80003d2:	f001 fe64 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGE_GPIO_Port, SEGE_Pin, RESET);
 80003d6:	2200      	movs	r2, #0
 80003d8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80003dc:	489a      	ldr	r0, [pc, #616]	@ (8000648 <display7SEG+0x394>)
 80003de:	f001 fe5e 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGD_GPIO_Port, SEGD_Pin, RESET);
 80003e2:	2200      	movs	r2, #0
 80003e4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80003e8:	4897      	ldr	r0, [pc, #604]	@ (8000648 <display7SEG+0x394>)
 80003ea:	f001 fe58 	bl	800209e <HAL_GPIO_WritePin>
		break;
 80003ee:	e126      	b.n	800063e <display7SEG+0x38a>
	case 3:
		HAL_GPIO_WritePin(SEGF_GPIO_Port, SEGF_Pin, SET);
 80003f0:	2201      	movs	r2, #1
 80003f2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80003f6:	4894      	ldr	r0, [pc, #592]	@ (8000648 <display7SEG+0x394>)
 80003f8:	f001 fe51 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGE_GPIO_Port, SEGE_Pin, SET);
 80003fc:	2201      	movs	r2, #1
 80003fe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000402:	4891      	ldr	r0, [pc, #580]	@ (8000648 <display7SEG+0x394>)
 8000404:	f001 fe4b 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA_GPIO_Port, SEGA_Pin, RESET);
 8000408:	2200      	movs	r2, #0
 800040a:	2180      	movs	r1, #128	@ 0x80
 800040c:	488e      	ldr	r0, [pc, #568]	@ (8000648 <display7SEG+0x394>)
 800040e:	f001 fe46 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB_GPIO_Port, SEGB_Pin, RESET);
 8000412:	2200      	movs	r2, #0
 8000414:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000418:	488b      	ldr	r0, [pc, #556]	@ (8000648 <display7SEG+0x394>)
 800041a:	f001 fe40 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGG_GPIO_Port, SEGG_Pin, RESET);
 800041e:	2200      	movs	r2, #0
 8000420:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000424:	4888      	ldr	r0, [pc, #544]	@ (8000648 <display7SEG+0x394>)
 8000426:	f001 fe3a 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGC_GPIO_Port, SEGC_Pin, RESET);
 800042a:	2200      	movs	r2, #0
 800042c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000430:	4885      	ldr	r0, [pc, #532]	@ (8000648 <display7SEG+0x394>)
 8000432:	f001 fe34 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGD_GPIO_Port, SEGD_Pin, RESET);
 8000436:	2200      	movs	r2, #0
 8000438:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800043c:	4882      	ldr	r0, [pc, #520]	@ (8000648 <display7SEG+0x394>)
 800043e:	f001 fe2e 	bl	800209e <HAL_GPIO_WritePin>
		break;
 8000442:	e0fc      	b.n	800063e <display7SEG+0x38a>
	case 4:
		HAL_GPIO_WritePin(SEGA_GPIO_Port, SEGA_Pin, SET);
 8000444:	2201      	movs	r2, #1
 8000446:	2180      	movs	r1, #128	@ 0x80
 8000448:	487f      	ldr	r0, [pc, #508]	@ (8000648 <display7SEG+0x394>)
 800044a:	f001 fe28 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGE_GPIO_Port, SEGE_Pin, SET);
 800044e:	2201      	movs	r2, #1
 8000450:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000454:	487c      	ldr	r0, [pc, #496]	@ (8000648 <display7SEG+0x394>)
 8000456:	f001 fe22 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGD_GPIO_Port, SEGD_Pin, SET);
 800045a:	2201      	movs	r2, #1
 800045c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000460:	4879      	ldr	r0, [pc, #484]	@ (8000648 <display7SEG+0x394>)
 8000462:	f001 fe1c 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGF_GPIO_Port, SEGF_Pin, RESET);
 8000466:	2200      	movs	r2, #0
 8000468:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800046c:	4876      	ldr	r0, [pc, #472]	@ (8000648 <display7SEG+0x394>)
 800046e:	f001 fe16 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB_GPIO_Port, SEGB_Pin, RESET);
 8000472:	2200      	movs	r2, #0
 8000474:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000478:	4873      	ldr	r0, [pc, #460]	@ (8000648 <display7SEG+0x394>)
 800047a:	f001 fe10 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGG_GPIO_Port, SEGG_Pin, RESET);
 800047e:	2200      	movs	r2, #0
 8000480:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000484:	4870      	ldr	r0, [pc, #448]	@ (8000648 <display7SEG+0x394>)
 8000486:	f001 fe0a 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGC_GPIO_Port, SEGC_Pin, RESET);
 800048a:	2200      	movs	r2, #0
 800048c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000490:	486d      	ldr	r0, [pc, #436]	@ (8000648 <display7SEG+0x394>)
 8000492:	f001 fe04 	bl	800209e <HAL_GPIO_WritePin>
		break;
 8000496:	e0d2      	b.n	800063e <display7SEG+0x38a>
	case 5:
		HAL_GPIO_WritePin(SEGB_GPIO_Port, SEGB_Pin, SET);
 8000498:	2201      	movs	r2, #1
 800049a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800049e:	486a      	ldr	r0, [pc, #424]	@ (8000648 <display7SEG+0x394>)
 80004a0:	f001 fdfd 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGE_GPIO_Port, SEGE_Pin, SET);
 80004a4:	2201      	movs	r2, #1
 80004a6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80004aa:	4867      	ldr	r0, [pc, #412]	@ (8000648 <display7SEG+0x394>)
 80004ac:	f001 fdf7 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA_GPIO_Port, SEGA_Pin, RESET);
 80004b0:	2200      	movs	r2, #0
 80004b2:	2180      	movs	r1, #128	@ 0x80
 80004b4:	4864      	ldr	r0, [pc, #400]	@ (8000648 <display7SEG+0x394>)
 80004b6:	f001 fdf2 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGF_GPIO_Port, SEGF_Pin, RESET);
 80004ba:	2200      	movs	r2, #0
 80004bc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80004c0:	4861      	ldr	r0, [pc, #388]	@ (8000648 <display7SEG+0x394>)
 80004c2:	f001 fdec 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGG_GPIO_Port, SEGG_Pin, RESET);
 80004c6:	2200      	movs	r2, #0
 80004c8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004cc:	485e      	ldr	r0, [pc, #376]	@ (8000648 <display7SEG+0x394>)
 80004ce:	f001 fde6 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGC_GPIO_Port, SEGC_Pin, RESET);
 80004d2:	2200      	movs	r2, #0
 80004d4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80004d8:	485b      	ldr	r0, [pc, #364]	@ (8000648 <display7SEG+0x394>)
 80004da:	f001 fde0 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGD_GPIO_Port, SEGD_Pin, RESET);
 80004de:	2200      	movs	r2, #0
 80004e0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80004e4:	4858      	ldr	r0, [pc, #352]	@ (8000648 <display7SEG+0x394>)
 80004e6:	f001 fdda 	bl	800209e <HAL_GPIO_WritePin>
		break;
 80004ea:	e0a8      	b.n	800063e <display7SEG+0x38a>
	case 6:
		HAL_GPIO_WritePin(SEGB_GPIO_Port, SEGB_Pin, SET);
 80004ec:	2201      	movs	r2, #1
 80004ee:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80004f2:	4855      	ldr	r0, [pc, #340]	@ (8000648 <display7SEG+0x394>)
 80004f4:	f001 fdd3 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA_GPIO_Port, SEGA_Pin, RESET);
 80004f8:	2200      	movs	r2, #0
 80004fa:	2180      	movs	r1, #128	@ 0x80
 80004fc:	4852      	ldr	r0, [pc, #328]	@ (8000648 <display7SEG+0x394>)
 80004fe:	f001 fdce 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGF_GPIO_Port, SEGF_Pin, RESET);
 8000502:	2200      	movs	r2, #0
 8000504:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000508:	484f      	ldr	r0, [pc, #316]	@ (8000648 <display7SEG+0x394>)
 800050a:	f001 fdc8 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGG_GPIO_Port, SEGG_Pin, RESET);
 800050e:	2200      	movs	r2, #0
 8000510:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000514:	484c      	ldr	r0, [pc, #304]	@ (8000648 <display7SEG+0x394>)
 8000516:	f001 fdc2 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGE_GPIO_Port, SEGE_Pin, RESET);
 800051a:	2200      	movs	r2, #0
 800051c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000520:	4849      	ldr	r0, [pc, #292]	@ (8000648 <display7SEG+0x394>)
 8000522:	f001 fdbc 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGC_GPIO_Port, SEGC_Pin, RESET);
 8000526:	2200      	movs	r2, #0
 8000528:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800052c:	4846      	ldr	r0, [pc, #280]	@ (8000648 <display7SEG+0x394>)
 800052e:	f001 fdb6 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGD_GPIO_Port, SEGD_Pin, RESET);
 8000532:	2200      	movs	r2, #0
 8000534:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000538:	4843      	ldr	r0, [pc, #268]	@ (8000648 <display7SEG+0x394>)
 800053a:	f001 fdb0 	bl	800209e <HAL_GPIO_WritePin>
		break;
 800053e:	e07e      	b.n	800063e <display7SEG+0x38a>
	case 7:
		HAL_GPIO_WritePin(SEGF_GPIO_Port, SEGF_Pin, SET);
 8000540:	2201      	movs	r2, #1
 8000542:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000546:	4840      	ldr	r0, [pc, #256]	@ (8000648 <display7SEG+0x394>)
 8000548:	f001 fda9 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGG_GPIO_Port, SEGG_Pin, SET);
 800054c:	2201      	movs	r2, #1
 800054e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000552:	483d      	ldr	r0, [pc, #244]	@ (8000648 <display7SEG+0x394>)
 8000554:	f001 fda3 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGE_GPIO_Port, SEGE_Pin, SET);
 8000558:	2201      	movs	r2, #1
 800055a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800055e:	483a      	ldr	r0, [pc, #232]	@ (8000648 <display7SEG+0x394>)
 8000560:	f001 fd9d 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGD_GPIO_Port, SEGD_Pin, SET);
 8000564:	2201      	movs	r2, #1
 8000566:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800056a:	4837      	ldr	r0, [pc, #220]	@ (8000648 <display7SEG+0x394>)
 800056c:	f001 fd97 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA_GPIO_Port, SEGA_Pin, RESET);
 8000570:	2200      	movs	r2, #0
 8000572:	2180      	movs	r1, #128	@ 0x80
 8000574:	4834      	ldr	r0, [pc, #208]	@ (8000648 <display7SEG+0x394>)
 8000576:	f001 fd92 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB_GPIO_Port, SEGB_Pin, RESET);
 800057a:	2200      	movs	r2, #0
 800057c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000580:	4831      	ldr	r0, [pc, #196]	@ (8000648 <display7SEG+0x394>)
 8000582:	f001 fd8c 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGC_GPIO_Port, SEGC_Pin, RESET);
 8000586:	2200      	movs	r2, #0
 8000588:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800058c:	482e      	ldr	r0, [pc, #184]	@ (8000648 <display7SEG+0x394>)
 800058e:	f001 fd86 	bl	800209e <HAL_GPIO_WritePin>
		break;
 8000592:	e054      	b.n	800063e <display7SEG+0x38a>
	case 8:
		HAL_GPIO_WritePin(SEGA_GPIO_Port, SEGA_Pin, RESET);
 8000594:	2200      	movs	r2, #0
 8000596:	2180      	movs	r1, #128	@ 0x80
 8000598:	482b      	ldr	r0, [pc, #172]	@ (8000648 <display7SEG+0x394>)
 800059a:	f001 fd80 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB_GPIO_Port, SEGB_Pin, RESET);
 800059e:	2200      	movs	r2, #0
 80005a0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005a4:	4828      	ldr	r0, [pc, #160]	@ (8000648 <display7SEG+0x394>)
 80005a6:	f001 fd7a 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGC_GPIO_Port, SEGC_Pin, RESET);
 80005aa:	2200      	movs	r2, #0
 80005ac:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80005b0:	4825      	ldr	r0, [pc, #148]	@ (8000648 <display7SEG+0x394>)
 80005b2:	f001 fd74 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGF_GPIO_Port, SEGF_Pin, RESET);
 80005b6:	2200      	movs	r2, #0
 80005b8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80005bc:	4822      	ldr	r0, [pc, #136]	@ (8000648 <display7SEG+0x394>)
 80005be:	f001 fd6e 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGG_GPIO_Port, SEGG_Pin, RESET);
 80005c2:	2200      	movs	r2, #0
 80005c4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005c8:	481f      	ldr	r0, [pc, #124]	@ (8000648 <display7SEG+0x394>)
 80005ca:	f001 fd68 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGE_GPIO_Port, SEGE_Pin, RESET);
 80005ce:	2200      	movs	r2, #0
 80005d0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80005d4:	481c      	ldr	r0, [pc, #112]	@ (8000648 <display7SEG+0x394>)
 80005d6:	f001 fd62 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGD_GPIO_Port, SEGD_Pin, RESET);
 80005da:	2200      	movs	r2, #0
 80005dc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80005e0:	4819      	ldr	r0, [pc, #100]	@ (8000648 <display7SEG+0x394>)
 80005e2:	f001 fd5c 	bl	800209e <HAL_GPIO_WritePin>
		break;
 80005e6:	e02a      	b.n	800063e <display7SEG+0x38a>
	case 9:
		HAL_GPIO_WritePin(SEGE_GPIO_Port, SEGE_Pin, SET);
 80005e8:	2201      	movs	r2, #1
 80005ea:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80005ee:	4816      	ldr	r0, [pc, #88]	@ (8000648 <display7SEG+0x394>)
 80005f0:	f001 fd55 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA_GPIO_Port, SEGA_Pin, RESET);
 80005f4:	2200      	movs	r2, #0
 80005f6:	2180      	movs	r1, #128	@ 0x80
 80005f8:	4813      	ldr	r0, [pc, #76]	@ (8000648 <display7SEG+0x394>)
 80005fa:	f001 fd50 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB_GPIO_Port, SEGB_Pin, RESET);
 80005fe:	2200      	movs	r2, #0
 8000600:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000604:	4810      	ldr	r0, [pc, #64]	@ (8000648 <display7SEG+0x394>)
 8000606:	f001 fd4a 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGC_GPIO_Port, SEGC_Pin, RESET);
 800060a:	2200      	movs	r2, #0
 800060c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000610:	480d      	ldr	r0, [pc, #52]	@ (8000648 <display7SEG+0x394>)
 8000612:	f001 fd44 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGF_GPIO_Port, SEGF_Pin, RESET);
 8000616:	2200      	movs	r2, #0
 8000618:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800061c:	480a      	ldr	r0, [pc, #40]	@ (8000648 <display7SEG+0x394>)
 800061e:	f001 fd3e 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGG_GPIO_Port, SEGG_Pin, RESET);
 8000622:	2200      	movs	r2, #0
 8000624:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000628:	4807      	ldr	r0, [pc, #28]	@ (8000648 <display7SEG+0x394>)
 800062a:	f001 fd38 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGD_GPIO_Port, SEGD_Pin, RESET);
 800062e:	2200      	movs	r2, #0
 8000630:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000634:	4804      	ldr	r0, [pc, #16]	@ (8000648 <display7SEG+0x394>)
 8000636:	f001 fd32 	bl	800209e <HAL_GPIO_WritePin>
		break;
 800063a:	e000      	b.n	800063e <display7SEG+0x38a>
	default:
		break;
 800063c:	bf00      	nop
  }
}
 800063e:	bf00      	nop
 8000640:	3708      	adds	r7, #8
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	40010800 	.word	0x40010800

0800064c <display7SEGM>:

void display7SEGM (int num) {
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  switch (num) {
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	2b09      	cmp	r3, #9
 8000658:	f200 819e 	bhi.w	8000998 <display7SEGM+0x34c>
 800065c:	a201      	add	r2, pc, #4	@ (adr r2, 8000664 <display7SEGM+0x18>)
 800065e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000662:	bf00      	nop
 8000664:	0800068d 	.word	0x0800068d
 8000668:	080006db 	.word	0x080006db
 800066c:	08000729 	.word	0x08000729
 8000670:	08000777 	.word	0x08000777
 8000674:	080007c5 	.word	0x080007c5
 8000678:	08000813 	.word	0x08000813
 800067c:	08000861 	.word	0x08000861
 8000680:	080008af 	.word	0x080008af
 8000684:	080008fd 	.word	0x080008fd
 8000688:	0800094b 	.word	0x0800094b
	case 0:
		HAL_GPIO_WritePin(MSEGG_GPIO_Port, MSEGG_Pin, SET);
 800068c:	2201      	movs	r2, #1
 800068e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000692:	48c4      	ldr	r0, [pc, #784]	@ (80009a4 <display7SEGM+0x358>)
 8000694:	f001 fd03 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MSEGA_GPIO_Port, MSEGA_Pin, RESET);
 8000698:	2200      	movs	r2, #0
 800069a:	2110      	movs	r1, #16
 800069c:	48c1      	ldr	r0, [pc, #772]	@ (80009a4 <display7SEGM+0x358>)
 800069e:	f001 fcfe 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MSEGB_GPIO_Port, MSEGB_Pin, RESET);
 80006a2:	2200      	movs	r2, #0
 80006a4:	2120      	movs	r1, #32
 80006a6:	48bf      	ldr	r0, [pc, #764]	@ (80009a4 <display7SEGM+0x358>)
 80006a8:	f001 fcf9 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MSEGC_GPIO_Port, MSEGC_Pin, RESET);
 80006ac:	2200      	movs	r2, #0
 80006ae:	2140      	movs	r1, #64	@ 0x40
 80006b0:	48bc      	ldr	r0, [pc, #752]	@ (80009a4 <display7SEGM+0x358>)
 80006b2:	f001 fcf4 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MSEGD_GPIO_Port, MSEGD_Pin, RESET);
 80006b6:	2200      	movs	r2, #0
 80006b8:	2180      	movs	r1, #128	@ 0x80
 80006ba:	48ba      	ldr	r0, [pc, #744]	@ (80009a4 <display7SEGM+0x358>)
 80006bc:	f001 fcef 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MSEGE_GPIO_Port, MSEGE_Pin, RESET);
 80006c0:	2200      	movs	r2, #0
 80006c2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006c6:	48b7      	ldr	r0, [pc, #732]	@ (80009a4 <display7SEGM+0x358>)
 80006c8:	f001 fce9 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MSEGF_GPIO_Port, MSEGF_Pin, RESET);
 80006cc:	2200      	movs	r2, #0
 80006ce:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80006d2:	48b4      	ldr	r0, [pc, #720]	@ (80009a4 <display7SEGM+0x358>)
 80006d4:	f001 fce3 	bl	800209e <HAL_GPIO_WritePin>
		break;
 80006d8:	e15f      	b.n	800099a <display7SEGM+0x34e>
	case 1:
		HAL_GPIO_WritePin(MSEGA_GPIO_Port, MSEGA_Pin, SET);
 80006da:	2201      	movs	r2, #1
 80006dc:	2110      	movs	r1, #16
 80006de:	48b1      	ldr	r0, [pc, #708]	@ (80009a4 <display7SEGM+0x358>)
 80006e0:	f001 fcdd 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MSEGF_GPIO_Port, MSEGF_Pin, SET);
 80006e4:	2201      	movs	r2, #1
 80006e6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80006ea:	48ae      	ldr	r0, [pc, #696]	@ (80009a4 <display7SEGM+0x358>)
 80006ec:	f001 fcd7 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MSEGE_GPIO_Port, MSEGE_Pin, SET);
 80006f0:	2201      	movs	r2, #1
 80006f2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006f6:	48ab      	ldr	r0, [pc, #684]	@ (80009a4 <display7SEGM+0x358>)
 80006f8:	f001 fcd1 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MSEGD_GPIO_Port, MSEGD_Pin, SET);
 80006fc:	2201      	movs	r2, #1
 80006fe:	2180      	movs	r1, #128	@ 0x80
 8000700:	48a8      	ldr	r0, [pc, #672]	@ (80009a4 <display7SEGM+0x358>)
 8000702:	f001 fccc 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MSEGG_GPIO_Port, MSEGG_Pin, SET);
 8000706:	2201      	movs	r2, #1
 8000708:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800070c:	48a5      	ldr	r0, [pc, #660]	@ (80009a4 <display7SEGM+0x358>)
 800070e:	f001 fcc6 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MSEGB_GPIO_Port, MSEGB_Pin, RESET);
 8000712:	2200      	movs	r2, #0
 8000714:	2120      	movs	r1, #32
 8000716:	48a3      	ldr	r0, [pc, #652]	@ (80009a4 <display7SEGM+0x358>)
 8000718:	f001 fcc1 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MSEGC_GPIO_Port, MSEGC_Pin, RESET);
 800071c:	2200      	movs	r2, #0
 800071e:	2140      	movs	r1, #64	@ 0x40
 8000720:	48a0      	ldr	r0, [pc, #640]	@ (80009a4 <display7SEGM+0x358>)
 8000722:	f001 fcbc 	bl	800209e <HAL_GPIO_WritePin>
		break;
 8000726:	e138      	b.n	800099a <display7SEGM+0x34e>
	case 2:
		HAL_GPIO_WritePin(MSEGF_GPIO_Port, MSEGF_Pin, SET);
 8000728:	2201      	movs	r2, #1
 800072a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800072e:	489d      	ldr	r0, [pc, #628]	@ (80009a4 <display7SEGM+0x358>)
 8000730:	f001 fcb5 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MSEGC_GPIO_Port, MSEGC_Pin, SET);
 8000734:	2201      	movs	r2, #1
 8000736:	2140      	movs	r1, #64	@ 0x40
 8000738:	489a      	ldr	r0, [pc, #616]	@ (80009a4 <display7SEGM+0x358>)
 800073a:	f001 fcb0 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MSEGA_GPIO_Port, MSEGA_Pin, RESET);
 800073e:	2200      	movs	r2, #0
 8000740:	2110      	movs	r1, #16
 8000742:	4898      	ldr	r0, [pc, #608]	@ (80009a4 <display7SEGM+0x358>)
 8000744:	f001 fcab 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MSEGB_GPIO_Port, MSEGB_Pin, RESET);
 8000748:	2200      	movs	r2, #0
 800074a:	2120      	movs	r1, #32
 800074c:	4895      	ldr	r0, [pc, #596]	@ (80009a4 <display7SEGM+0x358>)
 800074e:	f001 fca6 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MSEGG_GPIO_Port, MSEGG_Pin, RESET);
 8000752:	2200      	movs	r2, #0
 8000754:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000758:	4892      	ldr	r0, [pc, #584]	@ (80009a4 <display7SEGM+0x358>)
 800075a:	f001 fca0 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MSEGE_GPIO_Port, MSEGE_Pin, RESET);
 800075e:	2200      	movs	r2, #0
 8000760:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000764:	488f      	ldr	r0, [pc, #572]	@ (80009a4 <display7SEGM+0x358>)
 8000766:	f001 fc9a 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MSEGD_GPIO_Port, MSEGD_Pin, RESET);
 800076a:	2200      	movs	r2, #0
 800076c:	2180      	movs	r1, #128	@ 0x80
 800076e:	488d      	ldr	r0, [pc, #564]	@ (80009a4 <display7SEGM+0x358>)
 8000770:	f001 fc95 	bl	800209e <HAL_GPIO_WritePin>
		break;
 8000774:	e111      	b.n	800099a <display7SEGM+0x34e>
	case 3:
		HAL_GPIO_WritePin(MSEGF_GPIO_Port, MSEGF_Pin, SET);
 8000776:	2201      	movs	r2, #1
 8000778:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800077c:	4889      	ldr	r0, [pc, #548]	@ (80009a4 <display7SEGM+0x358>)
 800077e:	f001 fc8e 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MSEGE_GPIO_Port, MSEGE_Pin, SET);
 8000782:	2201      	movs	r2, #1
 8000784:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000788:	4886      	ldr	r0, [pc, #536]	@ (80009a4 <display7SEGM+0x358>)
 800078a:	f001 fc88 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MSEGA_GPIO_Port, MSEGA_Pin, RESET);
 800078e:	2200      	movs	r2, #0
 8000790:	2110      	movs	r1, #16
 8000792:	4884      	ldr	r0, [pc, #528]	@ (80009a4 <display7SEGM+0x358>)
 8000794:	f001 fc83 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MSEGB_GPIO_Port, MSEGB_Pin, RESET);
 8000798:	2200      	movs	r2, #0
 800079a:	2120      	movs	r1, #32
 800079c:	4881      	ldr	r0, [pc, #516]	@ (80009a4 <display7SEGM+0x358>)
 800079e:	f001 fc7e 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MSEGG_GPIO_Port, MSEGG_Pin, RESET);
 80007a2:	2200      	movs	r2, #0
 80007a4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80007a8:	487e      	ldr	r0, [pc, #504]	@ (80009a4 <display7SEGM+0x358>)
 80007aa:	f001 fc78 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MSEGC_GPIO_Port, MSEGC_Pin, RESET);
 80007ae:	2200      	movs	r2, #0
 80007b0:	2140      	movs	r1, #64	@ 0x40
 80007b2:	487c      	ldr	r0, [pc, #496]	@ (80009a4 <display7SEGM+0x358>)
 80007b4:	f001 fc73 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MSEGD_GPIO_Port, MSEGD_Pin, RESET);
 80007b8:	2200      	movs	r2, #0
 80007ba:	2180      	movs	r1, #128	@ 0x80
 80007bc:	4879      	ldr	r0, [pc, #484]	@ (80009a4 <display7SEGM+0x358>)
 80007be:	f001 fc6e 	bl	800209e <HAL_GPIO_WritePin>
		break;
 80007c2:	e0ea      	b.n	800099a <display7SEGM+0x34e>
	case 4:
		HAL_GPIO_WritePin(MSEGA_GPIO_Port, MSEGA_Pin, SET);
 80007c4:	2201      	movs	r2, #1
 80007c6:	2110      	movs	r1, #16
 80007c8:	4876      	ldr	r0, [pc, #472]	@ (80009a4 <display7SEGM+0x358>)
 80007ca:	f001 fc68 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MSEGE_GPIO_Port, MSEGE_Pin, SET);
 80007ce:	2201      	movs	r2, #1
 80007d0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007d4:	4873      	ldr	r0, [pc, #460]	@ (80009a4 <display7SEGM+0x358>)
 80007d6:	f001 fc62 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MSEGD_GPIO_Port, MSEGD_Pin, SET);
 80007da:	2201      	movs	r2, #1
 80007dc:	2180      	movs	r1, #128	@ 0x80
 80007de:	4871      	ldr	r0, [pc, #452]	@ (80009a4 <display7SEGM+0x358>)
 80007e0:	f001 fc5d 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MSEGF_GPIO_Port, MSEGF_Pin, RESET);
 80007e4:	2200      	movs	r2, #0
 80007e6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007ea:	486e      	ldr	r0, [pc, #440]	@ (80009a4 <display7SEGM+0x358>)
 80007ec:	f001 fc57 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MSEGB_GPIO_Port, MSEGB_Pin, RESET);
 80007f0:	2200      	movs	r2, #0
 80007f2:	2120      	movs	r1, #32
 80007f4:	486b      	ldr	r0, [pc, #428]	@ (80009a4 <display7SEGM+0x358>)
 80007f6:	f001 fc52 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MSEGG_GPIO_Port, MSEGG_Pin, RESET);
 80007fa:	2200      	movs	r2, #0
 80007fc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000800:	4868      	ldr	r0, [pc, #416]	@ (80009a4 <display7SEGM+0x358>)
 8000802:	f001 fc4c 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MSEGC_GPIO_Port, MSEGC_Pin, RESET);
 8000806:	2200      	movs	r2, #0
 8000808:	2140      	movs	r1, #64	@ 0x40
 800080a:	4866      	ldr	r0, [pc, #408]	@ (80009a4 <display7SEGM+0x358>)
 800080c:	f001 fc47 	bl	800209e <HAL_GPIO_WritePin>
		break;
 8000810:	e0c3      	b.n	800099a <display7SEGM+0x34e>
	case 5:
		HAL_GPIO_WritePin(MSEGB_GPIO_Port, MSEGB_Pin, SET);
 8000812:	2201      	movs	r2, #1
 8000814:	2120      	movs	r1, #32
 8000816:	4863      	ldr	r0, [pc, #396]	@ (80009a4 <display7SEGM+0x358>)
 8000818:	f001 fc41 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MSEGE_GPIO_Port, MSEGE_Pin, SET);
 800081c:	2201      	movs	r2, #1
 800081e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000822:	4860      	ldr	r0, [pc, #384]	@ (80009a4 <display7SEGM+0x358>)
 8000824:	f001 fc3b 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MSEGA_GPIO_Port, MSEGA_Pin, RESET);
 8000828:	2200      	movs	r2, #0
 800082a:	2110      	movs	r1, #16
 800082c:	485d      	ldr	r0, [pc, #372]	@ (80009a4 <display7SEGM+0x358>)
 800082e:	f001 fc36 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MSEGF_GPIO_Port, MSEGF_Pin, RESET);
 8000832:	2200      	movs	r2, #0
 8000834:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000838:	485a      	ldr	r0, [pc, #360]	@ (80009a4 <display7SEGM+0x358>)
 800083a:	f001 fc30 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MSEGG_GPIO_Port, MSEGG_Pin, RESET);
 800083e:	2200      	movs	r2, #0
 8000840:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000844:	4857      	ldr	r0, [pc, #348]	@ (80009a4 <display7SEGM+0x358>)
 8000846:	f001 fc2a 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MSEGC_GPIO_Port, MSEGC_Pin, RESET);
 800084a:	2200      	movs	r2, #0
 800084c:	2140      	movs	r1, #64	@ 0x40
 800084e:	4855      	ldr	r0, [pc, #340]	@ (80009a4 <display7SEGM+0x358>)
 8000850:	f001 fc25 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MSEGD_GPIO_Port, MSEGD_Pin, RESET);
 8000854:	2200      	movs	r2, #0
 8000856:	2180      	movs	r1, #128	@ 0x80
 8000858:	4852      	ldr	r0, [pc, #328]	@ (80009a4 <display7SEGM+0x358>)
 800085a:	f001 fc20 	bl	800209e <HAL_GPIO_WritePin>
		break;
 800085e:	e09c      	b.n	800099a <display7SEGM+0x34e>
	case 6:
		HAL_GPIO_WritePin(MSEGB_GPIO_Port, MSEGB_Pin, SET);
 8000860:	2201      	movs	r2, #1
 8000862:	2120      	movs	r1, #32
 8000864:	484f      	ldr	r0, [pc, #316]	@ (80009a4 <display7SEGM+0x358>)
 8000866:	f001 fc1a 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MSEGA_GPIO_Port, MSEGA_Pin, RESET);
 800086a:	2200      	movs	r2, #0
 800086c:	2110      	movs	r1, #16
 800086e:	484d      	ldr	r0, [pc, #308]	@ (80009a4 <display7SEGM+0x358>)
 8000870:	f001 fc15 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MSEGF_GPIO_Port, MSEGF_Pin, RESET);
 8000874:	2200      	movs	r2, #0
 8000876:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800087a:	484a      	ldr	r0, [pc, #296]	@ (80009a4 <display7SEGM+0x358>)
 800087c:	f001 fc0f 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MSEGG_GPIO_Port, MSEGG_Pin, RESET);
 8000880:	2200      	movs	r2, #0
 8000882:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000886:	4847      	ldr	r0, [pc, #284]	@ (80009a4 <display7SEGM+0x358>)
 8000888:	f001 fc09 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MSEGE_GPIO_Port, MSEGE_Pin, RESET);
 800088c:	2200      	movs	r2, #0
 800088e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000892:	4844      	ldr	r0, [pc, #272]	@ (80009a4 <display7SEGM+0x358>)
 8000894:	f001 fc03 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MSEGC_GPIO_Port, MSEGC_Pin, RESET);
 8000898:	2200      	movs	r2, #0
 800089a:	2140      	movs	r1, #64	@ 0x40
 800089c:	4841      	ldr	r0, [pc, #260]	@ (80009a4 <display7SEGM+0x358>)
 800089e:	f001 fbfe 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MSEGD_GPIO_Port, MSEGD_Pin, RESET);
 80008a2:	2200      	movs	r2, #0
 80008a4:	2180      	movs	r1, #128	@ 0x80
 80008a6:	483f      	ldr	r0, [pc, #252]	@ (80009a4 <display7SEGM+0x358>)
 80008a8:	f001 fbf9 	bl	800209e <HAL_GPIO_WritePin>
		break;
 80008ac:	e075      	b.n	800099a <display7SEGM+0x34e>
	case 7:
		HAL_GPIO_WritePin(MSEGF_GPIO_Port, MSEGF_Pin, SET);
 80008ae:	2201      	movs	r2, #1
 80008b0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80008b4:	483b      	ldr	r0, [pc, #236]	@ (80009a4 <display7SEGM+0x358>)
 80008b6:	f001 fbf2 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MSEGG_GPIO_Port, MSEGG_Pin, SET);
 80008ba:	2201      	movs	r2, #1
 80008bc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80008c0:	4838      	ldr	r0, [pc, #224]	@ (80009a4 <display7SEGM+0x358>)
 80008c2:	f001 fbec 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MSEGE_GPIO_Port, MSEGE_Pin, SET);
 80008c6:	2201      	movs	r2, #1
 80008c8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008cc:	4835      	ldr	r0, [pc, #212]	@ (80009a4 <display7SEGM+0x358>)
 80008ce:	f001 fbe6 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MSEGD_GPIO_Port, MSEGD_Pin, SET);
 80008d2:	2201      	movs	r2, #1
 80008d4:	2180      	movs	r1, #128	@ 0x80
 80008d6:	4833      	ldr	r0, [pc, #204]	@ (80009a4 <display7SEGM+0x358>)
 80008d8:	f001 fbe1 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MSEGA_GPIO_Port, MSEGA_Pin, RESET);
 80008dc:	2200      	movs	r2, #0
 80008de:	2110      	movs	r1, #16
 80008e0:	4830      	ldr	r0, [pc, #192]	@ (80009a4 <display7SEGM+0x358>)
 80008e2:	f001 fbdc 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MSEGB_GPIO_Port, MSEGB_Pin, RESET);
 80008e6:	2200      	movs	r2, #0
 80008e8:	2120      	movs	r1, #32
 80008ea:	482e      	ldr	r0, [pc, #184]	@ (80009a4 <display7SEGM+0x358>)
 80008ec:	f001 fbd7 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MSEGC_GPIO_Port, MSEGC_Pin, RESET);
 80008f0:	2200      	movs	r2, #0
 80008f2:	2140      	movs	r1, #64	@ 0x40
 80008f4:	482b      	ldr	r0, [pc, #172]	@ (80009a4 <display7SEGM+0x358>)
 80008f6:	f001 fbd2 	bl	800209e <HAL_GPIO_WritePin>
		break;
 80008fa:	e04e      	b.n	800099a <display7SEGM+0x34e>
	case 8:
		HAL_GPIO_WritePin(MSEGA_GPIO_Port, MSEGA_Pin, RESET);
 80008fc:	2200      	movs	r2, #0
 80008fe:	2110      	movs	r1, #16
 8000900:	4828      	ldr	r0, [pc, #160]	@ (80009a4 <display7SEGM+0x358>)
 8000902:	f001 fbcc 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MSEGB_GPIO_Port, MSEGB_Pin, RESET);
 8000906:	2200      	movs	r2, #0
 8000908:	2120      	movs	r1, #32
 800090a:	4826      	ldr	r0, [pc, #152]	@ (80009a4 <display7SEGM+0x358>)
 800090c:	f001 fbc7 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MSEGC_GPIO_Port, MSEGC_Pin, RESET);
 8000910:	2200      	movs	r2, #0
 8000912:	2140      	movs	r1, #64	@ 0x40
 8000914:	4823      	ldr	r0, [pc, #140]	@ (80009a4 <display7SEGM+0x358>)
 8000916:	f001 fbc2 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MSEGF_GPIO_Port, MSEGF_Pin, RESET);
 800091a:	2200      	movs	r2, #0
 800091c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000920:	4820      	ldr	r0, [pc, #128]	@ (80009a4 <display7SEGM+0x358>)
 8000922:	f001 fbbc 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MSEGG_GPIO_Port, MSEGG_Pin, RESET);
 8000926:	2200      	movs	r2, #0
 8000928:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800092c:	481d      	ldr	r0, [pc, #116]	@ (80009a4 <display7SEGM+0x358>)
 800092e:	f001 fbb6 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MSEGE_GPIO_Port, MSEGE_Pin, RESET);
 8000932:	2200      	movs	r2, #0
 8000934:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000938:	481a      	ldr	r0, [pc, #104]	@ (80009a4 <display7SEGM+0x358>)
 800093a:	f001 fbb0 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MSEGD_GPIO_Port, MSEGD_Pin, RESET);
 800093e:	2200      	movs	r2, #0
 8000940:	2180      	movs	r1, #128	@ 0x80
 8000942:	4818      	ldr	r0, [pc, #96]	@ (80009a4 <display7SEGM+0x358>)
 8000944:	f001 fbab 	bl	800209e <HAL_GPIO_WritePin>
		break;
 8000948:	e027      	b.n	800099a <display7SEGM+0x34e>
	case 9:
		HAL_GPIO_WritePin(MSEGE_GPIO_Port, MSEGE_Pin, SET);
 800094a:	2201      	movs	r2, #1
 800094c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000950:	4814      	ldr	r0, [pc, #80]	@ (80009a4 <display7SEGM+0x358>)
 8000952:	f001 fba4 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MSEGA_GPIO_Port, MSEGA_Pin, RESET);
 8000956:	2200      	movs	r2, #0
 8000958:	2110      	movs	r1, #16
 800095a:	4812      	ldr	r0, [pc, #72]	@ (80009a4 <display7SEGM+0x358>)
 800095c:	f001 fb9f 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MSEGB_GPIO_Port, MSEGB_Pin, RESET);
 8000960:	2200      	movs	r2, #0
 8000962:	2120      	movs	r1, #32
 8000964:	480f      	ldr	r0, [pc, #60]	@ (80009a4 <display7SEGM+0x358>)
 8000966:	f001 fb9a 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MSEGC_GPIO_Port, MSEGC_Pin, RESET);
 800096a:	2200      	movs	r2, #0
 800096c:	2140      	movs	r1, #64	@ 0x40
 800096e:	480d      	ldr	r0, [pc, #52]	@ (80009a4 <display7SEGM+0x358>)
 8000970:	f001 fb95 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MSEGF_GPIO_Port, MSEGF_Pin, RESET);
 8000974:	2200      	movs	r2, #0
 8000976:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800097a:	480a      	ldr	r0, [pc, #40]	@ (80009a4 <display7SEGM+0x358>)
 800097c:	f001 fb8f 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MSEGG_GPIO_Port, MSEGG_Pin, RESET);
 8000980:	2200      	movs	r2, #0
 8000982:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000986:	4807      	ldr	r0, [pc, #28]	@ (80009a4 <display7SEGM+0x358>)
 8000988:	f001 fb89 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MSEGD_GPIO_Port, MSEGD_Pin, RESET);
 800098c:	2200      	movs	r2, #0
 800098e:	2180      	movs	r1, #128	@ 0x80
 8000990:	4804      	ldr	r0, [pc, #16]	@ (80009a4 <display7SEGM+0x358>)
 8000992:	f001 fb84 	bl	800209e <HAL_GPIO_WritePin>
		break;
 8000996:	e000      	b.n	800099a <display7SEGM+0x34e>
	default:
		break;
 8000998:	bf00      	nop
  }
}
 800099a:	bf00      	nop
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40010c00 	.word	0x40010c00

080009a8 <auto_update7SEG>:

int led_index = 0;
int led_indexM = 0;
int led_buffer[2] = {0, 0};
int led_bufferM[2] = {0, 0};
void auto_update7SEG(void) {
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
	if (timer7_flag == 1) {
 80009ac:	4b31      	ldr	r3, [pc, #196]	@ (8000a74 <auto_update7SEG+0xcc>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	2b01      	cmp	r3, #1
 80009b2:	d15d      	bne.n	8000a70 <auto_update7SEG+0xc8>
		led_buffer[0] = (counter0 / 100) / 10;
 80009b4:	4b30      	ldr	r3, [pc, #192]	@ (8000a78 <auto_update7SEG+0xd0>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a30      	ldr	r2, [pc, #192]	@ (8000a7c <auto_update7SEG+0xd4>)
 80009ba:	fb82 1203 	smull	r1, r2, r2, r3
 80009be:	1192      	asrs	r2, r2, #6
 80009c0:	17db      	asrs	r3, r3, #31
 80009c2:	1ad3      	subs	r3, r2, r3
 80009c4:	4a2e      	ldr	r2, [pc, #184]	@ (8000a80 <auto_update7SEG+0xd8>)
 80009c6:	6013      	str	r3, [r2, #0]
		led_buffer[1] = (counter0 / 100) % 10;
 80009c8:	4b2b      	ldr	r3, [pc, #172]	@ (8000a78 <auto_update7SEG+0xd0>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a2d      	ldr	r2, [pc, #180]	@ (8000a84 <auto_update7SEG+0xdc>)
 80009ce:	fb82 1203 	smull	r1, r2, r2, r3
 80009d2:	1152      	asrs	r2, r2, #5
 80009d4:	17db      	asrs	r3, r3, #31
 80009d6:	1ad1      	subs	r1, r2, r3
 80009d8:	4b2b      	ldr	r3, [pc, #172]	@ (8000a88 <auto_update7SEG+0xe0>)
 80009da:	fb83 2301 	smull	r2, r3, r3, r1
 80009de:	109a      	asrs	r2, r3, #2
 80009e0:	17cb      	asrs	r3, r1, #31
 80009e2:	1ad2      	subs	r2, r2, r3
 80009e4:	4613      	mov	r3, r2
 80009e6:	009b      	lsls	r3, r3, #2
 80009e8:	4413      	add	r3, r2
 80009ea:	005b      	lsls	r3, r3, #1
 80009ec:	1aca      	subs	r2, r1, r3
 80009ee:	4b24      	ldr	r3, [pc, #144]	@ (8000a80 <auto_update7SEG+0xd8>)
 80009f0:	605a      	str	r2, [r3, #4]
		led_bufferM[0] = (counter1 / 100 ) / 10;
 80009f2:	4b26      	ldr	r3, [pc, #152]	@ (8000a8c <auto_update7SEG+0xe4>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	4a21      	ldr	r2, [pc, #132]	@ (8000a7c <auto_update7SEG+0xd4>)
 80009f8:	fb82 1203 	smull	r1, r2, r2, r3
 80009fc:	1192      	asrs	r2, r2, #6
 80009fe:	17db      	asrs	r3, r3, #31
 8000a00:	1ad3      	subs	r3, r2, r3
 8000a02:	4a23      	ldr	r2, [pc, #140]	@ (8000a90 <auto_update7SEG+0xe8>)
 8000a04:	6013      	str	r3, [r2, #0]
		led_bufferM[1] = (counter1 / 100) % 10;
 8000a06:	4b21      	ldr	r3, [pc, #132]	@ (8000a8c <auto_update7SEG+0xe4>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4a1e      	ldr	r2, [pc, #120]	@ (8000a84 <auto_update7SEG+0xdc>)
 8000a0c:	fb82 1203 	smull	r1, r2, r2, r3
 8000a10:	1152      	asrs	r2, r2, #5
 8000a12:	17db      	asrs	r3, r3, #31
 8000a14:	1ad1      	subs	r1, r2, r3
 8000a16:	4b1c      	ldr	r3, [pc, #112]	@ (8000a88 <auto_update7SEG+0xe0>)
 8000a18:	fb83 2301 	smull	r2, r3, r3, r1
 8000a1c:	109a      	asrs	r2, r3, #2
 8000a1e:	17cb      	asrs	r3, r1, #31
 8000a20:	1ad2      	subs	r2, r2, r3
 8000a22:	4613      	mov	r3, r2
 8000a24:	009b      	lsls	r3, r3, #2
 8000a26:	4413      	add	r3, r2
 8000a28:	005b      	lsls	r3, r3, #1
 8000a2a:	1aca      	subs	r2, r1, r3
 8000a2c:	4b18      	ldr	r3, [pc, #96]	@ (8000a90 <auto_update7SEG+0xe8>)
 8000a2e:	605a      	str	r2, [r3, #4]

		update7SEG(led_index);
 8000a30:	4b18      	ldr	r3, [pc, #96]	@ (8000a94 <auto_update7SEG+0xec>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4618      	mov	r0, r3
 8000a36:	f000 f951 	bl	8000cdc <update7SEG>
		update7SEGM(led_indexM);
 8000a3a:	4b17      	ldr	r3, [pc, #92]	@ (8000a98 <auto_update7SEG+0xf0>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f000 f984 	bl	8000d4c <update7SEGM>
		led_index = (led_index + 1) % 2;
 8000a44:	4b13      	ldr	r3, [pc, #76]	@ (8000a94 <auto_update7SEG+0xec>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	3301      	adds	r3, #1
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	f003 0301 	and.w	r3, r3, #1
 8000a50:	bfb8      	it	lt
 8000a52:	425b      	neglt	r3, r3
 8000a54:	4a0f      	ldr	r2, [pc, #60]	@ (8000a94 <auto_update7SEG+0xec>)
 8000a56:	6013      	str	r3, [r2, #0]
		led_indexM = (led_indexM + 1) % 2;
 8000a58:	4b0f      	ldr	r3, [pc, #60]	@ (8000a98 <auto_update7SEG+0xf0>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	f003 0301 	and.w	r3, r3, #1
 8000a64:	bfb8      	it	lt
 8000a66:	425b      	neglt	r3, r3
 8000a68:	4a0b      	ldr	r2, [pc, #44]	@ (8000a98 <auto_update7SEG+0xf0>)
 8000a6a:	6013      	str	r3, [r2, #0]
		setTimer7Led();
 8000a6c:	f000 fcd6 	bl	800141c <setTimer7Led>
	}
}
 8000a70:	bf00      	nop
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	20000118 	.word	0x20000118
 8000a78:	20000120 	.word	0x20000120
 8000a7c:	10624dd3 	.word	0x10624dd3
 8000a80:	200000a4 	.word	0x200000a4
 8000a84:	51eb851f 	.word	0x51eb851f
 8000a88:	66666667 	.word	0x66666667
 8000a8c:	20000124 	.word	0x20000124
 8000a90:	200000ac 	.word	0x200000ac
 8000a94:	2000009c 	.word	0x2000009c
 8000a98:	200000a0 	.word	0x200000a0

08000a9c <auto_update7SEG_red>:

void auto_update7SEG_red(void) {
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
	if (timer7_flag == 1) {
 8000aa0:	4b25      	ldr	r3, [pc, #148]	@ (8000b38 <auto_update7SEG_red+0x9c>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	2b01      	cmp	r3, #1
 8000aa6:	d144      	bne.n	8000b32 <auto_update7SEG_red+0x96>
		led_buffer[0] = (temp / 1000) / 10;
 8000aa8:	4b24      	ldr	r3, [pc, #144]	@ (8000b3c <auto_update7SEG_red+0xa0>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a24      	ldr	r2, [pc, #144]	@ (8000b40 <auto_update7SEG_red+0xa4>)
 8000aae:	fb82 1203 	smull	r1, r2, r2, r3
 8000ab2:	1312      	asrs	r2, r2, #12
 8000ab4:	17db      	asrs	r3, r3, #31
 8000ab6:	1ad3      	subs	r3, r2, r3
 8000ab8:	4a22      	ldr	r2, [pc, #136]	@ (8000b44 <auto_update7SEG_red+0xa8>)
 8000aba:	6013      	str	r3, [r2, #0]
		led_buffer[1] = (temp / 1000) % 10;
 8000abc:	4b1f      	ldr	r3, [pc, #124]	@ (8000b3c <auto_update7SEG_red+0xa0>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a21      	ldr	r2, [pc, #132]	@ (8000b48 <auto_update7SEG_red+0xac>)
 8000ac2:	fb82 1203 	smull	r1, r2, r2, r3
 8000ac6:	1192      	asrs	r2, r2, #6
 8000ac8:	17db      	asrs	r3, r3, #31
 8000aca:	1ad1      	subs	r1, r2, r3
 8000acc:	4b1f      	ldr	r3, [pc, #124]	@ (8000b4c <auto_update7SEG_red+0xb0>)
 8000ace:	fb83 2301 	smull	r2, r3, r3, r1
 8000ad2:	109a      	asrs	r2, r3, #2
 8000ad4:	17cb      	asrs	r3, r1, #31
 8000ad6:	1ad2      	subs	r2, r2, r3
 8000ad8:	4613      	mov	r3, r2
 8000ada:	009b      	lsls	r3, r3, #2
 8000adc:	4413      	add	r3, r2
 8000ade:	005b      	lsls	r3, r3, #1
 8000ae0:	1aca      	subs	r2, r1, r3
 8000ae2:	4b18      	ldr	r3, [pc, #96]	@ (8000b44 <auto_update7SEG_red+0xa8>)
 8000ae4:	605a      	str	r2, [r3, #4]
		led_bufferM[0] = 0;
 8000ae6:	4b1a      	ldr	r3, [pc, #104]	@ (8000b50 <auto_update7SEG_red+0xb4>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
		led_bufferM[1] = 2;
 8000aec:	4b18      	ldr	r3, [pc, #96]	@ (8000b50 <auto_update7SEG_red+0xb4>)
 8000aee:	2202      	movs	r2, #2
 8000af0:	605a      	str	r2, [r3, #4]

		update7SEG(led_index);
 8000af2:	4b18      	ldr	r3, [pc, #96]	@ (8000b54 <auto_update7SEG_red+0xb8>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4618      	mov	r0, r3
 8000af8:	f000 f8f0 	bl	8000cdc <update7SEG>
		update7SEGM(led_indexM);
 8000afc:	4b16      	ldr	r3, [pc, #88]	@ (8000b58 <auto_update7SEG_red+0xbc>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4618      	mov	r0, r3
 8000b02:	f000 f923 	bl	8000d4c <update7SEGM>
		led_index = (led_index + 1) % 2;
 8000b06:	4b13      	ldr	r3, [pc, #76]	@ (8000b54 <auto_update7SEG_red+0xb8>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	f003 0301 	and.w	r3, r3, #1
 8000b12:	bfb8      	it	lt
 8000b14:	425b      	neglt	r3, r3
 8000b16:	4a0f      	ldr	r2, [pc, #60]	@ (8000b54 <auto_update7SEG_red+0xb8>)
 8000b18:	6013      	str	r3, [r2, #0]
		led_indexM = (led_indexM + 1) % 2;
 8000b1a:	4b0f      	ldr	r3, [pc, #60]	@ (8000b58 <auto_update7SEG_red+0xbc>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	3301      	adds	r3, #1
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	f003 0301 	and.w	r3, r3, #1
 8000b26:	bfb8      	it	lt
 8000b28:	425b      	neglt	r3, r3
 8000b2a:	4a0b      	ldr	r2, [pc, #44]	@ (8000b58 <auto_update7SEG_red+0xbc>)
 8000b2c:	6013      	str	r3, [r2, #0]
		setTimer7Led();
 8000b2e:	f000 fc75 	bl	800141c <setTimer7Led>
	}
}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	20000118 	.word	0x20000118
 8000b3c:	2000011c 	.word	0x2000011c
 8000b40:	68db8bad 	.word	0x68db8bad
 8000b44:	200000a4 	.word	0x200000a4
 8000b48:	10624dd3 	.word	0x10624dd3
 8000b4c:	66666667 	.word	0x66666667
 8000b50:	200000ac 	.word	0x200000ac
 8000b54:	2000009c 	.word	0x2000009c
 8000b58:	200000a0 	.word	0x200000a0

08000b5c <auto_update7SEG_yellow>:

void auto_update7SEG_yellow(void) {
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
	if (timer7_flag == 1) {
 8000b60:	4b25      	ldr	r3, [pc, #148]	@ (8000bf8 <auto_update7SEG_yellow+0x9c>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	2b01      	cmp	r3, #1
 8000b66:	d144      	bne.n	8000bf2 <auto_update7SEG_yellow+0x96>
		led_buffer[0] = (temp / 1000) / 10;
 8000b68:	4b24      	ldr	r3, [pc, #144]	@ (8000bfc <auto_update7SEG_yellow+0xa0>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a24      	ldr	r2, [pc, #144]	@ (8000c00 <auto_update7SEG_yellow+0xa4>)
 8000b6e:	fb82 1203 	smull	r1, r2, r2, r3
 8000b72:	1312      	asrs	r2, r2, #12
 8000b74:	17db      	asrs	r3, r3, #31
 8000b76:	1ad3      	subs	r3, r2, r3
 8000b78:	4a22      	ldr	r2, [pc, #136]	@ (8000c04 <auto_update7SEG_yellow+0xa8>)
 8000b7a:	6013      	str	r3, [r2, #0]
		led_buffer[1] = (temp / 1000) % 10;
 8000b7c:	4b1f      	ldr	r3, [pc, #124]	@ (8000bfc <auto_update7SEG_yellow+0xa0>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a21      	ldr	r2, [pc, #132]	@ (8000c08 <auto_update7SEG_yellow+0xac>)
 8000b82:	fb82 1203 	smull	r1, r2, r2, r3
 8000b86:	1192      	asrs	r2, r2, #6
 8000b88:	17db      	asrs	r3, r3, #31
 8000b8a:	1ad1      	subs	r1, r2, r3
 8000b8c:	4b1f      	ldr	r3, [pc, #124]	@ (8000c0c <auto_update7SEG_yellow+0xb0>)
 8000b8e:	fb83 2301 	smull	r2, r3, r3, r1
 8000b92:	109a      	asrs	r2, r3, #2
 8000b94:	17cb      	asrs	r3, r1, #31
 8000b96:	1ad2      	subs	r2, r2, r3
 8000b98:	4613      	mov	r3, r2
 8000b9a:	009b      	lsls	r3, r3, #2
 8000b9c:	4413      	add	r3, r2
 8000b9e:	005b      	lsls	r3, r3, #1
 8000ba0:	1aca      	subs	r2, r1, r3
 8000ba2:	4b18      	ldr	r3, [pc, #96]	@ (8000c04 <auto_update7SEG_yellow+0xa8>)
 8000ba4:	605a      	str	r2, [r3, #4]
		led_bufferM[0] = 0;
 8000ba6:	4b1a      	ldr	r3, [pc, #104]	@ (8000c10 <auto_update7SEG_yellow+0xb4>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
		led_bufferM[1] = 3;
 8000bac:	4b18      	ldr	r3, [pc, #96]	@ (8000c10 <auto_update7SEG_yellow+0xb4>)
 8000bae:	2203      	movs	r2, #3
 8000bb0:	605a      	str	r2, [r3, #4]

		update7SEG(led_index);
 8000bb2:	4b18      	ldr	r3, [pc, #96]	@ (8000c14 <auto_update7SEG_yellow+0xb8>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f000 f890 	bl	8000cdc <update7SEG>
		update7SEGM(led_indexM);
 8000bbc:	4b16      	ldr	r3, [pc, #88]	@ (8000c18 <auto_update7SEG_yellow+0xbc>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f000 f8c3 	bl	8000d4c <update7SEGM>
		led_index = (led_index + 1) % 2;
 8000bc6:	4b13      	ldr	r3, [pc, #76]	@ (8000c14 <auto_update7SEG_yellow+0xb8>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	3301      	adds	r3, #1
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	f003 0301 	and.w	r3, r3, #1
 8000bd2:	bfb8      	it	lt
 8000bd4:	425b      	neglt	r3, r3
 8000bd6:	4a0f      	ldr	r2, [pc, #60]	@ (8000c14 <auto_update7SEG_yellow+0xb8>)
 8000bd8:	6013      	str	r3, [r2, #0]
		led_indexM = (led_indexM + 1) % 2;
 8000bda:	4b0f      	ldr	r3, [pc, #60]	@ (8000c18 <auto_update7SEG_yellow+0xbc>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	3301      	adds	r3, #1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	f003 0301 	and.w	r3, r3, #1
 8000be6:	bfb8      	it	lt
 8000be8:	425b      	neglt	r3, r3
 8000bea:	4a0b      	ldr	r2, [pc, #44]	@ (8000c18 <auto_update7SEG_yellow+0xbc>)
 8000bec:	6013      	str	r3, [r2, #0]
		setTimer7Led();
 8000bee:	f000 fc15 	bl	800141c <setTimer7Led>
	}
}
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	20000118 	.word	0x20000118
 8000bfc:	2000011c 	.word	0x2000011c
 8000c00:	68db8bad 	.word	0x68db8bad
 8000c04:	200000a4 	.word	0x200000a4
 8000c08:	10624dd3 	.word	0x10624dd3
 8000c0c:	66666667 	.word	0x66666667
 8000c10:	200000ac 	.word	0x200000ac
 8000c14:	2000009c 	.word	0x2000009c
 8000c18:	200000a0 	.word	0x200000a0

08000c1c <auto_update7SEG_green>:

void auto_update7SEG_green(void) {
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
	if (timer7_flag == 1) {
 8000c20:	4b25      	ldr	r3, [pc, #148]	@ (8000cb8 <auto_update7SEG_green+0x9c>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	2b01      	cmp	r3, #1
 8000c26:	d144      	bne.n	8000cb2 <auto_update7SEG_green+0x96>
		led_buffer[0] = (temp / 1000) / 10;
 8000c28:	4b24      	ldr	r3, [pc, #144]	@ (8000cbc <auto_update7SEG_green+0xa0>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a24      	ldr	r2, [pc, #144]	@ (8000cc0 <auto_update7SEG_green+0xa4>)
 8000c2e:	fb82 1203 	smull	r1, r2, r2, r3
 8000c32:	1312      	asrs	r2, r2, #12
 8000c34:	17db      	asrs	r3, r3, #31
 8000c36:	1ad3      	subs	r3, r2, r3
 8000c38:	4a22      	ldr	r2, [pc, #136]	@ (8000cc4 <auto_update7SEG_green+0xa8>)
 8000c3a:	6013      	str	r3, [r2, #0]
		led_buffer[1] = (temp / 1000) % 10;
 8000c3c:	4b1f      	ldr	r3, [pc, #124]	@ (8000cbc <auto_update7SEG_green+0xa0>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a21      	ldr	r2, [pc, #132]	@ (8000cc8 <auto_update7SEG_green+0xac>)
 8000c42:	fb82 1203 	smull	r1, r2, r2, r3
 8000c46:	1192      	asrs	r2, r2, #6
 8000c48:	17db      	asrs	r3, r3, #31
 8000c4a:	1ad1      	subs	r1, r2, r3
 8000c4c:	4b1f      	ldr	r3, [pc, #124]	@ (8000ccc <auto_update7SEG_green+0xb0>)
 8000c4e:	fb83 2301 	smull	r2, r3, r3, r1
 8000c52:	109a      	asrs	r2, r3, #2
 8000c54:	17cb      	asrs	r3, r1, #31
 8000c56:	1ad2      	subs	r2, r2, r3
 8000c58:	4613      	mov	r3, r2
 8000c5a:	009b      	lsls	r3, r3, #2
 8000c5c:	4413      	add	r3, r2
 8000c5e:	005b      	lsls	r3, r3, #1
 8000c60:	1aca      	subs	r2, r1, r3
 8000c62:	4b18      	ldr	r3, [pc, #96]	@ (8000cc4 <auto_update7SEG_green+0xa8>)
 8000c64:	605a      	str	r2, [r3, #4]
		led_bufferM[0] = 0;
 8000c66:	4b1a      	ldr	r3, [pc, #104]	@ (8000cd0 <auto_update7SEG_green+0xb4>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
		led_bufferM[1] = 4;
 8000c6c:	4b18      	ldr	r3, [pc, #96]	@ (8000cd0 <auto_update7SEG_green+0xb4>)
 8000c6e:	2204      	movs	r2, #4
 8000c70:	605a      	str	r2, [r3, #4]

		update7SEG(led_index);
 8000c72:	4b18      	ldr	r3, [pc, #96]	@ (8000cd4 <auto_update7SEG_green+0xb8>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4618      	mov	r0, r3
 8000c78:	f000 f830 	bl	8000cdc <update7SEG>
		update7SEGM(led_indexM);
 8000c7c:	4b16      	ldr	r3, [pc, #88]	@ (8000cd8 <auto_update7SEG_green+0xbc>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4618      	mov	r0, r3
 8000c82:	f000 f863 	bl	8000d4c <update7SEGM>
		led_index = (led_index + 1) % 2;
 8000c86:	4b13      	ldr	r3, [pc, #76]	@ (8000cd4 <auto_update7SEG_green+0xb8>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	3301      	adds	r3, #1
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	f003 0301 	and.w	r3, r3, #1
 8000c92:	bfb8      	it	lt
 8000c94:	425b      	neglt	r3, r3
 8000c96:	4a0f      	ldr	r2, [pc, #60]	@ (8000cd4 <auto_update7SEG_green+0xb8>)
 8000c98:	6013      	str	r3, [r2, #0]
		led_indexM = (led_indexM + 1) % 2;
 8000c9a:	4b0f      	ldr	r3, [pc, #60]	@ (8000cd8 <auto_update7SEG_green+0xbc>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	f003 0301 	and.w	r3, r3, #1
 8000ca6:	bfb8      	it	lt
 8000ca8:	425b      	neglt	r3, r3
 8000caa:	4a0b      	ldr	r2, [pc, #44]	@ (8000cd8 <auto_update7SEG_green+0xbc>)
 8000cac:	6013      	str	r3, [r2, #0]
		setTimer7Led();
 8000cae:	f000 fbb5 	bl	800141c <setTimer7Led>
	}
}
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	20000118 	.word	0x20000118
 8000cbc:	2000011c 	.word	0x2000011c
 8000cc0:	68db8bad 	.word	0x68db8bad
 8000cc4:	200000a4 	.word	0x200000a4
 8000cc8:	10624dd3 	.word	0x10624dd3
 8000ccc:	66666667 	.word	0x66666667
 8000cd0:	200000ac 	.word	0x200000ac
 8000cd4:	2000009c 	.word	0x2000009c
 8000cd8:	200000a0 	.word	0x200000a0

08000cdc <update7SEG>:

void update7SEG (int index) {
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
	switch (index){
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d003      	beq.n	8000cf2 <update7SEG+0x16>
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	2b01      	cmp	r3, #1
 8000cee:	d012      	beq.n	8000d16 <update7SEG+0x3a>
		display7SEG(led_buffer[1]);
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
		break;
	default:
		break;
 8000cf0:	e023      	b.n	8000d3a <update7SEG+0x5e>
		display7SEG(led_buffer[0]);
 8000cf2:	4b14      	ldr	r3, [pc, #80]	@ (8000d44 <update7SEG+0x68>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f7ff fadc 	bl	80002b4 <display7SEG>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d02:	4811      	ldr	r0, [pc, #68]	@ (8000d48 <update7SEG+0x6c>)
 8000d04:	f001 f9cb 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 8000d08:	2200      	movs	r2, #0
 8000d0a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000d0e:	480e      	ldr	r0, [pc, #56]	@ (8000d48 <update7SEG+0x6c>)
 8000d10:	f001 f9c5 	bl	800209e <HAL_GPIO_WritePin>
		break;
 8000d14:	e011      	b.n	8000d3a <update7SEG+0x5e>
		display7SEG(led_buffer[1]);
 8000d16:	4b0b      	ldr	r3, [pc, #44]	@ (8000d44 <update7SEG+0x68>)
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f7ff faca 	bl	80002b4 <display7SEG>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 8000d20:	2200      	movs	r2, #0
 8000d22:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d26:	4808      	ldr	r0, [pc, #32]	@ (8000d48 <update7SEG+0x6c>)
 8000d28:	f001 f9b9 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000d32:	4805      	ldr	r0, [pc, #20]	@ (8000d48 <update7SEG+0x6c>)
 8000d34:	f001 f9b3 	bl	800209e <HAL_GPIO_WritePin>
		break;
 8000d38:	bf00      	nop
	}
}
 8000d3a:	bf00      	nop
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	200000a4 	.word	0x200000a4
 8000d48:	40010c00 	.word	0x40010c00

08000d4c <update7SEGM>:

void update7SEGM(int index) {
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
	switch (index) {
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d003      	beq.n	8000d62 <update7SEGM+0x16>
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2b01      	cmp	r3, #1
 8000d5e:	d012      	beq.n	8000d86 <update7SEGM+0x3a>
		display7SEGM(led_bufferM[1]);
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
		break;
	default:
		break;
 8000d60:	e023      	b.n	8000daa <update7SEGM+0x5e>
		display7SEGM(led_bufferM[0]);
 8000d62:	4b14      	ldr	r3, [pc, #80]	@ (8000db4 <update7SEGM+0x68>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4618      	mov	r0, r3
 8000d68:	f7ff fc70 	bl	800064c <display7SEGM>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d72:	4811      	ldr	r0, [pc, #68]	@ (8000db8 <update7SEGM+0x6c>)
 8000d74:	f001 f993 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 8000d78:	2200      	movs	r2, #0
 8000d7a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d7e:	480e      	ldr	r0, [pc, #56]	@ (8000db8 <update7SEGM+0x6c>)
 8000d80:	f001 f98d 	bl	800209e <HAL_GPIO_WritePin>
		break;
 8000d84:	e011      	b.n	8000daa <update7SEGM+0x5e>
		display7SEGM(led_bufferM[1]);
 8000d86:	4b0b      	ldr	r3, [pc, #44]	@ (8000db4 <update7SEGM+0x68>)
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f7ff fc5e 	bl	800064c <display7SEGM>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 8000d90:	2200      	movs	r2, #0
 8000d92:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d96:	4808      	ldr	r0, [pc, #32]	@ (8000db8 <update7SEGM+0x6c>)
 8000d98:	f001 f981 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000da2:	4805      	ldr	r0, [pc, #20]	@ (8000db8 <update7SEGM+0x6c>)
 8000da4:	f001 f97b 	bl	800209e <HAL_GPIO_WritePin>
		break;
 8000da8:	bf00      	nop
	}
}
 8000daa:	bf00      	nop
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	200000ac 	.word	0x200000ac
 8000db8:	40010c00 	.word	0x40010c00

08000dbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dc0:	f000 fe6a 	bl	8001a98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dc4:	f000 f816 	bl	8000df4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dc8:	f000 f89c 	bl	8000f04 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000dcc:	f000 f84e 	bl	8000e6c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000dd0:	4805      	ldr	r0, [pc, #20]	@ (8000de8 <main+0x2c>)
 8000dd2:	f001 fdc3 	bl	800295c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  traffic = START;
 8000dd6:	4b05      	ldr	r3, [pc, #20]	@ (8000dec <main+0x30>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
  mode = 1;
 8000ddc:	4b04      	ldr	r3, [pc, #16]	@ (8000df0 <main+0x34>)
 8000dde:	2201      	movs	r2, #1
 8000de0:	601a      	str	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  fsm_mode();
 8000de2:	f000 fb95 	bl	8001510 <fsm_mode>
 8000de6:	e7fc      	b.n	8000de2 <main+0x26>
 8000de8:	200000b4 	.word	0x200000b4
 8000dec:	2000005c 	.word	0x2000005c
 8000df0:	20000034 	.word	0x20000034

08000df4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b090      	sub	sp, #64	@ 0x40
 8000df8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dfa:	f107 0318 	add.w	r3, r7, #24
 8000dfe:	2228      	movs	r2, #40	@ 0x28
 8000e00:	2100      	movs	r1, #0
 8000e02:	4618      	mov	r0, r3
 8000e04:	f002 f936 	bl	8003074 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e08:	1d3b      	adds	r3, r7, #4
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	601a      	str	r2, [r3, #0]
 8000e0e:	605a      	str	r2, [r3, #4]
 8000e10:	609a      	str	r2, [r3, #8]
 8000e12:	60da      	str	r2, [r3, #12]
 8000e14:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e16:	2302      	movs	r3, #2
 8000e18:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e1e:	2310      	movs	r3, #16
 8000e20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e22:	2300      	movs	r3, #0
 8000e24:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e26:	f107 0318 	add.w	r3, r7, #24
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f001 f968 	bl	8002100 <HAL_RCC_OscConfig>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000e36:	f000 f8d3 	bl	8000fe0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e3a:	230f      	movs	r3, #15
 8000e3c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e42:	2300      	movs	r3, #0
 8000e44:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e46:	2300      	movs	r3, #0
 8000e48:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e4e:	1d3b      	adds	r3, r7, #4
 8000e50:	2100      	movs	r1, #0
 8000e52:	4618      	mov	r0, r3
 8000e54:	f001 fbd6 	bl	8002604 <HAL_RCC_ClockConfig>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000e5e:	f000 f8bf 	bl	8000fe0 <Error_Handler>
  }
}
 8000e62:	bf00      	nop
 8000e64:	3740      	adds	r7, #64	@ 0x40
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
	...

08000e6c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b086      	sub	sp, #24
 8000e70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e72:	f107 0308 	add.w	r3, r7, #8
 8000e76:	2200      	movs	r2, #0
 8000e78:	601a      	str	r2, [r3, #0]
 8000e7a:	605a      	str	r2, [r3, #4]
 8000e7c:	609a      	str	r2, [r3, #8]
 8000e7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e80:	463b      	mov	r3, r7
 8000e82:	2200      	movs	r2, #0
 8000e84:	601a      	str	r2, [r3, #0]
 8000e86:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e88:	4b1d      	ldr	r3, [pc, #116]	@ (8000f00 <MX_TIM2_Init+0x94>)
 8000e8a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e8e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000e90:	4b1b      	ldr	r3, [pc, #108]	@ (8000f00 <MX_TIM2_Init+0x94>)
 8000e92:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000e96:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e98:	4b19      	ldr	r3, [pc, #100]	@ (8000f00 <MX_TIM2_Init+0x94>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000e9e:	4b18      	ldr	r3, [pc, #96]	@ (8000f00 <MX_TIM2_Init+0x94>)
 8000ea0:	2209      	movs	r2, #9
 8000ea2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ea4:	4b16      	ldr	r3, [pc, #88]	@ (8000f00 <MX_TIM2_Init+0x94>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eaa:	4b15      	ldr	r3, [pc, #84]	@ (8000f00 <MX_TIM2_Init+0x94>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000eb0:	4813      	ldr	r0, [pc, #76]	@ (8000f00 <MX_TIM2_Init+0x94>)
 8000eb2:	f001 fd03 	bl	80028bc <HAL_TIM_Base_Init>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000ebc:	f000 f890 	bl	8000fe0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ec0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ec4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ec6:	f107 0308 	add.w	r3, r7, #8
 8000eca:	4619      	mov	r1, r3
 8000ecc:	480c      	ldr	r0, [pc, #48]	@ (8000f00 <MX_TIM2_Init+0x94>)
 8000ece:	f001 fe81 	bl	8002bd4 <HAL_TIM_ConfigClockSource>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000ed8:	f000 f882 	bl	8000fe0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000edc:	2300      	movs	r3, #0
 8000ede:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ee4:	463b      	mov	r3, r7
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4805      	ldr	r0, [pc, #20]	@ (8000f00 <MX_TIM2_Init+0x94>)
 8000eea:	f002 f859 	bl	8002fa0 <HAL_TIMEx_MasterConfigSynchronization>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000ef4:	f000 f874 	bl	8000fe0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ef8:	bf00      	nop
 8000efa:	3718      	adds	r7, #24
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	200000b4 	.word	0x200000b4

08000f04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b086      	sub	sp, #24
 8000f08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0a:	f107 0308 	add.w	r3, r7, #8
 8000f0e:	2200      	movs	r2, #0
 8000f10:	601a      	str	r2, [r3, #0]
 8000f12:	605a      	str	r2, [r3, #4]
 8000f14:	609a      	str	r2, [r3, #8]
 8000f16:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f18:	4b28      	ldr	r3, [pc, #160]	@ (8000fbc <MX_GPIO_Init+0xb8>)
 8000f1a:	699b      	ldr	r3, [r3, #24]
 8000f1c:	4a27      	ldr	r2, [pc, #156]	@ (8000fbc <MX_GPIO_Init+0xb8>)
 8000f1e:	f043 0304 	orr.w	r3, r3, #4
 8000f22:	6193      	str	r3, [r2, #24]
 8000f24:	4b25      	ldr	r3, [pc, #148]	@ (8000fbc <MX_GPIO_Init+0xb8>)
 8000f26:	699b      	ldr	r3, [r3, #24]
 8000f28:	f003 0304 	and.w	r3, r3, #4
 8000f2c:	607b      	str	r3, [r7, #4]
 8000f2e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f30:	4b22      	ldr	r3, [pc, #136]	@ (8000fbc <MX_GPIO_Init+0xb8>)
 8000f32:	699b      	ldr	r3, [r3, #24]
 8000f34:	4a21      	ldr	r2, [pc, #132]	@ (8000fbc <MX_GPIO_Init+0xb8>)
 8000f36:	f043 0308 	orr.w	r3, r3, #8
 8000f3a:	6193      	str	r3, [r2, #24]
 8000f3c:	4b1f      	ldr	r3, [pc, #124]	@ (8000fbc <MX_GPIO_Init+0xb8>)
 8000f3e:	699b      	ldr	r3, [r3, #24]
 8000f40:	f003 0308 	and.w	r3, r3, #8
 8000f44:	603b      	str	r3, [r7, #0]
 8000f46:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED1_Pin|LED_YELLOW1_Pin|LED_GREEN1_Pin|LED_RED2_Pin
 8000f48:	2200      	movs	r2, #0
 8000f4a:	f643 71fe 	movw	r1, #16382	@ 0x3ffe
 8000f4e:	481c      	ldr	r0, [pc, #112]	@ (8000fc0 <MX_GPIO_Init+0xbc>)
 8000f50:	f001 f8a5 	bl	800209e <HAL_GPIO_WritePin>
                          |LED_YELLOW2_Pin|LED_GREEN2_Pin|SEGA_Pin|SEGB_Pin
                          |SEGC_Pin|SEGD_Pin|SEGE_Pin|SEGF_Pin
                          |SEGG_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MSEGG_Pin|EN0_Pin|EN1_Pin|EN2_Pin
 8000f54:	2200      	movs	r2, #0
 8000f56:	f647 71f0 	movw	r1, #32752	@ 0x7ff0
 8000f5a:	481a      	ldr	r0, [pc, #104]	@ (8000fc4 <MX_GPIO_Init+0xc0>)
 8000f5c:	f001 f89f 	bl	800209e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_RED1_Pin LED_YELLOW1_Pin LED_GREEN1_Pin LED_RED2_Pin
                           LED_YELLOW2_Pin LED_GREEN2_Pin SEGA_Pin SEGB_Pin
                           SEGC_Pin SEGD_Pin SEGE_Pin SEGF_Pin
                           SEGG_Pin */
  GPIO_InitStruct.Pin = LED_RED1_Pin|LED_YELLOW1_Pin|LED_GREEN1_Pin|LED_RED2_Pin
 8000f60:	f643 73fe 	movw	r3, #16382	@ 0x3ffe
 8000f64:	60bb      	str	r3, [r7, #8]
                          |LED_YELLOW2_Pin|LED_GREEN2_Pin|SEGA_Pin|SEGB_Pin
                          |SEGC_Pin|SEGD_Pin|SEGE_Pin|SEGF_Pin
                          |SEGG_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f66:	2301      	movs	r3, #1
 8000f68:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6e:	2302      	movs	r3, #2
 8000f70:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f72:	f107 0308 	add.w	r3, r7, #8
 8000f76:	4619      	mov	r1, r3
 8000f78:	4811      	ldr	r0, [pc, #68]	@ (8000fc0 <MX_GPIO_Init+0xbc>)
 8000f7a:	f000 fefd 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin|BUTTON3_Pin;
 8000f7e:	2307      	movs	r3, #7
 8000f80:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f82:	2300      	movs	r3, #0
 8000f84:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f86:	2301      	movs	r3, #1
 8000f88:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f8a:	f107 0308 	add.w	r3, r7, #8
 8000f8e:	4619      	mov	r1, r3
 8000f90:	480c      	ldr	r0, [pc, #48]	@ (8000fc4 <MX_GPIO_Init+0xc0>)
 8000f92:	f000 fef1 	bl	8001d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : MSEGG_Pin EN0_Pin EN1_Pin EN2_Pin
                           EN3_Pin MSEGA_Pin MSEGB_Pin MSEGC_Pin
                           MSEGD_Pin MSEGE_Pin MSEGF_Pin */
  GPIO_InitStruct.Pin = MSEGG_Pin|EN0_Pin|EN1_Pin|EN2_Pin
 8000f96:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8000f9a:	60bb      	str	r3, [r7, #8]
                          |EN3_Pin|MSEGA_Pin|MSEGB_Pin|MSEGC_Pin
                          |MSEGD_Pin|MSEGE_Pin|MSEGF_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fa8:	f107 0308 	add.w	r3, r7, #8
 8000fac:	4619      	mov	r1, r3
 8000fae:	4805      	ldr	r0, [pc, #20]	@ (8000fc4 <MX_GPIO_Init+0xc0>)
 8000fb0:	f000 fee2 	bl	8001d78 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fb4:	bf00      	nop
 8000fb6:	3718      	adds	r7, #24
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	40021000 	.word	0x40021000
 8000fc0:	40010800 	.word	0x40010800
 8000fc4:	40010c00 	.word	0x40010c00

08000fc8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
	timerRun();
 8000fd0:	f000 fa3a 	bl	8001448 <timerRun>
	button_reading();
 8000fd4:	f7ff f8ba 	bl	800014c <button_reading>
}
 8000fd8:	bf00      	nop
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fe4:	b672      	cpsid	i
}
 8000fe6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fe8:	bf00      	nop
 8000fea:	e7fd      	b.n	8000fe8 <Error_Handler+0x8>

08000fec <modify_red>:
 */

#include "modifyLight.h"


void modify_red(void) {
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
	if (timer1_flag == 1) {
 8000ff0:	4b29      	ldr	r3, [pc, #164]	@ (8001098 <modify_red+0xac>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d10b      	bne.n	8001010 <modify_red+0x24>
		HAL_GPIO_TogglePin(GPIOA, LED_RED1_Pin);
 8000ff8:	2102      	movs	r1, #2
 8000ffa:	4828      	ldr	r0, [pc, #160]	@ (800109c <modify_red+0xb0>)
 8000ffc:	f001 f867 	bl	80020ce <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOA, LED_RED2_Pin);
 8001000:	2110      	movs	r1, #16
 8001002:	4826      	ldr	r0, [pc, #152]	@ (800109c <modify_red+0xb0>)
 8001004:	f001 f863 	bl	80020ce <HAL_GPIO_TogglePin>
		setTimer1(500);
 8001008:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800100c:	f000 f9d2 	bl	80013b4 <setTimer1>
	}

	auto_update7SEG_red();
 8001010:	f7ff fd44 	bl	8000a9c <auto_update7SEG_red>

	if (is_button_pressed(1)) {
 8001014:	2001      	movs	r0, #1
 8001016:	f7ff f933 	bl	8000280 <is_button_pressed>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d018      	beq.n	8001052 <modify_red+0x66>
		if (temp >= 1000 && temp <= 99000) {
 8001020:	4b1f      	ldr	r3, [pc, #124]	@ (80010a0 <modify_red+0xb4>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001028:	db0a      	blt.n	8001040 <modify_red+0x54>
 800102a:	4b1d      	ldr	r3, [pc, #116]	@ (80010a0 <modify_red+0xb4>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a1d      	ldr	r2, [pc, #116]	@ (80010a4 <modify_red+0xb8>)
 8001030:	4293      	cmp	r3, r2
 8001032:	dc05      	bgt.n	8001040 <modify_red+0x54>
			temp += 1000;
 8001034:	4b1a      	ldr	r3, [pc, #104]	@ (80010a0 <modify_red+0xb4>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800103c:	4a18      	ldr	r2, [pc, #96]	@ (80010a0 <modify_red+0xb4>)
 800103e:	6013      	str	r3, [r2, #0]
		}
		if (temp > 99000) {
 8001040:	4b17      	ldr	r3, [pc, #92]	@ (80010a0 <modify_red+0xb4>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a17      	ldr	r2, [pc, #92]	@ (80010a4 <modify_red+0xb8>)
 8001046:	4293      	cmp	r3, r2
 8001048:	dd03      	ble.n	8001052 <modify_red+0x66>
			temp = 1000;
 800104a:	4b15      	ldr	r3, [pc, #84]	@ (80010a0 <modify_red+0xb4>)
 800104c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001050:	601a      	str	r2, [r3, #0]
		}
	}

	if (is_button_pressed(2)) {
 8001052:	2002      	movs	r0, #2
 8001054:	f7ff f914 	bl	8000280 <is_button_pressed>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d019      	beq.n	8001092 <modify_red+0xa6>
		if (counter_green + counter_yellow >= temp) {
 800105e:	4b12      	ldr	r3, [pc, #72]	@ (80010a8 <modify_red+0xbc>)
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	4b12      	ldr	r3, [pc, #72]	@ (80010ac <modify_red+0xc0>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	441a      	add	r2, r3
 8001068:	4b0d      	ldr	r3, [pc, #52]	@ (80010a0 <modify_red+0xb4>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	429a      	cmp	r2, r3
 800106e:	db06      	blt.n	800107e <modify_red+0x92>
			temp = counter_green + counter_yellow;
 8001070:	4b0d      	ldr	r3, [pc, #52]	@ (80010a8 <modify_red+0xbc>)
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	4b0d      	ldr	r3, [pc, #52]	@ (80010ac <modify_red+0xc0>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4413      	add	r3, r2
 800107a:	4a09      	ldr	r2, [pc, #36]	@ (80010a0 <modify_red+0xb4>)
 800107c:	6013      	str	r3, [r2, #0]
		}
		counter_red = temp;
 800107e:	4b08      	ldr	r3, [pc, #32]	@ (80010a0 <modify_red+0xb4>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a0b      	ldr	r2, [pc, #44]	@ (80010b0 <modify_red+0xc4>)
 8001084:	6013      	str	r3, [r2, #0]
		traffic = START;
 8001086:	4b0b      	ldr	r3, [pc, #44]	@ (80010b4 <modify_red+0xc8>)
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
		mode = 1;
 800108c:	4b0a      	ldr	r3, [pc, #40]	@ (80010b8 <modify_red+0xcc>)
 800108e:	2201      	movs	r2, #1
 8001090:	601a      	str	r2, [r3, #0]
	}

}
 8001092:	bf00      	nop
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	20000108 	.word	0x20000108
 800109c:	40010800 	.word	0x40010800
 80010a0:	2000011c 	.word	0x2000011c
 80010a4:	000182b8 	.word	0x000182b8
 80010a8:	20000008 	.word	0x20000008
 80010ac:	20000004 	.word	0x20000004
 80010b0:	20000000 	.word	0x20000000
 80010b4:	2000005c 	.word	0x2000005c
 80010b8:	20000034 	.word	0x20000034

080010bc <modify_yellow>:

void modify_yellow(void) {
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
	if (timer1_flag == 1) {
 80010c0:	4b29      	ldr	r3, [pc, #164]	@ (8001168 <modify_yellow+0xac>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d10b      	bne.n	80010e0 <modify_yellow+0x24>
		HAL_GPIO_TogglePin(GPIOA, LED_YELLOW1_Pin);
 80010c8:	2104      	movs	r1, #4
 80010ca:	4828      	ldr	r0, [pc, #160]	@ (800116c <modify_yellow+0xb0>)
 80010cc:	f000 ffff 	bl	80020ce <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOA, LED_YELLOW2_Pin);
 80010d0:	2120      	movs	r1, #32
 80010d2:	4826      	ldr	r0, [pc, #152]	@ (800116c <modify_yellow+0xb0>)
 80010d4:	f000 fffb 	bl	80020ce <HAL_GPIO_TogglePin>
		setTimer1(500);
 80010d8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80010dc:	f000 f96a 	bl	80013b4 <setTimer1>
	}

	auto_update7SEG_yellow();
 80010e0:	f7ff fd3c 	bl	8000b5c <auto_update7SEG_yellow>

	if (is_button_pressed(1)) {
 80010e4:	2001      	movs	r0, #1
 80010e6:	f7ff f8cb 	bl	8000280 <is_button_pressed>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d018      	beq.n	8001122 <modify_yellow+0x66>
		if (temp >= 1000 && temp <= 99000) {
 80010f0:	4b1f      	ldr	r3, [pc, #124]	@ (8001170 <modify_yellow+0xb4>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80010f8:	db0a      	blt.n	8001110 <modify_yellow+0x54>
 80010fa:	4b1d      	ldr	r3, [pc, #116]	@ (8001170 <modify_yellow+0xb4>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a1d      	ldr	r2, [pc, #116]	@ (8001174 <modify_yellow+0xb8>)
 8001100:	4293      	cmp	r3, r2
 8001102:	dc05      	bgt.n	8001110 <modify_yellow+0x54>
			temp += 1000;
 8001104:	4b1a      	ldr	r3, [pc, #104]	@ (8001170 <modify_yellow+0xb4>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800110c:	4a18      	ldr	r2, [pc, #96]	@ (8001170 <modify_yellow+0xb4>)
 800110e:	6013      	str	r3, [r2, #0]
		}
		if (temp > 99000) {
 8001110:	4b17      	ldr	r3, [pc, #92]	@ (8001170 <modify_yellow+0xb4>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a17      	ldr	r2, [pc, #92]	@ (8001174 <modify_yellow+0xb8>)
 8001116:	4293      	cmp	r3, r2
 8001118:	dd03      	ble.n	8001122 <modify_yellow+0x66>
			temp = 1000;
 800111a:	4b15      	ldr	r3, [pc, #84]	@ (8001170 <modify_yellow+0xb4>)
 800111c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001120:	601a      	str	r2, [r3, #0]
		}
	}

	if (is_button_pressed(2)) {
 8001122:	2002      	movs	r0, #2
 8001124:	f7ff f8ac 	bl	8000280 <is_button_pressed>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d019      	beq.n	8001162 <modify_yellow+0xa6>
		if (counter_green + temp >= counter_red) {
 800112e:	4b12      	ldr	r3, [pc, #72]	@ (8001178 <modify_yellow+0xbc>)
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	4b0f      	ldr	r3, [pc, #60]	@ (8001170 <modify_yellow+0xb4>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	441a      	add	r2, r3
 8001138:	4b10      	ldr	r3, [pc, #64]	@ (800117c <modify_yellow+0xc0>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	429a      	cmp	r2, r3
 800113e:	db06      	blt.n	800114e <modify_yellow+0x92>
			temp = counter_red - counter_green;
 8001140:	4b0e      	ldr	r3, [pc, #56]	@ (800117c <modify_yellow+0xc0>)
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	4b0c      	ldr	r3, [pc, #48]	@ (8001178 <modify_yellow+0xbc>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	4a09      	ldr	r2, [pc, #36]	@ (8001170 <modify_yellow+0xb4>)
 800114c:	6013      	str	r3, [r2, #0]
		}
		counter_yellow = temp;
 800114e:	4b08      	ldr	r3, [pc, #32]	@ (8001170 <modify_yellow+0xb4>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a0b      	ldr	r2, [pc, #44]	@ (8001180 <modify_yellow+0xc4>)
 8001154:	6013      	str	r3, [r2, #0]
		traffic = START;
 8001156:	4b0b      	ldr	r3, [pc, #44]	@ (8001184 <modify_yellow+0xc8>)
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
		mode = 1;
 800115c:	4b0a      	ldr	r3, [pc, #40]	@ (8001188 <modify_yellow+0xcc>)
 800115e:	2201      	movs	r2, #1
 8001160:	601a      	str	r2, [r3, #0]
	}

}
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	20000108 	.word	0x20000108
 800116c:	40010800 	.word	0x40010800
 8001170:	2000011c 	.word	0x2000011c
 8001174:	000182b8 	.word	0x000182b8
 8001178:	20000008 	.word	0x20000008
 800117c:	20000000 	.word	0x20000000
 8001180:	20000004 	.word	0x20000004
 8001184:	2000005c 	.word	0x2000005c
 8001188:	20000034 	.word	0x20000034

0800118c <modify_green>:

void modify_green(void) {
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
	if (timer1_flag == 1) {
 8001190:	4b29      	ldr	r3, [pc, #164]	@ (8001238 <modify_green+0xac>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	2b01      	cmp	r3, #1
 8001196:	d10b      	bne.n	80011b0 <modify_green+0x24>
		HAL_GPIO_TogglePin(GPIOA, LED_GREEN1_Pin);
 8001198:	2108      	movs	r1, #8
 800119a:	4828      	ldr	r0, [pc, #160]	@ (800123c <modify_green+0xb0>)
 800119c:	f000 ff97 	bl	80020ce <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOA, LED_GREEN2_Pin);
 80011a0:	2140      	movs	r1, #64	@ 0x40
 80011a2:	4826      	ldr	r0, [pc, #152]	@ (800123c <modify_green+0xb0>)
 80011a4:	f000 ff93 	bl	80020ce <HAL_GPIO_TogglePin>
		setTimer1(500);
 80011a8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80011ac:	f000 f902 	bl	80013b4 <setTimer1>
	}

	auto_update7SEG_green();
 80011b0:	f7ff fd34 	bl	8000c1c <auto_update7SEG_green>

	if (is_button_pressed(1)) {
 80011b4:	2001      	movs	r0, #1
 80011b6:	f7ff f863 	bl	8000280 <is_button_pressed>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d018      	beq.n	80011f2 <modify_green+0x66>
		if (temp >= 1000 && temp <= 99000) {
 80011c0:	4b1f      	ldr	r3, [pc, #124]	@ (8001240 <modify_green+0xb4>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80011c8:	db0a      	blt.n	80011e0 <modify_green+0x54>
 80011ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001240 <modify_green+0xb4>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a1d      	ldr	r2, [pc, #116]	@ (8001244 <modify_green+0xb8>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	dc05      	bgt.n	80011e0 <modify_green+0x54>
			temp += 1000;
 80011d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001240 <modify_green+0xb4>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80011dc:	4a18      	ldr	r2, [pc, #96]	@ (8001240 <modify_green+0xb4>)
 80011de:	6013      	str	r3, [r2, #0]
		}
		if (temp > 99000) {
 80011e0:	4b17      	ldr	r3, [pc, #92]	@ (8001240 <modify_green+0xb4>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a17      	ldr	r2, [pc, #92]	@ (8001244 <modify_green+0xb8>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	dd03      	ble.n	80011f2 <modify_green+0x66>
			temp = 1000;
 80011ea:	4b15      	ldr	r3, [pc, #84]	@ (8001240 <modify_green+0xb4>)
 80011ec:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80011f0:	601a      	str	r2, [r3, #0]
		}
	}

	if (is_button_pressed(2)) {
 80011f2:	2002      	movs	r0, #2
 80011f4:	f7ff f844 	bl	8000280 <is_button_pressed>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d019      	beq.n	8001232 <modify_green+0xa6>
		if (temp + counter_yellow >= counter_red) {
 80011fe:	4b10      	ldr	r3, [pc, #64]	@ (8001240 <modify_green+0xb4>)
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	4b11      	ldr	r3, [pc, #68]	@ (8001248 <modify_green+0xbc>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	441a      	add	r2, r3
 8001208:	4b10      	ldr	r3, [pc, #64]	@ (800124c <modify_green+0xc0>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	429a      	cmp	r2, r3
 800120e:	db06      	blt.n	800121e <modify_green+0x92>
			temp = counter_red - counter_yellow;
 8001210:	4b0e      	ldr	r3, [pc, #56]	@ (800124c <modify_green+0xc0>)
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	4b0c      	ldr	r3, [pc, #48]	@ (8001248 <modify_green+0xbc>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	4a09      	ldr	r2, [pc, #36]	@ (8001240 <modify_green+0xb4>)
 800121c:	6013      	str	r3, [r2, #0]
		}
		counter_green = temp;
 800121e:	4b08      	ldr	r3, [pc, #32]	@ (8001240 <modify_green+0xb4>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a0b      	ldr	r2, [pc, #44]	@ (8001250 <modify_green+0xc4>)
 8001224:	6013      	str	r3, [r2, #0]
		traffic = START;
 8001226:	4b0b      	ldr	r3, [pc, #44]	@ (8001254 <modify_green+0xc8>)
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
		mode = 1;
 800122c:	4b0a      	ldr	r3, [pc, #40]	@ (8001258 <modify_green+0xcc>)
 800122e:	2201      	movs	r2, #1
 8001230:	601a      	str	r2, [r3, #0]
	}

}
 8001232:	bf00      	nop
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	20000108 	.word	0x20000108
 800123c:	40010800 	.word	0x40010800
 8001240:	2000011c 	.word	0x2000011c
 8001244:	000182b8 	.word	0x000182b8
 8001248:	20000004 	.word	0x20000004
 800124c:	20000000 	.word	0x20000000
 8001250:	20000008 	.word	0x20000008
 8001254:	2000005c 	.word	0x2000005c
 8001258:	20000034 	.word	0x20000034

0800125c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800125c:	b480      	push	{r7}
 800125e:	b085      	sub	sp, #20
 8001260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001262:	4b15      	ldr	r3, [pc, #84]	@ (80012b8 <HAL_MspInit+0x5c>)
 8001264:	699b      	ldr	r3, [r3, #24]
 8001266:	4a14      	ldr	r2, [pc, #80]	@ (80012b8 <HAL_MspInit+0x5c>)
 8001268:	f043 0301 	orr.w	r3, r3, #1
 800126c:	6193      	str	r3, [r2, #24]
 800126e:	4b12      	ldr	r3, [pc, #72]	@ (80012b8 <HAL_MspInit+0x5c>)
 8001270:	699b      	ldr	r3, [r3, #24]
 8001272:	f003 0301 	and.w	r3, r3, #1
 8001276:	60bb      	str	r3, [r7, #8]
 8001278:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800127a:	4b0f      	ldr	r3, [pc, #60]	@ (80012b8 <HAL_MspInit+0x5c>)
 800127c:	69db      	ldr	r3, [r3, #28]
 800127e:	4a0e      	ldr	r2, [pc, #56]	@ (80012b8 <HAL_MspInit+0x5c>)
 8001280:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001284:	61d3      	str	r3, [r2, #28]
 8001286:	4b0c      	ldr	r3, [pc, #48]	@ (80012b8 <HAL_MspInit+0x5c>)
 8001288:	69db      	ldr	r3, [r3, #28]
 800128a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800128e:	607b      	str	r3, [r7, #4]
 8001290:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001292:	4b0a      	ldr	r3, [pc, #40]	@ (80012bc <HAL_MspInit+0x60>)
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	60fb      	str	r3, [r7, #12]
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800129e:	60fb      	str	r3, [r7, #12]
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	4a04      	ldr	r2, [pc, #16]	@ (80012bc <HAL_MspInit+0x60>)
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ae:	bf00      	nop
 80012b0:	3714      	adds	r7, #20
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bc80      	pop	{r7}
 80012b6:	4770      	bx	lr
 80012b8:	40021000 	.word	0x40021000
 80012bc:	40010000 	.word	0x40010000

080012c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80012d0:	d113      	bne.n	80012fa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001304 <HAL_TIM_Base_MspInit+0x44>)
 80012d4:	69db      	ldr	r3, [r3, #28]
 80012d6:	4a0b      	ldr	r2, [pc, #44]	@ (8001304 <HAL_TIM_Base_MspInit+0x44>)
 80012d8:	f043 0301 	orr.w	r3, r3, #1
 80012dc:	61d3      	str	r3, [r2, #28]
 80012de:	4b09      	ldr	r3, [pc, #36]	@ (8001304 <HAL_TIM_Base_MspInit+0x44>)
 80012e0:	69db      	ldr	r3, [r3, #28]
 80012e2:	f003 0301 	and.w	r3, r3, #1
 80012e6:	60fb      	str	r3, [r7, #12]
 80012e8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80012ea:	2200      	movs	r2, #0
 80012ec:	2100      	movs	r1, #0
 80012ee:	201c      	movs	r0, #28
 80012f0:	f000 fd0b 	bl	8001d0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80012f4:	201c      	movs	r0, #28
 80012f6:	f000 fd24 	bl	8001d42 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80012fa:	bf00      	nop
 80012fc:	3710      	adds	r7, #16
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	40021000 	.word	0x40021000

08001308 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800130c:	bf00      	nop
 800130e:	e7fd      	b.n	800130c <NMI_Handler+0x4>

08001310 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001314:	bf00      	nop
 8001316:	e7fd      	b.n	8001314 <HardFault_Handler+0x4>

08001318 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800131c:	bf00      	nop
 800131e:	e7fd      	b.n	800131c <MemManage_Handler+0x4>

08001320 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001324:	bf00      	nop
 8001326:	e7fd      	b.n	8001324 <BusFault_Handler+0x4>

08001328 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800132c:	bf00      	nop
 800132e:	e7fd      	b.n	800132c <UsageFault_Handler+0x4>

08001330 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001334:	bf00      	nop
 8001336:	46bd      	mov	sp, r7
 8001338:	bc80      	pop	{r7}
 800133a:	4770      	bx	lr

0800133c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001340:	bf00      	nop
 8001342:	46bd      	mov	sp, r7
 8001344:	bc80      	pop	{r7}
 8001346:	4770      	bx	lr

08001348 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800134c:	bf00      	nop
 800134e:	46bd      	mov	sp, r7
 8001350:	bc80      	pop	{r7}
 8001352:	4770      	bx	lr

08001354 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001358:	f000 fbe4 	bl	8001b24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800135c:	bf00      	nop
 800135e:	bd80      	pop	{r7, pc}

08001360 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001364:	4802      	ldr	r0, [pc, #8]	@ (8001370 <TIM2_IRQHandler+0x10>)
 8001366:	f001 fb45 	bl	80029f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800136a:	bf00      	nop
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	200000b4 	.word	0x200000b4

08001374 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001378:	bf00      	nop
 800137a:	46bd      	mov	sp, r7
 800137c:	bc80      	pop	{r7}
 800137e:	4770      	bx	lr

08001380 <setTimer0>:
#include "timer.h"
int TIMER_CYCLE = 10;

int timer0_counter = 0;
int timer0_flag = 0;
void setTimer0(int duration){
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
	timer0_counter = duration / TIMER_CYCLE ;
 8001388:	4b07      	ldr	r3, [pc, #28]	@ (80013a8 <setTimer0+0x28>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	687a      	ldr	r2, [r7, #4]
 800138e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001392:	4a06      	ldr	r2, [pc, #24]	@ (80013ac <setTimer0+0x2c>)
 8001394:	6013      	str	r3, [r2, #0]
	timer0_flag = 0;
 8001396:	4b06      	ldr	r3, [pc, #24]	@ (80013b0 <setTimer0+0x30>)
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
}
 800139c:	bf00      	nop
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bc80      	pop	{r7}
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	20000030 	.word	0x20000030
 80013ac:	200000fc 	.word	0x200000fc
 80013b0:	20000100 	.word	0x20000100

080013b4 <setTimer1>:

int timer1_counter = 0;
int timer1_flag = 0;
void setTimer1(int duration) {
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
	timer1_counter = duration / TIMER_CYCLE;
 80013bc:	4b07      	ldr	r3, [pc, #28]	@ (80013dc <setTimer1+0x28>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	687a      	ldr	r2, [r7, #4]
 80013c2:	fb92 f3f3 	sdiv	r3, r2, r3
 80013c6:	4a06      	ldr	r2, [pc, #24]	@ (80013e0 <setTimer1+0x2c>)
 80013c8:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 80013ca:	4b06      	ldr	r3, [pc, #24]	@ (80013e4 <setTimer1+0x30>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
}
 80013d0:	bf00      	nop
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bc80      	pop	{r7}
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	20000030 	.word	0x20000030
 80013e0:	20000104 	.word	0x20000104
 80013e4:	20000108 	.word	0x20000108

080013e8 <setTimer2>:

int timer2_counter = 0;
int timer2_flag = 0;
void setTimer2(int duration) {
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
	timer2_counter = duration / TIMER_CYCLE;
 80013f0:	4b07      	ldr	r3, [pc, #28]	@ (8001410 <setTimer2+0x28>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	687a      	ldr	r2, [r7, #4]
 80013f6:	fb92 f3f3 	sdiv	r3, r2, r3
 80013fa:	4a06      	ldr	r2, [pc, #24]	@ (8001414 <setTimer2+0x2c>)
 80013fc:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 80013fe:	4b06      	ldr	r3, [pc, #24]	@ (8001418 <setTimer2+0x30>)
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
}
 8001404:	bf00      	nop
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	bc80      	pop	{r7}
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	20000030 	.word	0x20000030
 8001414:	2000010c 	.word	0x2000010c
 8001418:	20000110 	.word	0x20000110

0800141c <setTimer7Led>:



int timer7_counter = 0;
int timer7_flag = 0;
void setTimer7Led() {
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
	timer7_counter = 250 / TIMER_CYCLE;
 8001420:	4b06      	ldr	r3, [pc, #24]	@ (800143c <setTimer7Led+0x20>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	22fa      	movs	r2, #250	@ 0xfa
 8001426:	fb92 f3f3 	sdiv	r3, r2, r3
 800142a:	4a05      	ldr	r2, [pc, #20]	@ (8001440 <setTimer7Led+0x24>)
 800142c:	6013      	str	r3, [r2, #0]
	timer7_flag = 0;
 800142e:	4b05      	ldr	r3, [pc, #20]	@ (8001444 <setTimer7Led+0x28>)
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
}
 8001434:	bf00      	nop
 8001436:	46bd      	mov	sp, r7
 8001438:	bc80      	pop	{r7}
 800143a:	4770      	bx	lr
 800143c:	20000030 	.word	0x20000030
 8001440:	20000114 	.word	0x20000114
 8001444:	20000118 	.word	0x20000118

08001448 <timerRun>:

void timerRun(){
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
	if(timer0_counter > 0){
 800144c:	4b26      	ldr	r3, [pc, #152]	@ (80014e8 <timerRun+0xa0>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2b00      	cmp	r3, #0
 8001452:	dd0b      	ble.n	800146c <timerRun+0x24>
		timer0_counter--;
 8001454:	4b24      	ldr	r3, [pc, #144]	@ (80014e8 <timerRun+0xa0>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	3b01      	subs	r3, #1
 800145a:	4a23      	ldr	r2, [pc, #140]	@ (80014e8 <timerRun+0xa0>)
 800145c:	6013      	str	r3, [r2, #0]
		if(timer0_counter <= 0) timer0_flag = 1;
 800145e:	4b22      	ldr	r3, [pc, #136]	@ (80014e8 <timerRun+0xa0>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	2b00      	cmp	r3, #0
 8001464:	dc02      	bgt.n	800146c <timerRun+0x24>
 8001466:	4b21      	ldr	r3, [pc, #132]	@ (80014ec <timerRun+0xa4>)
 8001468:	2201      	movs	r2, #1
 800146a:	601a      	str	r2, [r3, #0]
	}

	if(timer1_counter > 0){
 800146c:	4b20      	ldr	r3, [pc, #128]	@ (80014f0 <timerRun+0xa8>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	2b00      	cmp	r3, #0
 8001472:	dd0b      	ble.n	800148c <timerRun+0x44>
		timer1_counter--;
 8001474:	4b1e      	ldr	r3, [pc, #120]	@ (80014f0 <timerRun+0xa8>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	3b01      	subs	r3, #1
 800147a:	4a1d      	ldr	r2, [pc, #116]	@ (80014f0 <timerRun+0xa8>)
 800147c:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0) timer1_flag = 1;
 800147e:	4b1c      	ldr	r3, [pc, #112]	@ (80014f0 <timerRun+0xa8>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	2b00      	cmp	r3, #0
 8001484:	dc02      	bgt.n	800148c <timerRun+0x44>
 8001486:	4b1b      	ldr	r3, [pc, #108]	@ (80014f4 <timerRun+0xac>)
 8001488:	2201      	movs	r2, #1
 800148a:	601a      	str	r2, [r3, #0]
	}

	if(timer2_counter > 0){
 800148c:	4b1a      	ldr	r3, [pc, #104]	@ (80014f8 <timerRun+0xb0>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2b00      	cmp	r3, #0
 8001492:	dd0b      	ble.n	80014ac <timerRun+0x64>
		timer2_counter--;
 8001494:	4b18      	ldr	r3, [pc, #96]	@ (80014f8 <timerRun+0xb0>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	3b01      	subs	r3, #1
 800149a:	4a17      	ldr	r2, [pc, #92]	@ (80014f8 <timerRun+0xb0>)
 800149c:	6013      	str	r3, [r2, #0]
		if(timer2_counter <= 0) timer2_flag = 1;
 800149e:	4b16      	ldr	r3, [pc, #88]	@ (80014f8 <timerRun+0xb0>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	dc02      	bgt.n	80014ac <timerRun+0x64>
 80014a6:	4b15      	ldr	r3, [pc, #84]	@ (80014fc <timerRun+0xb4>)
 80014a8:	2201      	movs	r2, #1
 80014aa:	601a      	str	r2, [r3, #0]
	}

	if(timer7_counter > 0){
 80014ac:	4b14      	ldr	r3, [pc, #80]	@ (8001500 <timerRun+0xb8>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	dd0b      	ble.n	80014cc <timerRun+0x84>
		timer7_counter--;
 80014b4:	4b12      	ldr	r3, [pc, #72]	@ (8001500 <timerRun+0xb8>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	3b01      	subs	r3, #1
 80014ba:	4a11      	ldr	r2, [pc, #68]	@ (8001500 <timerRun+0xb8>)
 80014bc:	6013      	str	r3, [r2, #0]
		if(timer7_counter <= 0) timer7_flag = 1;
 80014be:	4b10      	ldr	r3, [pc, #64]	@ (8001500 <timerRun+0xb8>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	dc02      	bgt.n	80014cc <timerRun+0x84>
 80014c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001504 <timerRun+0xbc>)
 80014c8:	2201      	movs	r2, #1
 80014ca:	601a      	str	r2, [r3, #0]
	}

	counter0--;
 80014cc:	4b0e      	ldr	r3, [pc, #56]	@ (8001508 <timerRun+0xc0>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	3b01      	subs	r3, #1
 80014d2:	4a0d      	ldr	r2, [pc, #52]	@ (8001508 <timerRun+0xc0>)
 80014d4:	6013      	str	r3, [r2, #0]
	counter1--;
 80014d6:	4b0d      	ldr	r3, [pc, #52]	@ (800150c <timerRun+0xc4>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	3b01      	subs	r3, #1
 80014dc:	4a0b      	ldr	r2, [pc, #44]	@ (800150c <timerRun+0xc4>)
 80014de:	6013      	str	r3, [r2, #0]
}
 80014e0:	bf00      	nop
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bc80      	pop	{r7}
 80014e6:	4770      	bx	lr
 80014e8:	200000fc 	.word	0x200000fc
 80014ec:	20000100 	.word	0x20000100
 80014f0:	20000104 	.word	0x20000104
 80014f4:	20000108 	.word	0x20000108
 80014f8:	2000010c 	.word	0x2000010c
 80014fc:	20000110 	.word	0x20000110
 8001500:	20000114 	.word	0x20000114
 8001504:	20000118 	.word	0x20000118
 8001508:	20000120 	.word	0x20000120
 800150c:	20000124 	.word	0x20000124

08001510 <fsm_mode>:

#include "traffic.h"

int mode = 1;
int temp = 0;
void fsm_mode(void) {
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
	if (is_button_pressed(0)) {
 8001514:	2000      	movs	r0, #0
 8001516:	f7fe feb3 	bl	8000280 <is_button_pressed>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d03a      	beq.n	8001596 <fsm_mode+0x86>
		HAL_GPIO_WritePin(GPIOA, LED_RED1_Pin, RESET);
 8001520:	2200      	movs	r2, #0
 8001522:	2102      	movs	r1, #2
 8001524:	4848      	ldr	r0, [pc, #288]	@ (8001648 <fsm_mode+0x138>)
 8001526:	f000 fdba 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_RED2_Pin, RESET);
 800152a:	2200      	movs	r2, #0
 800152c:	2110      	movs	r1, #16
 800152e:	4846      	ldr	r0, [pc, #280]	@ (8001648 <fsm_mode+0x138>)
 8001530:	f000 fdb5 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_YELLOW1_Pin, RESET);
 8001534:	2200      	movs	r2, #0
 8001536:	2104      	movs	r1, #4
 8001538:	4843      	ldr	r0, [pc, #268]	@ (8001648 <fsm_mode+0x138>)
 800153a:	f000 fdb0 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_YELLOW2_Pin, RESET);
 800153e:	2200      	movs	r2, #0
 8001540:	2120      	movs	r1, #32
 8001542:	4841      	ldr	r0, [pc, #260]	@ (8001648 <fsm_mode+0x138>)
 8001544:	f000 fdab 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_GREEN1_Pin, RESET);
 8001548:	2200      	movs	r2, #0
 800154a:	2108      	movs	r1, #8
 800154c:	483e      	ldr	r0, [pc, #248]	@ (8001648 <fsm_mode+0x138>)
 800154e:	f000 fda6 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_GREEN2_Pin, RESET);
 8001552:	2200      	movs	r2, #0
 8001554:	2140      	movs	r1, #64	@ 0x40
 8001556:	483c      	ldr	r0, [pc, #240]	@ (8001648 <fsm_mode+0x138>)
 8001558:	f000 fda1 	bl	800209e <HAL_GPIO_WritePin>
		if (mode >=1 && mode <= 4) {
 800155c:	4b3b      	ldr	r3, [pc, #236]	@ (800164c <fsm_mode+0x13c>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2b00      	cmp	r3, #0
 8001562:	dd08      	ble.n	8001576 <fsm_mode+0x66>
 8001564:	4b39      	ldr	r3, [pc, #228]	@ (800164c <fsm_mode+0x13c>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2b04      	cmp	r3, #4
 800156a:	dc04      	bgt.n	8001576 <fsm_mode+0x66>
			mode++;
 800156c:	4b37      	ldr	r3, [pc, #220]	@ (800164c <fsm_mode+0x13c>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	3301      	adds	r3, #1
 8001572:	4a36      	ldr	r2, [pc, #216]	@ (800164c <fsm_mode+0x13c>)
 8001574:	6013      	str	r3, [r2, #0]
		}
		if (mode > 4) {
 8001576:	4b35      	ldr	r3, [pc, #212]	@ (800164c <fsm_mode+0x13c>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2b04      	cmp	r3, #4
 800157c:	dd05      	ble.n	800158a <fsm_mode+0x7a>
			mode = 1;
 800157e:	4b33      	ldr	r3, [pc, #204]	@ (800164c <fsm_mode+0x13c>)
 8001580:	2201      	movs	r2, #1
 8001582:	601a      	str	r2, [r3, #0]
			traffic = START;
 8001584:	4b32      	ldr	r3, [pc, #200]	@ (8001650 <fsm_mode+0x140>)
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]
		}
		setTimer1(10);
 800158a:	200a      	movs	r0, #10
 800158c:	f7ff ff12 	bl	80013b4 <setTimer1>
		temp = 0;
 8001590:	4b30      	ldr	r3, [pc, #192]	@ (8001654 <fsm_mode+0x144>)
 8001592:	2200      	movs	r2, #0
 8001594:	601a      	str	r2, [r3, #0]
	}
	switch (mode) {
 8001596:	4b2d      	ldr	r3, [pc, #180]	@ (800164c <fsm_mode+0x13c>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	3b01      	subs	r3, #1
 800159c:	2b03      	cmp	r3, #3
 800159e:	d84a      	bhi.n	8001636 <fsm_mode+0x126>
 80015a0:	a201      	add	r2, pc, #4	@ (adr r2, 80015a8 <fsm_mode+0x98>)
 80015a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015a6:	bf00      	nop
 80015a8:	080015b9 	.word	0x080015b9
 80015ac:	080015bf 	.word	0x080015bf
 80015b0:	080015e7 	.word	0x080015e7
 80015b4:	0800160f 	.word	0x0800160f
	case 1:
		fsm_traffic_light();
 80015b8:	f000 f854 	bl	8001664 <fsm_traffic_light>
		break;
 80015bc:	e042      	b.n	8001644 <fsm_mode+0x134>

	case 2:

		if (temp == 0) temp = counter_red;
 80015be:	4b25      	ldr	r3, [pc, #148]	@ (8001654 <fsm_mode+0x144>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d103      	bne.n	80015ce <fsm_mode+0xbe>
 80015c6:	4b24      	ldr	r3, [pc, #144]	@ (8001658 <fsm_mode+0x148>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a22      	ldr	r2, [pc, #136]	@ (8001654 <fsm_mode+0x144>)
 80015cc:	6013      	str	r3, [r2, #0]

		modify_red();
 80015ce:	f7ff fd0d 	bl	8000fec <modify_red>
		if (counter_red == temp) temp = 0;
 80015d2:	4b21      	ldr	r3, [pc, #132]	@ (8001658 <fsm_mode+0x148>)
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	4b1f      	ldr	r3, [pc, #124]	@ (8001654 <fsm_mode+0x144>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	429a      	cmp	r2, r3
 80015dc:	d12d      	bne.n	800163a <fsm_mode+0x12a>
 80015de:	4b1d      	ldr	r3, [pc, #116]	@ (8001654 <fsm_mode+0x144>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
		break;
 80015e4:	e029      	b.n	800163a <fsm_mode+0x12a>

	case 3:
		if (temp == 0) temp = counter_yellow;
 80015e6:	4b1b      	ldr	r3, [pc, #108]	@ (8001654 <fsm_mode+0x144>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d103      	bne.n	80015f6 <fsm_mode+0xe6>
 80015ee:	4b1b      	ldr	r3, [pc, #108]	@ (800165c <fsm_mode+0x14c>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a18      	ldr	r2, [pc, #96]	@ (8001654 <fsm_mode+0x144>)
 80015f4:	6013      	str	r3, [r2, #0]
		modify_yellow();
 80015f6:	f7ff fd61 	bl	80010bc <modify_yellow>
		if (counter_yellow == temp) temp = 0;
 80015fa:	4b18      	ldr	r3, [pc, #96]	@ (800165c <fsm_mode+0x14c>)
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	4b15      	ldr	r3, [pc, #84]	@ (8001654 <fsm_mode+0x144>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	429a      	cmp	r2, r3
 8001604:	d11b      	bne.n	800163e <fsm_mode+0x12e>
 8001606:	4b13      	ldr	r3, [pc, #76]	@ (8001654 <fsm_mode+0x144>)
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
		break;
 800160c:	e017      	b.n	800163e <fsm_mode+0x12e>

	case 4:
		if (temp == 0) temp = counter_green;
 800160e:	4b11      	ldr	r3, [pc, #68]	@ (8001654 <fsm_mode+0x144>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d103      	bne.n	800161e <fsm_mode+0x10e>
 8001616:	4b12      	ldr	r3, [pc, #72]	@ (8001660 <fsm_mode+0x150>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a0e      	ldr	r2, [pc, #56]	@ (8001654 <fsm_mode+0x144>)
 800161c:	6013      	str	r3, [r2, #0]
		modify_green();
 800161e:	f7ff fdb5 	bl	800118c <modify_green>
		if (counter_green == temp) temp = 0;
 8001622:	4b0f      	ldr	r3, [pc, #60]	@ (8001660 <fsm_mode+0x150>)
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	4b0b      	ldr	r3, [pc, #44]	@ (8001654 <fsm_mode+0x144>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	429a      	cmp	r2, r3
 800162c:	d109      	bne.n	8001642 <fsm_mode+0x132>
 800162e:	4b09      	ldr	r3, [pc, #36]	@ (8001654 <fsm_mode+0x144>)
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
		break;
 8001634:	e005      	b.n	8001642 <fsm_mode+0x132>

	default:
		break;
 8001636:	bf00      	nop
 8001638:	e004      	b.n	8001644 <fsm_mode+0x134>
		break;
 800163a:	bf00      	nop
 800163c:	e002      	b.n	8001644 <fsm_mode+0x134>
		break;
 800163e:	bf00      	nop
 8001640:	e000      	b.n	8001644 <fsm_mode+0x134>
		break;
 8001642:	bf00      	nop
	}
}
 8001644:	bf00      	nop
 8001646:	bd80      	pop	{r7, pc}
 8001648:	40010800 	.word	0x40010800
 800164c:	20000034 	.word	0x20000034
 8001650:	2000005c 	.word	0x2000005c
 8001654:	2000011c 	.word	0x2000011c
 8001658:	20000000 	.word	0x20000000
 800165c:	20000004 	.word	0x20000004
 8001660:	20000008 	.word	0x20000008

08001664 <fsm_traffic_light>:


int counter0 = 0;
int counter1 = 0;
void fsm_traffic_light(void) {
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0

	switch (traffic) {
 8001668:	4ba6      	ldr	r3, [pc, #664]	@ (8001904 <fsm_traffic_light+0x2a0>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2b1f      	cmp	r3, #31
 800166e:	dc49      	bgt.n	8001704 <fsm_traffic_light+0xa0>
 8001670:	2b00      	cmp	r3, #0
 8001672:	f2c0 81c9 	blt.w	8001a08 <fsm_traffic_light+0x3a4>
 8001676:	2b1f      	cmp	r3, #31
 8001678:	f200 81c6 	bhi.w	8001a08 <fsm_traffic_light+0x3a4>
 800167c:	a201      	add	r2, pc, #4	@ (adr r2, 8001684 <fsm_traffic_light+0x20>)
 800167e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001682:	bf00      	nop
 8001684:	0800170d 	.word	0x0800170d
 8001688:	08001a09 	.word	0x08001a09
 800168c:	08001a09 	.word	0x08001a09
 8001690:	08001a09 	.word	0x08001a09
 8001694:	08001a09 	.word	0x08001a09
 8001698:	08001a09 	.word	0x08001a09
 800169c:	08001a09 	.word	0x08001a09
 80016a0:	08001a09 	.word	0x08001a09
 80016a4:	08001a09 	.word	0x08001a09
 80016a8:	08001a09 	.word	0x08001a09
 80016ac:	08001a09 	.word	0x08001a09
 80016b0:	08001873 	.word	0x08001873
 80016b4:	080017d7 	.word	0x080017d7
 80016b8:	08001789 	.word	0x08001789
 80016bc:	08001a09 	.word	0x08001a09
 80016c0:	08001a09 	.word	0x08001a09
 80016c4:	08001a09 	.word	0x08001a09
 80016c8:	08001a09 	.word	0x08001a09
 80016cc:	08001a09 	.word	0x08001a09
 80016d0:	08001a09 	.word	0x08001a09
 80016d4:	08001a09 	.word	0x08001a09
 80016d8:	0800192d 	.word	0x0800192d
 80016dc:	08001a09 	.word	0x08001a09
 80016e0:	08001a09 	.word	0x08001a09
 80016e4:	08001a09 	.word	0x08001a09
 80016e8:	08001a09 	.word	0x08001a09
 80016ec:	08001a09 	.word	0x08001a09
 80016f0:	08001a09 	.word	0x08001a09
 80016f4:	08001a09 	.word	0x08001a09
 80016f8:	08001a09 	.word	0x08001a09
 80016fc:	08001a09 	.word	0x08001a09
 8001700:	080018b7 	.word	0x080018b7
 8001704:	2b65      	cmp	r3, #101	@ 0x65
 8001706:	f000 815e 	beq.w	80019c6 <fsm_traffic_light+0x362>
			counter1 = counter_green /TIMER_CYCLE;
		}
		break;

	default:
		break;
 800170a:	e17d      	b.n	8001a08 <fsm_traffic_light+0x3a4>
		HAL_GPIO_WritePin(GPIOA, LED_RED1_Pin, RESET);
 800170c:	2200      	movs	r2, #0
 800170e:	2102      	movs	r1, #2
 8001710:	487d      	ldr	r0, [pc, #500]	@ (8001908 <fsm_traffic_light+0x2a4>)
 8001712:	f000 fcc4 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_RED2_Pin, RESET);
 8001716:	2200      	movs	r2, #0
 8001718:	2110      	movs	r1, #16
 800171a:	487b      	ldr	r0, [pc, #492]	@ (8001908 <fsm_traffic_light+0x2a4>)
 800171c:	f000 fcbf 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_YELLOW1_Pin, RESET);
 8001720:	2200      	movs	r2, #0
 8001722:	2104      	movs	r1, #4
 8001724:	4878      	ldr	r0, [pc, #480]	@ (8001908 <fsm_traffic_light+0x2a4>)
 8001726:	f000 fcba 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_YELLOW2_Pin, RESET);
 800172a:	2200      	movs	r2, #0
 800172c:	2120      	movs	r1, #32
 800172e:	4876      	ldr	r0, [pc, #472]	@ (8001908 <fsm_traffic_light+0x2a4>)
 8001730:	f000 fcb5 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_GREEN1_Pin, RESET);
 8001734:	2200      	movs	r2, #0
 8001736:	2108      	movs	r1, #8
 8001738:	4873      	ldr	r0, [pc, #460]	@ (8001908 <fsm_traffic_light+0x2a4>)
 800173a:	f000 fcb0 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_GREEN2_Pin, RESET);
 800173e:	2200      	movs	r2, #0
 8001740:	2140      	movs	r1, #64	@ 0x40
 8001742:	4871      	ldr	r0, [pc, #452]	@ (8001908 <fsm_traffic_light+0x2a4>)
 8001744:	f000 fcab 	bl	800209e <HAL_GPIO_WritePin>
		setTimer0(counter_red);
 8001748:	4b70      	ldr	r3, [pc, #448]	@ (800190c <fsm_traffic_light+0x2a8>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4618      	mov	r0, r3
 800174e:	f7ff fe17 	bl	8001380 <setTimer0>
		setTimer2(counter_green);
 8001752:	4b6f      	ldr	r3, [pc, #444]	@ (8001910 <fsm_traffic_light+0x2ac>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4618      	mov	r0, r3
 8001758:	f7ff fe46 	bl	80013e8 <setTimer2>
		setTimer7Led();
 800175c:	f7ff fe5e 	bl	800141c <setTimer7Led>
		traffic = RED_GREEN;
 8001760:	4b68      	ldr	r3, [pc, #416]	@ (8001904 <fsm_traffic_light+0x2a0>)
 8001762:	220d      	movs	r2, #13
 8001764:	601a      	str	r2, [r3, #0]
		counter0 = counter_red / TIMER_CYCLE;
 8001766:	4b69      	ldr	r3, [pc, #420]	@ (800190c <fsm_traffic_light+0x2a8>)
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	4b6a      	ldr	r3, [pc, #424]	@ (8001914 <fsm_traffic_light+0x2b0>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001772:	4a69      	ldr	r2, [pc, #420]	@ (8001918 <fsm_traffic_light+0x2b4>)
 8001774:	6013      	str	r3, [r2, #0]
		counter1 = counter_green / TIMER_CYCLE;
 8001776:	4b66      	ldr	r3, [pc, #408]	@ (8001910 <fsm_traffic_light+0x2ac>)
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	4b66      	ldr	r3, [pc, #408]	@ (8001914 <fsm_traffic_light+0x2b0>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001782:	4a66      	ldr	r2, [pc, #408]	@ (800191c <fsm_traffic_light+0x2b8>)
 8001784:	6013      	str	r3, [r2, #0]
		break;
 8001786:	e14c      	b.n	8001a22 <fsm_traffic_light+0x3be>
		HAL_GPIO_WritePin(GPIOA, LED_RED1_Pin, SET);
 8001788:	2201      	movs	r2, #1
 800178a:	2102      	movs	r1, #2
 800178c:	485e      	ldr	r0, [pc, #376]	@ (8001908 <fsm_traffic_light+0x2a4>)
 800178e:	f000 fc86 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_GREEN2_Pin, SET);
 8001792:	2201      	movs	r2, #1
 8001794:	2140      	movs	r1, #64	@ 0x40
 8001796:	485c      	ldr	r0, [pc, #368]	@ (8001908 <fsm_traffic_light+0x2a4>)
 8001798:	f000 fc81 	bl	800209e <HAL_GPIO_WritePin>
		auto_update7SEG();
 800179c:	f7ff f904 	bl	80009a8 <auto_update7SEG>
		if (timer2_flag == 1) {
 80017a0:	4b5f      	ldr	r3, [pc, #380]	@ (8001920 <fsm_traffic_light+0x2bc>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	f040 8131 	bne.w	8001a0c <fsm_traffic_light+0x3a8>
			traffic = RED_YELLOW;
 80017aa:	4b56      	ldr	r3, [pc, #344]	@ (8001904 <fsm_traffic_light+0x2a0>)
 80017ac:	220c      	movs	r2, #12
 80017ae:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, LED_GREEN2_Pin, RESET);
 80017b0:	2200      	movs	r2, #0
 80017b2:	2140      	movs	r1, #64	@ 0x40
 80017b4:	4854      	ldr	r0, [pc, #336]	@ (8001908 <fsm_traffic_light+0x2a4>)
 80017b6:	f000 fc72 	bl	800209e <HAL_GPIO_WritePin>
			setTimer2(counter_yellow);
 80017ba:	4b5a      	ldr	r3, [pc, #360]	@ (8001924 <fsm_traffic_light+0x2c0>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4618      	mov	r0, r3
 80017c0:	f7ff fe12 	bl	80013e8 <setTimer2>
			counter1 = counter_yellow / TIMER_CYCLE;
 80017c4:	4b57      	ldr	r3, [pc, #348]	@ (8001924 <fsm_traffic_light+0x2c0>)
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	4b52      	ldr	r3, [pc, #328]	@ (8001914 <fsm_traffic_light+0x2b0>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	fb92 f3f3 	sdiv	r3, r2, r3
 80017d0:	4a52      	ldr	r2, [pc, #328]	@ (800191c <fsm_traffic_light+0x2b8>)
 80017d2:	6013      	str	r3, [r2, #0]
		break;
 80017d4:	e11a      	b.n	8001a0c <fsm_traffic_light+0x3a8>
		HAL_GPIO_WritePin(GPIOA, LED_YELLOW2_Pin, SET);
 80017d6:	2201      	movs	r2, #1
 80017d8:	2120      	movs	r1, #32
 80017da:	484b      	ldr	r0, [pc, #300]	@ (8001908 <fsm_traffic_light+0x2a4>)
 80017dc:	f000 fc5f 	bl	800209e <HAL_GPIO_WritePin>
		auto_update7SEG();
 80017e0:	f7ff f8e2 	bl	80009a8 <auto_update7SEG>
		if (timer2_flag == 1) {
 80017e4:	4b4e      	ldr	r3, [pc, #312]	@ (8001920 <fsm_traffic_light+0x2bc>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	f040 8111 	bne.w	8001a10 <fsm_traffic_light+0x3ac>
			if (timer0_flag == 1) {
 80017ee:	4b4e      	ldr	r3, [pc, #312]	@ (8001928 <fsm_traffic_light+0x2c4>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d127      	bne.n	8001846 <fsm_traffic_light+0x1e2>
				setTimer0(counter_green);
 80017f6:	4b46      	ldr	r3, [pc, #280]	@ (8001910 <fsm_traffic_light+0x2ac>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7ff fdc0 	bl	8001380 <setTimer0>
				setTimer2(counter_red);
 8001800:	4b42      	ldr	r3, [pc, #264]	@ (800190c <fsm_traffic_light+0x2a8>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4618      	mov	r0, r3
 8001806:	f7ff fdef 	bl	80013e8 <setTimer2>
				HAL_GPIO_WritePin(GPIOA, LED_YELLOW2_Pin, RESET);
 800180a:	2200      	movs	r2, #0
 800180c:	2120      	movs	r1, #32
 800180e:	483e      	ldr	r0, [pc, #248]	@ (8001908 <fsm_traffic_light+0x2a4>)
 8001810:	f000 fc45 	bl	800209e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, LED_RED1_Pin, RESET);
 8001814:	2200      	movs	r2, #0
 8001816:	2102      	movs	r1, #2
 8001818:	483b      	ldr	r0, [pc, #236]	@ (8001908 <fsm_traffic_light+0x2a4>)
 800181a:	f000 fc40 	bl	800209e <HAL_GPIO_WritePin>
				traffic = GREEN_RED;
 800181e:	4b39      	ldr	r3, [pc, #228]	@ (8001904 <fsm_traffic_light+0x2a0>)
 8001820:	221f      	movs	r2, #31
 8001822:	601a      	str	r2, [r3, #0]
				counter0 = counter_green / TIMER_CYCLE;
 8001824:	4b3a      	ldr	r3, [pc, #232]	@ (8001910 <fsm_traffic_light+0x2ac>)
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	4b3a      	ldr	r3, [pc, #232]	@ (8001914 <fsm_traffic_light+0x2b0>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001830:	4a39      	ldr	r2, [pc, #228]	@ (8001918 <fsm_traffic_light+0x2b4>)
 8001832:	6013      	str	r3, [r2, #0]
				counter1 = counter_red / TIMER_CYCLE;
 8001834:	4b35      	ldr	r3, [pc, #212]	@ (800190c <fsm_traffic_light+0x2a8>)
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	4b36      	ldr	r3, [pc, #216]	@ (8001914 <fsm_traffic_light+0x2b0>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001840:	4a36      	ldr	r2, [pc, #216]	@ (800191c <fsm_traffic_light+0x2b8>)
 8001842:	6013      	str	r3, [r2, #0]
		break;
 8001844:	e0e4      	b.n	8001a10 <fsm_traffic_light+0x3ac>
				setTimer2(counter_red);
 8001846:	4b31      	ldr	r3, [pc, #196]	@ (800190c <fsm_traffic_light+0x2a8>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4618      	mov	r0, r3
 800184c:	f7ff fdcc 	bl	80013e8 <setTimer2>
				HAL_GPIO_WritePin(GPIOA, LED_YELLOW2_Pin, RESET);
 8001850:	2200      	movs	r2, #0
 8001852:	2120      	movs	r1, #32
 8001854:	482c      	ldr	r0, [pc, #176]	@ (8001908 <fsm_traffic_light+0x2a4>)
 8001856:	f000 fc22 	bl	800209e <HAL_GPIO_WritePin>
				traffic = RED_RED;
 800185a:	4b2a      	ldr	r3, [pc, #168]	@ (8001904 <fsm_traffic_light+0x2a0>)
 800185c:	220b      	movs	r2, #11
 800185e:	601a      	str	r2, [r3, #0]
				counter1 = counter_red / TIMER_CYCLE;
 8001860:	4b2a      	ldr	r3, [pc, #168]	@ (800190c <fsm_traffic_light+0x2a8>)
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	4b2b      	ldr	r3, [pc, #172]	@ (8001914 <fsm_traffic_light+0x2b0>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	fb92 f3f3 	sdiv	r3, r2, r3
 800186c:	4a2b      	ldr	r2, [pc, #172]	@ (800191c <fsm_traffic_light+0x2b8>)
 800186e:	6013      	str	r3, [r2, #0]
		break;
 8001870:	e0ce      	b.n	8001a10 <fsm_traffic_light+0x3ac>
		HAL_GPIO_WritePin(GPIOA, LED_RED2_Pin, SET);
 8001872:	2201      	movs	r2, #1
 8001874:	2110      	movs	r1, #16
 8001876:	4824      	ldr	r0, [pc, #144]	@ (8001908 <fsm_traffic_light+0x2a4>)
 8001878:	f000 fc11 	bl	800209e <HAL_GPIO_WritePin>
		auto_update7SEG();
 800187c:	f7ff f894 	bl	80009a8 <auto_update7SEG>
		if (timer0_flag == 1) {
 8001880:	4b29      	ldr	r3, [pc, #164]	@ (8001928 <fsm_traffic_light+0x2c4>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2b01      	cmp	r3, #1
 8001886:	f040 80c5 	bne.w	8001a14 <fsm_traffic_light+0x3b0>
			setTimer0(counter_green);
 800188a:	4b21      	ldr	r3, [pc, #132]	@ (8001910 <fsm_traffic_light+0x2ac>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4618      	mov	r0, r3
 8001890:	f7ff fd76 	bl	8001380 <setTimer0>
			HAL_GPIO_WritePin(GPIOA, LED_RED1_Pin, RESET);
 8001894:	2200      	movs	r2, #0
 8001896:	2102      	movs	r1, #2
 8001898:	481b      	ldr	r0, [pc, #108]	@ (8001908 <fsm_traffic_light+0x2a4>)
 800189a:	f000 fc00 	bl	800209e <HAL_GPIO_WritePin>
			traffic = GREEN_RED;
 800189e:	4b19      	ldr	r3, [pc, #100]	@ (8001904 <fsm_traffic_light+0x2a0>)
 80018a0:	221f      	movs	r2, #31
 80018a2:	601a      	str	r2, [r3, #0]
			counter0 = counter_green / TIMER_CYCLE;
 80018a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001910 <fsm_traffic_light+0x2ac>)
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	4b1a      	ldr	r3, [pc, #104]	@ (8001914 <fsm_traffic_light+0x2b0>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	fb92 f3f3 	sdiv	r3, r2, r3
 80018b0:	4a19      	ldr	r2, [pc, #100]	@ (8001918 <fsm_traffic_light+0x2b4>)
 80018b2:	6013      	str	r3, [r2, #0]
		break;
 80018b4:	e0ae      	b.n	8001a14 <fsm_traffic_light+0x3b0>
		HAL_GPIO_WritePin(GPIOA, LED_GREEN1_Pin, SET);
 80018b6:	2201      	movs	r2, #1
 80018b8:	2108      	movs	r1, #8
 80018ba:	4813      	ldr	r0, [pc, #76]	@ (8001908 <fsm_traffic_light+0x2a4>)
 80018bc:	f000 fbef 	bl	800209e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED_RED2_Pin, SET);
 80018c0:	2201      	movs	r2, #1
 80018c2:	2110      	movs	r1, #16
 80018c4:	4810      	ldr	r0, [pc, #64]	@ (8001908 <fsm_traffic_light+0x2a4>)
 80018c6:	f000 fbea 	bl	800209e <HAL_GPIO_WritePin>
		auto_update7SEG();
 80018ca:	f7ff f86d 	bl	80009a8 <auto_update7SEG>
		if (timer0_flag == 1) {
 80018ce:	4b16      	ldr	r3, [pc, #88]	@ (8001928 <fsm_traffic_light+0x2c4>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	f040 80a0 	bne.w	8001a18 <fsm_traffic_light+0x3b4>
			setTimer0(counter_yellow);
 80018d8:	4b12      	ldr	r3, [pc, #72]	@ (8001924 <fsm_traffic_light+0x2c0>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4618      	mov	r0, r3
 80018de:	f7ff fd4f 	bl	8001380 <setTimer0>
			HAL_GPIO_WritePin(GPIOA, LED_GREEN1_Pin, RESET);
 80018e2:	2200      	movs	r2, #0
 80018e4:	2108      	movs	r1, #8
 80018e6:	4808      	ldr	r0, [pc, #32]	@ (8001908 <fsm_traffic_light+0x2a4>)
 80018e8:	f000 fbd9 	bl	800209e <HAL_GPIO_WritePin>
			traffic = YELLOW_RED;
 80018ec:	4b05      	ldr	r3, [pc, #20]	@ (8001904 <fsm_traffic_light+0x2a0>)
 80018ee:	2215      	movs	r2, #21
 80018f0:	601a      	str	r2, [r3, #0]
			counter0 = counter_yellow /TIMER_CYCLE;
 80018f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001924 <fsm_traffic_light+0x2c0>)
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	4b07      	ldr	r3, [pc, #28]	@ (8001914 <fsm_traffic_light+0x2b0>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	fb92 f3f3 	sdiv	r3, r2, r3
 80018fe:	4a06      	ldr	r2, [pc, #24]	@ (8001918 <fsm_traffic_light+0x2b4>)
 8001900:	6013      	str	r3, [r2, #0]
		break;
 8001902:	e089      	b.n	8001a18 <fsm_traffic_light+0x3b4>
 8001904:	2000005c 	.word	0x2000005c
 8001908:	40010800 	.word	0x40010800
 800190c:	20000000 	.word	0x20000000
 8001910:	20000008 	.word	0x20000008
 8001914:	20000030 	.word	0x20000030
 8001918:	20000120 	.word	0x20000120
 800191c:	20000124 	.word	0x20000124
 8001920:	20000110 	.word	0x20000110
 8001924:	20000004 	.word	0x20000004
 8001928:	20000100 	.word	0x20000100
		HAL_GPIO_WritePin(GPIOA, LED_YELLOW1_Pin, SET);
 800192c:	2201      	movs	r2, #1
 800192e:	2104      	movs	r1, #4
 8001930:	483d      	ldr	r0, [pc, #244]	@ (8001a28 <fsm_traffic_light+0x3c4>)
 8001932:	f000 fbb4 	bl	800209e <HAL_GPIO_WritePin>
		auto_update7SEG();
 8001936:	f7ff f837 	bl	80009a8 <auto_update7SEG>
		if (timer0_flag == 1) {
 800193a:	4b3c      	ldr	r3, [pc, #240]	@ (8001a2c <fsm_traffic_light+0x3c8>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	2b01      	cmp	r3, #1
 8001940:	d16c      	bne.n	8001a1c <fsm_traffic_light+0x3b8>
			if (timer2_flag == 1) {
 8001942:	4b3b      	ldr	r3, [pc, #236]	@ (8001a30 <fsm_traffic_light+0x3cc>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	2b01      	cmp	r3, #1
 8001948:	d127      	bne.n	800199a <fsm_traffic_light+0x336>
				HAL_GPIO_WritePin(GPIOA, LED_YELLOW1_Pin, RESET);
 800194a:	2200      	movs	r2, #0
 800194c:	2104      	movs	r1, #4
 800194e:	4836      	ldr	r0, [pc, #216]	@ (8001a28 <fsm_traffic_light+0x3c4>)
 8001950:	f000 fba5 	bl	800209e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, LED_RED2_Pin, RESET);
 8001954:	2200      	movs	r2, #0
 8001956:	2110      	movs	r1, #16
 8001958:	4833      	ldr	r0, [pc, #204]	@ (8001a28 <fsm_traffic_light+0x3c4>)
 800195a:	f000 fba0 	bl	800209e <HAL_GPIO_WritePin>
				setTimer0(counter_red);
 800195e:	4b35      	ldr	r3, [pc, #212]	@ (8001a34 <fsm_traffic_light+0x3d0>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4618      	mov	r0, r3
 8001964:	f7ff fd0c 	bl	8001380 <setTimer0>
				setTimer2(counter_green);
 8001968:	4b33      	ldr	r3, [pc, #204]	@ (8001a38 <fsm_traffic_light+0x3d4>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff fd3b 	bl	80013e8 <setTimer2>
				traffic = RED_GREEN;
 8001972:	4b32      	ldr	r3, [pc, #200]	@ (8001a3c <fsm_traffic_light+0x3d8>)
 8001974:	220d      	movs	r2, #13
 8001976:	601a      	str	r2, [r3, #0]
				counter0 = counter_red /TIMER_CYCLE;
 8001978:	4b2e      	ldr	r3, [pc, #184]	@ (8001a34 <fsm_traffic_light+0x3d0>)
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	4b30      	ldr	r3, [pc, #192]	@ (8001a40 <fsm_traffic_light+0x3dc>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	fb92 f3f3 	sdiv	r3, r2, r3
 8001984:	4a2f      	ldr	r2, [pc, #188]	@ (8001a44 <fsm_traffic_light+0x3e0>)
 8001986:	6013      	str	r3, [r2, #0]
				counter1 = counter_green /TIMER_CYCLE;
 8001988:	4b2b      	ldr	r3, [pc, #172]	@ (8001a38 <fsm_traffic_light+0x3d4>)
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	4b2c      	ldr	r3, [pc, #176]	@ (8001a40 <fsm_traffic_light+0x3dc>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	fb92 f3f3 	sdiv	r3, r2, r3
 8001994:	4a2c      	ldr	r2, [pc, #176]	@ (8001a48 <fsm_traffic_light+0x3e4>)
 8001996:	6013      	str	r3, [r2, #0]
		break;
 8001998:	e040      	b.n	8001a1c <fsm_traffic_light+0x3b8>
				HAL_GPIO_WritePin(GPIOA, LED_YELLOW1_Pin, RESET);
 800199a:	2200      	movs	r2, #0
 800199c:	2104      	movs	r1, #4
 800199e:	4822      	ldr	r0, [pc, #136]	@ (8001a28 <fsm_traffic_light+0x3c4>)
 80019a0:	f000 fb7d 	bl	800209e <HAL_GPIO_WritePin>
				setTimer0(counter_red);
 80019a4:	4b23      	ldr	r3, [pc, #140]	@ (8001a34 <fsm_traffic_light+0x3d0>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff fce9 	bl	8001380 <setTimer0>
				traffic = RED_RED2;
 80019ae:	4b23      	ldr	r3, [pc, #140]	@ (8001a3c <fsm_traffic_light+0x3d8>)
 80019b0:	2265      	movs	r2, #101	@ 0x65
 80019b2:	601a      	str	r2, [r3, #0]
				counter0 = counter_red / TIMER_CYCLE;
 80019b4:	4b1f      	ldr	r3, [pc, #124]	@ (8001a34 <fsm_traffic_light+0x3d0>)
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	4b21      	ldr	r3, [pc, #132]	@ (8001a40 <fsm_traffic_light+0x3dc>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	fb92 f3f3 	sdiv	r3, r2, r3
 80019c0:	4a20      	ldr	r2, [pc, #128]	@ (8001a44 <fsm_traffic_light+0x3e0>)
 80019c2:	6013      	str	r3, [r2, #0]
		break;
 80019c4:	e02a      	b.n	8001a1c <fsm_traffic_light+0x3b8>
		HAL_GPIO_WritePin(GPIOA, LED_RED1_Pin, SET);
 80019c6:	2201      	movs	r2, #1
 80019c8:	2102      	movs	r1, #2
 80019ca:	4817      	ldr	r0, [pc, #92]	@ (8001a28 <fsm_traffic_light+0x3c4>)
 80019cc:	f000 fb67 	bl	800209e <HAL_GPIO_WritePin>
		auto_update7SEG();
 80019d0:	f7fe ffea 	bl	80009a8 <auto_update7SEG>
		if (timer2_flag == 1) {
 80019d4:	4b16      	ldr	r3, [pc, #88]	@ (8001a30 <fsm_traffic_light+0x3cc>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d121      	bne.n	8001a20 <fsm_traffic_light+0x3bc>
			setTimer2(counter_green);
 80019dc:	4b16      	ldr	r3, [pc, #88]	@ (8001a38 <fsm_traffic_light+0x3d4>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7ff fd01 	bl	80013e8 <setTimer2>
			HAL_GPIO_WritePin(GPIOA, LED_RED2_Pin, RESET);
 80019e6:	2200      	movs	r2, #0
 80019e8:	2110      	movs	r1, #16
 80019ea:	480f      	ldr	r0, [pc, #60]	@ (8001a28 <fsm_traffic_light+0x3c4>)
 80019ec:	f000 fb57 	bl	800209e <HAL_GPIO_WritePin>
			traffic = RED_GREEN;
 80019f0:	4b12      	ldr	r3, [pc, #72]	@ (8001a3c <fsm_traffic_light+0x3d8>)
 80019f2:	220d      	movs	r2, #13
 80019f4:	601a      	str	r2, [r3, #0]
			counter1 = counter_green /TIMER_CYCLE;
 80019f6:	4b10      	ldr	r3, [pc, #64]	@ (8001a38 <fsm_traffic_light+0x3d4>)
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	4b11      	ldr	r3, [pc, #68]	@ (8001a40 <fsm_traffic_light+0x3dc>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	fb92 f3f3 	sdiv	r3, r2, r3
 8001a02:	4a11      	ldr	r2, [pc, #68]	@ (8001a48 <fsm_traffic_light+0x3e4>)
 8001a04:	6013      	str	r3, [r2, #0]
		break;
 8001a06:	e00b      	b.n	8001a20 <fsm_traffic_light+0x3bc>
		break;
 8001a08:	bf00      	nop
 8001a0a:	e00a      	b.n	8001a22 <fsm_traffic_light+0x3be>
		break;
 8001a0c:	bf00      	nop
 8001a0e:	e008      	b.n	8001a22 <fsm_traffic_light+0x3be>
		break;
 8001a10:	bf00      	nop
 8001a12:	e006      	b.n	8001a22 <fsm_traffic_light+0x3be>
		break;
 8001a14:	bf00      	nop
 8001a16:	e004      	b.n	8001a22 <fsm_traffic_light+0x3be>
		break;
 8001a18:	bf00      	nop
 8001a1a:	e002      	b.n	8001a22 <fsm_traffic_light+0x3be>
		break;
 8001a1c:	bf00      	nop
 8001a1e:	e000      	b.n	8001a22 <fsm_traffic_light+0x3be>
		break;
 8001a20:	bf00      	nop
	}
}
 8001a22:	bf00      	nop
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	40010800 	.word	0x40010800
 8001a2c:	20000100 	.word	0x20000100
 8001a30:	20000110 	.word	0x20000110
 8001a34:	20000000 	.word	0x20000000
 8001a38:	20000008 	.word	0x20000008
 8001a3c:	2000005c 	.word	0x2000005c
 8001a40:	20000030 	.word	0x20000030
 8001a44:	20000120 	.word	0x20000120
 8001a48:	20000124 	.word	0x20000124

08001a4c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a4c:	f7ff fc92 	bl	8001374 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a50:	480b      	ldr	r0, [pc, #44]	@ (8001a80 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001a52:	490c      	ldr	r1, [pc, #48]	@ (8001a84 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001a54:	4a0c      	ldr	r2, [pc, #48]	@ (8001a88 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001a56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a58:	e002      	b.n	8001a60 <LoopCopyDataInit>

08001a5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a5e:	3304      	adds	r3, #4

08001a60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a64:	d3f9      	bcc.n	8001a5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a66:	4a09      	ldr	r2, [pc, #36]	@ (8001a8c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001a68:	4c09      	ldr	r4, [pc, #36]	@ (8001a90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a6c:	e001      	b.n	8001a72 <LoopFillZerobss>

08001a6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a70:	3204      	adds	r2, #4

08001a72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a74:	d3fb      	bcc.n	8001a6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a76:	f001 fb05 	bl	8003084 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a7a:	f7ff f99f 	bl	8000dbc <main>
  bx lr
 8001a7e:	4770      	bx	lr
  ldr r0, =_sdata
 8001a80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a84:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 8001a88:	08003110 	.word	0x08003110
  ldr r2, =_sbss
 8001a8c:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 8001a90:	2000012c 	.word	0x2000012c

08001a94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a94:	e7fe      	b.n	8001a94 <ADC1_2_IRQHandler>
	...

08001a98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a9c:	4b08      	ldr	r3, [pc, #32]	@ (8001ac0 <HAL_Init+0x28>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a07      	ldr	r2, [pc, #28]	@ (8001ac0 <HAL_Init+0x28>)
 8001aa2:	f043 0310 	orr.w	r3, r3, #16
 8001aa6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001aa8:	2003      	movs	r0, #3
 8001aaa:	f000 f923 	bl	8001cf4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001aae:	200f      	movs	r0, #15
 8001ab0:	f000 f808 	bl	8001ac4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ab4:	f7ff fbd2 	bl	800125c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ab8:	2300      	movs	r3, #0
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	40022000 	.word	0x40022000

08001ac4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001acc:	4b12      	ldr	r3, [pc, #72]	@ (8001b18 <HAL_InitTick+0x54>)
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	4b12      	ldr	r3, [pc, #72]	@ (8001b1c <HAL_InitTick+0x58>)
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ada:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f000 f93b 	bl	8001d5e <HAL_SYSTICK_Config>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e00e      	b.n	8001b10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2b0f      	cmp	r3, #15
 8001af6:	d80a      	bhi.n	8001b0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001af8:	2200      	movs	r2, #0
 8001afa:	6879      	ldr	r1, [r7, #4]
 8001afc:	f04f 30ff 	mov.w	r0, #4294967295
 8001b00:	f000 f903 	bl	8001d0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b04:	4a06      	ldr	r2, [pc, #24]	@ (8001b20 <HAL_InitTick+0x5c>)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	e000      	b.n	8001b10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3708      	adds	r7, #8
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	2000002c 	.word	0x2000002c
 8001b1c:	2000003c 	.word	0x2000003c
 8001b20:	20000038 	.word	0x20000038

08001b24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b28:	4b05      	ldr	r3, [pc, #20]	@ (8001b40 <HAL_IncTick+0x1c>)
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	4b05      	ldr	r3, [pc, #20]	@ (8001b44 <HAL_IncTick+0x20>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4413      	add	r3, r2
 8001b34:	4a03      	ldr	r2, [pc, #12]	@ (8001b44 <HAL_IncTick+0x20>)
 8001b36:	6013      	str	r3, [r2, #0]
}
 8001b38:	bf00      	nop
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bc80      	pop	{r7}
 8001b3e:	4770      	bx	lr
 8001b40:	2000003c 	.word	0x2000003c
 8001b44:	20000128 	.word	0x20000128

08001b48 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b4c:	4b02      	ldr	r3, [pc, #8]	@ (8001b58 <HAL_GetTick+0x10>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bc80      	pop	{r7}
 8001b56:	4770      	bx	lr
 8001b58:	20000128 	.word	0x20000128

08001b5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b085      	sub	sp, #20
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f003 0307 	and.w	r3, r3, #7
 8001b6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b6c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b72:	68ba      	ldr	r2, [r7, #8]
 8001b74:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b78:	4013      	ands	r3, r2
 8001b7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b84:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b8e:	4a04      	ldr	r2, [pc, #16]	@ (8001ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	60d3      	str	r3, [r2, #12]
}
 8001b94:	bf00      	nop
 8001b96:	3714      	adds	r7, #20
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bc80      	pop	{r7}
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	e000ed00 	.word	0xe000ed00

08001ba4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ba8:	4b04      	ldr	r3, [pc, #16]	@ (8001bbc <__NVIC_GetPriorityGrouping+0x18>)
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	0a1b      	lsrs	r3, r3, #8
 8001bae:	f003 0307 	and.w	r3, r3, #7
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bc80      	pop	{r7}
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	e000ed00 	.word	0xe000ed00

08001bc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	db0b      	blt.n	8001bea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bd2:	79fb      	ldrb	r3, [r7, #7]
 8001bd4:	f003 021f 	and.w	r2, r3, #31
 8001bd8:	4906      	ldr	r1, [pc, #24]	@ (8001bf4 <__NVIC_EnableIRQ+0x34>)
 8001bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bde:	095b      	lsrs	r3, r3, #5
 8001be0:	2001      	movs	r0, #1
 8001be2:	fa00 f202 	lsl.w	r2, r0, r2
 8001be6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bea:	bf00      	nop
 8001bec:	370c      	adds	r7, #12
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bc80      	pop	{r7}
 8001bf2:	4770      	bx	lr
 8001bf4:	e000e100 	.word	0xe000e100

08001bf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	4603      	mov	r3, r0
 8001c00:	6039      	str	r1, [r7, #0]
 8001c02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	db0a      	blt.n	8001c22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	b2da      	uxtb	r2, r3
 8001c10:	490c      	ldr	r1, [pc, #48]	@ (8001c44 <__NVIC_SetPriority+0x4c>)
 8001c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c16:	0112      	lsls	r2, r2, #4
 8001c18:	b2d2      	uxtb	r2, r2
 8001c1a:	440b      	add	r3, r1
 8001c1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c20:	e00a      	b.n	8001c38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	b2da      	uxtb	r2, r3
 8001c26:	4908      	ldr	r1, [pc, #32]	@ (8001c48 <__NVIC_SetPriority+0x50>)
 8001c28:	79fb      	ldrb	r3, [r7, #7]
 8001c2a:	f003 030f 	and.w	r3, r3, #15
 8001c2e:	3b04      	subs	r3, #4
 8001c30:	0112      	lsls	r2, r2, #4
 8001c32:	b2d2      	uxtb	r2, r2
 8001c34:	440b      	add	r3, r1
 8001c36:	761a      	strb	r2, [r3, #24]
}
 8001c38:	bf00      	nop
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bc80      	pop	{r7}
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	e000e100 	.word	0xe000e100
 8001c48:	e000ed00 	.word	0xe000ed00

08001c4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b089      	sub	sp, #36	@ 0x24
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	60b9      	str	r1, [r7, #8]
 8001c56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	f003 0307 	and.w	r3, r3, #7
 8001c5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	f1c3 0307 	rsb	r3, r3, #7
 8001c66:	2b04      	cmp	r3, #4
 8001c68:	bf28      	it	cs
 8001c6a:	2304      	movcs	r3, #4
 8001c6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	3304      	adds	r3, #4
 8001c72:	2b06      	cmp	r3, #6
 8001c74:	d902      	bls.n	8001c7c <NVIC_EncodePriority+0x30>
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	3b03      	subs	r3, #3
 8001c7a:	e000      	b.n	8001c7e <NVIC_EncodePriority+0x32>
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c80:	f04f 32ff 	mov.w	r2, #4294967295
 8001c84:	69bb      	ldr	r3, [r7, #24]
 8001c86:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8a:	43da      	mvns	r2, r3
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	401a      	ands	r2, r3
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c94:	f04f 31ff 	mov.w	r1, #4294967295
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c9e:	43d9      	mvns	r1, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ca4:	4313      	orrs	r3, r2
         );
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3724      	adds	r7, #36	@ 0x24
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bc80      	pop	{r7}
 8001cae:	4770      	bx	lr

08001cb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	3b01      	subs	r3, #1
 8001cbc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001cc0:	d301      	bcc.n	8001cc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e00f      	b.n	8001ce6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cc6:	4a0a      	ldr	r2, [pc, #40]	@ (8001cf0 <SysTick_Config+0x40>)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	3b01      	subs	r3, #1
 8001ccc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cce:	210f      	movs	r1, #15
 8001cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8001cd4:	f7ff ff90 	bl	8001bf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cd8:	4b05      	ldr	r3, [pc, #20]	@ (8001cf0 <SysTick_Config+0x40>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cde:	4b04      	ldr	r3, [pc, #16]	@ (8001cf0 <SysTick_Config+0x40>)
 8001ce0:	2207      	movs	r2, #7
 8001ce2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ce4:	2300      	movs	r3, #0
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3708      	adds	r7, #8
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	e000e010 	.word	0xe000e010

08001cf4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f7ff ff2d 	bl	8001b5c <__NVIC_SetPriorityGrouping>
}
 8001d02:	bf00      	nop
 8001d04:	3708      	adds	r7, #8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}

08001d0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d0a:	b580      	push	{r7, lr}
 8001d0c:	b086      	sub	sp, #24
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	4603      	mov	r3, r0
 8001d12:	60b9      	str	r1, [r7, #8]
 8001d14:	607a      	str	r2, [r7, #4]
 8001d16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d1c:	f7ff ff42 	bl	8001ba4 <__NVIC_GetPriorityGrouping>
 8001d20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	68b9      	ldr	r1, [r7, #8]
 8001d26:	6978      	ldr	r0, [r7, #20]
 8001d28:	f7ff ff90 	bl	8001c4c <NVIC_EncodePriority>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d32:	4611      	mov	r1, r2
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7ff ff5f 	bl	8001bf8 <__NVIC_SetPriority>
}
 8001d3a:	bf00      	nop
 8001d3c:	3718      	adds	r7, #24
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}

08001d42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d42:	b580      	push	{r7, lr}
 8001d44:	b082      	sub	sp, #8
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	4603      	mov	r3, r0
 8001d4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7ff ff35 	bl	8001bc0 <__NVIC_EnableIRQ>
}
 8001d56:	bf00      	nop
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b082      	sub	sp, #8
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f7ff ffa2 	bl	8001cb0 <SysTick_Config>
 8001d6c:	4603      	mov	r3, r0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3708      	adds	r7, #8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
	...

08001d78 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b08b      	sub	sp, #44	@ 0x2c
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d82:	2300      	movs	r3, #0
 8001d84:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d86:	2300      	movs	r3, #0
 8001d88:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d8a:	e161      	b.n	8002050 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d90:	fa02 f303 	lsl.w	r3, r2, r3
 8001d94:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	69fa      	ldr	r2, [r7, #28]
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	f040 8150 	bne.w	800204a <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	4a97      	ldr	r2, [pc, #604]	@ (800200c <HAL_GPIO_Init+0x294>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d05e      	beq.n	8001e72 <HAL_GPIO_Init+0xfa>
 8001db4:	4a95      	ldr	r2, [pc, #596]	@ (800200c <HAL_GPIO_Init+0x294>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d875      	bhi.n	8001ea6 <HAL_GPIO_Init+0x12e>
 8001dba:	4a95      	ldr	r2, [pc, #596]	@ (8002010 <HAL_GPIO_Init+0x298>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d058      	beq.n	8001e72 <HAL_GPIO_Init+0xfa>
 8001dc0:	4a93      	ldr	r2, [pc, #588]	@ (8002010 <HAL_GPIO_Init+0x298>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d86f      	bhi.n	8001ea6 <HAL_GPIO_Init+0x12e>
 8001dc6:	4a93      	ldr	r2, [pc, #588]	@ (8002014 <HAL_GPIO_Init+0x29c>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d052      	beq.n	8001e72 <HAL_GPIO_Init+0xfa>
 8001dcc:	4a91      	ldr	r2, [pc, #580]	@ (8002014 <HAL_GPIO_Init+0x29c>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d869      	bhi.n	8001ea6 <HAL_GPIO_Init+0x12e>
 8001dd2:	4a91      	ldr	r2, [pc, #580]	@ (8002018 <HAL_GPIO_Init+0x2a0>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d04c      	beq.n	8001e72 <HAL_GPIO_Init+0xfa>
 8001dd8:	4a8f      	ldr	r2, [pc, #572]	@ (8002018 <HAL_GPIO_Init+0x2a0>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d863      	bhi.n	8001ea6 <HAL_GPIO_Init+0x12e>
 8001dde:	4a8f      	ldr	r2, [pc, #572]	@ (800201c <HAL_GPIO_Init+0x2a4>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d046      	beq.n	8001e72 <HAL_GPIO_Init+0xfa>
 8001de4:	4a8d      	ldr	r2, [pc, #564]	@ (800201c <HAL_GPIO_Init+0x2a4>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d85d      	bhi.n	8001ea6 <HAL_GPIO_Init+0x12e>
 8001dea:	2b12      	cmp	r3, #18
 8001dec:	d82a      	bhi.n	8001e44 <HAL_GPIO_Init+0xcc>
 8001dee:	2b12      	cmp	r3, #18
 8001df0:	d859      	bhi.n	8001ea6 <HAL_GPIO_Init+0x12e>
 8001df2:	a201      	add	r2, pc, #4	@ (adr r2, 8001df8 <HAL_GPIO_Init+0x80>)
 8001df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001df8:	08001e73 	.word	0x08001e73
 8001dfc:	08001e4d 	.word	0x08001e4d
 8001e00:	08001e5f 	.word	0x08001e5f
 8001e04:	08001ea1 	.word	0x08001ea1
 8001e08:	08001ea7 	.word	0x08001ea7
 8001e0c:	08001ea7 	.word	0x08001ea7
 8001e10:	08001ea7 	.word	0x08001ea7
 8001e14:	08001ea7 	.word	0x08001ea7
 8001e18:	08001ea7 	.word	0x08001ea7
 8001e1c:	08001ea7 	.word	0x08001ea7
 8001e20:	08001ea7 	.word	0x08001ea7
 8001e24:	08001ea7 	.word	0x08001ea7
 8001e28:	08001ea7 	.word	0x08001ea7
 8001e2c:	08001ea7 	.word	0x08001ea7
 8001e30:	08001ea7 	.word	0x08001ea7
 8001e34:	08001ea7 	.word	0x08001ea7
 8001e38:	08001ea7 	.word	0x08001ea7
 8001e3c:	08001e55 	.word	0x08001e55
 8001e40:	08001e69 	.word	0x08001e69
 8001e44:	4a76      	ldr	r2, [pc, #472]	@ (8002020 <HAL_GPIO_Init+0x2a8>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d013      	beq.n	8001e72 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e4a:	e02c      	b.n	8001ea6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	623b      	str	r3, [r7, #32]
          break;
 8001e52:	e029      	b.n	8001ea8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	3304      	adds	r3, #4
 8001e5a:	623b      	str	r3, [r7, #32]
          break;
 8001e5c:	e024      	b.n	8001ea8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	3308      	adds	r3, #8
 8001e64:	623b      	str	r3, [r7, #32]
          break;
 8001e66:	e01f      	b.n	8001ea8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	330c      	adds	r3, #12
 8001e6e:	623b      	str	r3, [r7, #32]
          break;
 8001e70:	e01a      	b.n	8001ea8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d102      	bne.n	8001e80 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e7a:	2304      	movs	r3, #4
 8001e7c:	623b      	str	r3, [r7, #32]
          break;
 8001e7e:	e013      	b.n	8001ea8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d105      	bne.n	8001e94 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e88:	2308      	movs	r3, #8
 8001e8a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	69fa      	ldr	r2, [r7, #28]
 8001e90:	611a      	str	r2, [r3, #16]
          break;
 8001e92:	e009      	b.n	8001ea8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e94:	2308      	movs	r3, #8
 8001e96:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	69fa      	ldr	r2, [r7, #28]
 8001e9c:	615a      	str	r2, [r3, #20]
          break;
 8001e9e:	e003      	b.n	8001ea8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	623b      	str	r3, [r7, #32]
          break;
 8001ea4:	e000      	b.n	8001ea8 <HAL_GPIO_Init+0x130>
          break;
 8001ea6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	2bff      	cmp	r3, #255	@ 0xff
 8001eac:	d801      	bhi.n	8001eb2 <HAL_GPIO_Init+0x13a>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	e001      	b.n	8001eb6 <HAL_GPIO_Init+0x13e>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	3304      	adds	r3, #4
 8001eb6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	2bff      	cmp	r3, #255	@ 0xff
 8001ebc:	d802      	bhi.n	8001ec4 <HAL_GPIO_Init+0x14c>
 8001ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	e002      	b.n	8001eca <HAL_GPIO_Init+0x152>
 8001ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ec6:	3b08      	subs	r3, #8
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	210f      	movs	r1, #15
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed8:	43db      	mvns	r3, r3
 8001eda:	401a      	ands	r2, r3
 8001edc:	6a39      	ldr	r1, [r7, #32]
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee4:	431a      	orrs	r2, r3
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	f000 80a9 	beq.w	800204a <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ef8:	4b4a      	ldr	r3, [pc, #296]	@ (8002024 <HAL_GPIO_Init+0x2ac>)
 8001efa:	699b      	ldr	r3, [r3, #24]
 8001efc:	4a49      	ldr	r2, [pc, #292]	@ (8002024 <HAL_GPIO_Init+0x2ac>)
 8001efe:	f043 0301 	orr.w	r3, r3, #1
 8001f02:	6193      	str	r3, [r2, #24]
 8001f04:	4b47      	ldr	r3, [pc, #284]	@ (8002024 <HAL_GPIO_Init+0x2ac>)
 8001f06:	699b      	ldr	r3, [r3, #24]
 8001f08:	f003 0301 	and.w	r3, r3, #1
 8001f0c:	60bb      	str	r3, [r7, #8]
 8001f0e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f10:	4a45      	ldr	r2, [pc, #276]	@ (8002028 <HAL_GPIO_Init+0x2b0>)
 8001f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f14:	089b      	lsrs	r3, r3, #2
 8001f16:	3302      	adds	r3, #2
 8001f18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f1c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f20:	f003 0303 	and.w	r3, r3, #3
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	220f      	movs	r2, #15
 8001f28:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2c:	43db      	mvns	r3, r3
 8001f2e:	68fa      	ldr	r2, [r7, #12]
 8001f30:	4013      	ands	r3, r2
 8001f32:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	4a3d      	ldr	r2, [pc, #244]	@ (800202c <HAL_GPIO_Init+0x2b4>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d00d      	beq.n	8001f58 <HAL_GPIO_Init+0x1e0>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	4a3c      	ldr	r2, [pc, #240]	@ (8002030 <HAL_GPIO_Init+0x2b8>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d007      	beq.n	8001f54 <HAL_GPIO_Init+0x1dc>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	4a3b      	ldr	r2, [pc, #236]	@ (8002034 <HAL_GPIO_Init+0x2bc>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d101      	bne.n	8001f50 <HAL_GPIO_Init+0x1d8>
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	e004      	b.n	8001f5a <HAL_GPIO_Init+0x1e2>
 8001f50:	2303      	movs	r3, #3
 8001f52:	e002      	b.n	8001f5a <HAL_GPIO_Init+0x1e2>
 8001f54:	2301      	movs	r3, #1
 8001f56:	e000      	b.n	8001f5a <HAL_GPIO_Init+0x1e2>
 8001f58:	2300      	movs	r3, #0
 8001f5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f5c:	f002 0203 	and.w	r2, r2, #3
 8001f60:	0092      	lsls	r2, r2, #2
 8001f62:	4093      	lsls	r3, r2
 8001f64:	68fa      	ldr	r2, [r7, #12]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f6a:	492f      	ldr	r1, [pc, #188]	@ (8002028 <HAL_GPIO_Init+0x2b0>)
 8001f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f6e:	089b      	lsrs	r3, r3, #2
 8001f70:	3302      	adds	r3, #2
 8001f72:	68fa      	ldr	r2, [r7, #12]
 8001f74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d006      	beq.n	8001f92 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f84:	4b2c      	ldr	r3, [pc, #176]	@ (8002038 <HAL_GPIO_Init+0x2c0>)
 8001f86:	689a      	ldr	r2, [r3, #8]
 8001f88:	492b      	ldr	r1, [pc, #172]	@ (8002038 <HAL_GPIO_Init+0x2c0>)
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	608b      	str	r3, [r1, #8]
 8001f90:	e006      	b.n	8001fa0 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f92:	4b29      	ldr	r3, [pc, #164]	@ (8002038 <HAL_GPIO_Init+0x2c0>)
 8001f94:	689a      	ldr	r2, [r3, #8]
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	4927      	ldr	r1, [pc, #156]	@ (8002038 <HAL_GPIO_Init+0x2c0>)
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d006      	beq.n	8001fba <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001fac:	4b22      	ldr	r3, [pc, #136]	@ (8002038 <HAL_GPIO_Init+0x2c0>)
 8001fae:	68da      	ldr	r2, [r3, #12]
 8001fb0:	4921      	ldr	r1, [pc, #132]	@ (8002038 <HAL_GPIO_Init+0x2c0>)
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	60cb      	str	r3, [r1, #12]
 8001fb8:	e006      	b.n	8001fc8 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001fba:	4b1f      	ldr	r3, [pc, #124]	@ (8002038 <HAL_GPIO_Init+0x2c0>)
 8001fbc:	68da      	ldr	r2, [r3, #12]
 8001fbe:	69bb      	ldr	r3, [r7, #24]
 8001fc0:	43db      	mvns	r3, r3
 8001fc2:	491d      	ldr	r1, [pc, #116]	@ (8002038 <HAL_GPIO_Init+0x2c0>)
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d006      	beq.n	8001fe2 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001fd4:	4b18      	ldr	r3, [pc, #96]	@ (8002038 <HAL_GPIO_Init+0x2c0>)
 8001fd6:	685a      	ldr	r2, [r3, #4]
 8001fd8:	4917      	ldr	r1, [pc, #92]	@ (8002038 <HAL_GPIO_Init+0x2c0>)
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	604b      	str	r3, [r1, #4]
 8001fe0:	e006      	b.n	8001ff0 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001fe2:	4b15      	ldr	r3, [pc, #84]	@ (8002038 <HAL_GPIO_Init+0x2c0>)
 8001fe4:	685a      	ldr	r2, [r3, #4]
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	43db      	mvns	r3, r3
 8001fea:	4913      	ldr	r1, [pc, #76]	@ (8002038 <HAL_GPIO_Init+0x2c0>)
 8001fec:	4013      	ands	r3, r2
 8001fee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d01f      	beq.n	800203c <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ffc:	4b0e      	ldr	r3, [pc, #56]	@ (8002038 <HAL_GPIO_Init+0x2c0>)
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	490d      	ldr	r1, [pc, #52]	@ (8002038 <HAL_GPIO_Init+0x2c0>)
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	4313      	orrs	r3, r2
 8002006:	600b      	str	r3, [r1, #0]
 8002008:	e01f      	b.n	800204a <HAL_GPIO_Init+0x2d2>
 800200a:	bf00      	nop
 800200c:	10320000 	.word	0x10320000
 8002010:	10310000 	.word	0x10310000
 8002014:	10220000 	.word	0x10220000
 8002018:	10210000 	.word	0x10210000
 800201c:	10120000 	.word	0x10120000
 8002020:	10110000 	.word	0x10110000
 8002024:	40021000 	.word	0x40021000
 8002028:	40010000 	.word	0x40010000
 800202c:	40010800 	.word	0x40010800
 8002030:	40010c00 	.word	0x40010c00
 8002034:	40011000 	.word	0x40011000
 8002038:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800203c:	4b0b      	ldr	r3, [pc, #44]	@ (800206c <HAL_GPIO_Init+0x2f4>)
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	69bb      	ldr	r3, [r7, #24]
 8002042:	43db      	mvns	r3, r3
 8002044:	4909      	ldr	r1, [pc, #36]	@ (800206c <HAL_GPIO_Init+0x2f4>)
 8002046:	4013      	ands	r3, r2
 8002048:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800204a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800204c:	3301      	adds	r3, #1
 800204e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002056:	fa22 f303 	lsr.w	r3, r2, r3
 800205a:	2b00      	cmp	r3, #0
 800205c:	f47f ae96 	bne.w	8001d8c <HAL_GPIO_Init+0x14>
  }
}
 8002060:	bf00      	nop
 8002062:	bf00      	nop
 8002064:	372c      	adds	r7, #44	@ 0x2c
 8002066:	46bd      	mov	sp, r7
 8002068:	bc80      	pop	{r7}
 800206a:	4770      	bx	lr
 800206c:	40010400 	.word	0x40010400

08002070 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002070:	b480      	push	{r7}
 8002072:	b085      	sub	sp, #20
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	460b      	mov	r3, r1
 800207a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	689a      	ldr	r2, [r3, #8]
 8002080:	887b      	ldrh	r3, [r7, #2]
 8002082:	4013      	ands	r3, r2
 8002084:	2b00      	cmp	r3, #0
 8002086:	d002      	beq.n	800208e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002088:	2301      	movs	r3, #1
 800208a:	73fb      	strb	r3, [r7, #15]
 800208c:	e001      	b.n	8002092 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800208e:	2300      	movs	r3, #0
 8002090:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002092:	7bfb      	ldrb	r3, [r7, #15]
}
 8002094:	4618      	mov	r0, r3
 8002096:	3714      	adds	r7, #20
 8002098:	46bd      	mov	sp, r7
 800209a:	bc80      	pop	{r7}
 800209c:	4770      	bx	lr

0800209e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800209e:	b480      	push	{r7}
 80020a0:	b083      	sub	sp, #12
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
 80020a6:	460b      	mov	r3, r1
 80020a8:	807b      	strh	r3, [r7, #2]
 80020aa:	4613      	mov	r3, r2
 80020ac:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020ae:	787b      	ldrb	r3, [r7, #1]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d003      	beq.n	80020bc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020b4:	887a      	ldrh	r2, [r7, #2]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80020ba:	e003      	b.n	80020c4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80020bc:	887b      	ldrh	r3, [r7, #2]
 80020be:	041a      	lsls	r2, r3, #16
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	611a      	str	r2, [r3, #16]
}
 80020c4:	bf00      	nop
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bc80      	pop	{r7}
 80020cc:	4770      	bx	lr

080020ce <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020ce:	b480      	push	{r7}
 80020d0:	b085      	sub	sp, #20
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
 80020d6:	460b      	mov	r3, r1
 80020d8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80020e0:	887a      	ldrh	r2, [r7, #2]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	4013      	ands	r3, r2
 80020e6:	041a      	lsls	r2, r3, #16
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	43d9      	mvns	r1, r3
 80020ec:	887b      	ldrh	r3, [r7, #2]
 80020ee:	400b      	ands	r3, r1
 80020f0:	431a      	orrs	r2, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	611a      	str	r2, [r3, #16]
}
 80020f6:	bf00      	nop
 80020f8:	3714      	adds	r7, #20
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bc80      	pop	{r7}
 80020fe:	4770      	bx	lr

08002100 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b086      	sub	sp, #24
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d101      	bne.n	8002112 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e272      	b.n	80025f8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	2b00      	cmp	r3, #0
 800211c:	f000 8087 	beq.w	800222e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002120:	4b92      	ldr	r3, [pc, #584]	@ (800236c <HAL_RCC_OscConfig+0x26c>)
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f003 030c 	and.w	r3, r3, #12
 8002128:	2b04      	cmp	r3, #4
 800212a:	d00c      	beq.n	8002146 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800212c:	4b8f      	ldr	r3, [pc, #572]	@ (800236c <HAL_RCC_OscConfig+0x26c>)
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f003 030c 	and.w	r3, r3, #12
 8002134:	2b08      	cmp	r3, #8
 8002136:	d112      	bne.n	800215e <HAL_RCC_OscConfig+0x5e>
 8002138:	4b8c      	ldr	r3, [pc, #560]	@ (800236c <HAL_RCC_OscConfig+0x26c>)
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002140:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002144:	d10b      	bne.n	800215e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002146:	4b89      	ldr	r3, [pc, #548]	@ (800236c <HAL_RCC_OscConfig+0x26c>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d06c      	beq.n	800222c <HAL_RCC_OscConfig+0x12c>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d168      	bne.n	800222c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e24c      	b.n	80025f8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002166:	d106      	bne.n	8002176 <HAL_RCC_OscConfig+0x76>
 8002168:	4b80      	ldr	r3, [pc, #512]	@ (800236c <HAL_RCC_OscConfig+0x26c>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a7f      	ldr	r2, [pc, #508]	@ (800236c <HAL_RCC_OscConfig+0x26c>)
 800216e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002172:	6013      	str	r3, [r2, #0]
 8002174:	e02e      	b.n	80021d4 <HAL_RCC_OscConfig+0xd4>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d10c      	bne.n	8002198 <HAL_RCC_OscConfig+0x98>
 800217e:	4b7b      	ldr	r3, [pc, #492]	@ (800236c <HAL_RCC_OscConfig+0x26c>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a7a      	ldr	r2, [pc, #488]	@ (800236c <HAL_RCC_OscConfig+0x26c>)
 8002184:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002188:	6013      	str	r3, [r2, #0]
 800218a:	4b78      	ldr	r3, [pc, #480]	@ (800236c <HAL_RCC_OscConfig+0x26c>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a77      	ldr	r2, [pc, #476]	@ (800236c <HAL_RCC_OscConfig+0x26c>)
 8002190:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002194:	6013      	str	r3, [r2, #0]
 8002196:	e01d      	b.n	80021d4 <HAL_RCC_OscConfig+0xd4>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80021a0:	d10c      	bne.n	80021bc <HAL_RCC_OscConfig+0xbc>
 80021a2:	4b72      	ldr	r3, [pc, #456]	@ (800236c <HAL_RCC_OscConfig+0x26c>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a71      	ldr	r2, [pc, #452]	@ (800236c <HAL_RCC_OscConfig+0x26c>)
 80021a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021ac:	6013      	str	r3, [r2, #0]
 80021ae:	4b6f      	ldr	r3, [pc, #444]	@ (800236c <HAL_RCC_OscConfig+0x26c>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a6e      	ldr	r2, [pc, #440]	@ (800236c <HAL_RCC_OscConfig+0x26c>)
 80021b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021b8:	6013      	str	r3, [r2, #0]
 80021ba:	e00b      	b.n	80021d4 <HAL_RCC_OscConfig+0xd4>
 80021bc:	4b6b      	ldr	r3, [pc, #428]	@ (800236c <HAL_RCC_OscConfig+0x26c>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a6a      	ldr	r2, [pc, #424]	@ (800236c <HAL_RCC_OscConfig+0x26c>)
 80021c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021c6:	6013      	str	r3, [r2, #0]
 80021c8:	4b68      	ldr	r3, [pc, #416]	@ (800236c <HAL_RCC_OscConfig+0x26c>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a67      	ldr	r2, [pc, #412]	@ (800236c <HAL_RCC_OscConfig+0x26c>)
 80021ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021d2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d013      	beq.n	8002204 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021dc:	f7ff fcb4 	bl	8001b48 <HAL_GetTick>
 80021e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021e2:	e008      	b.n	80021f6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021e4:	f7ff fcb0 	bl	8001b48 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	2b64      	cmp	r3, #100	@ 0x64
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e200      	b.n	80025f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021f6:	4b5d      	ldr	r3, [pc, #372]	@ (800236c <HAL_RCC_OscConfig+0x26c>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d0f0      	beq.n	80021e4 <HAL_RCC_OscConfig+0xe4>
 8002202:	e014      	b.n	800222e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002204:	f7ff fca0 	bl	8001b48 <HAL_GetTick>
 8002208:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800220a:	e008      	b.n	800221e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800220c:	f7ff fc9c 	bl	8001b48 <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	2b64      	cmp	r3, #100	@ 0x64
 8002218:	d901      	bls.n	800221e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e1ec      	b.n	80025f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800221e:	4b53      	ldr	r3, [pc, #332]	@ (800236c <HAL_RCC_OscConfig+0x26c>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d1f0      	bne.n	800220c <HAL_RCC_OscConfig+0x10c>
 800222a:	e000      	b.n	800222e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800222c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0302 	and.w	r3, r3, #2
 8002236:	2b00      	cmp	r3, #0
 8002238:	d063      	beq.n	8002302 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800223a:	4b4c      	ldr	r3, [pc, #304]	@ (800236c <HAL_RCC_OscConfig+0x26c>)
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f003 030c 	and.w	r3, r3, #12
 8002242:	2b00      	cmp	r3, #0
 8002244:	d00b      	beq.n	800225e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002246:	4b49      	ldr	r3, [pc, #292]	@ (800236c <HAL_RCC_OscConfig+0x26c>)
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f003 030c 	and.w	r3, r3, #12
 800224e:	2b08      	cmp	r3, #8
 8002250:	d11c      	bne.n	800228c <HAL_RCC_OscConfig+0x18c>
 8002252:	4b46      	ldr	r3, [pc, #280]	@ (800236c <HAL_RCC_OscConfig+0x26c>)
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d116      	bne.n	800228c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800225e:	4b43      	ldr	r3, [pc, #268]	@ (800236c <HAL_RCC_OscConfig+0x26c>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	2b00      	cmp	r3, #0
 8002268:	d005      	beq.n	8002276 <HAL_RCC_OscConfig+0x176>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	691b      	ldr	r3, [r3, #16]
 800226e:	2b01      	cmp	r3, #1
 8002270:	d001      	beq.n	8002276 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e1c0      	b.n	80025f8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002276:	4b3d      	ldr	r3, [pc, #244]	@ (800236c <HAL_RCC_OscConfig+0x26c>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	695b      	ldr	r3, [r3, #20]
 8002282:	00db      	lsls	r3, r3, #3
 8002284:	4939      	ldr	r1, [pc, #228]	@ (800236c <HAL_RCC_OscConfig+0x26c>)
 8002286:	4313      	orrs	r3, r2
 8002288:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800228a:	e03a      	b.n	8002302 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	691b      	ldr	r3, [r3, #16]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d020      	beq.n	80022d6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002294:	4b36      	ldr	r3, [pc, #216]	@ (8002370 <HAL_RCC_OscConfig+0x270>)
 8002296:	2201      	movs	r2, #1
 8002298:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800229a:	f7ff fc55 	bl	8001b48 <HAL_GetTick>
 800229e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022a0:	e008      	b.n	80022b4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022a2:	f7ff fc51 	bl	8001b48 <HAL_GetTick>
 80022a6:	4602      	mov	r2, r0
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d901      	bls.n	80022b4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	e1a1      	b.n	80025f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022b4:	4b2d      	ldr	r3, [pc, #180]	@ (800236c <HAL_RCC_OscConfig+0x26c>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0302 	and.w	r3, r3, #2
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d0f0      	beq.n	80022a2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022c0:	4b2a      	ldr	r3, [pc, #168]	@ (800236c <HAL_RCC_OscConfig+0x26c>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	695b      	ldr	r3, [r3, #20]
 80022cc:	00db      	lsls	r3, r3, #3
 80022ce:	4927      	ldr	r1, [pc, #156]	@ (800236c <HAL_RCC_OscConfig+0x26c>)
 80022d0:	4313      	orrs	r3, r2
 80022d2:	600b      	str	r3, [r1, #0]
 80022d4:	e015      	b.n	8002302 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022d6:	4b26      	ldr	r3, [pc, #152]	@ (8002370 <HAL_RCC_OscConfig+0x270>)
 80022d8:	2200      	movs	r2, #0
 80022da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022dc:	f7ff fc34 	bl	8001b48 <HAL_GetTick>
 80022e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022e2:	e008      	b.n	80022f6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022e4:	f7ff fc30 	bl	8001b48 <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d901      	bls.n	80022f6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e180      	b.n	80025f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022f6:	4b1d      	ldr	r3, [pc, #116]	@ (800236c <HAL_RCC_OscConfig+0x26c>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0302 	and.w	r3, r3, #2
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d1f0      	bne.n	80022e4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0308 	and.w	r3, r3, #8
 800230a:	2b00      	cmp	r3, #0
 800230c:	d03a      	beq.n	8002384 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	699b      	ldr	r3, [r3, #24]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d019      	beq.n	800234a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002316:	4b17      	ldr	r3, [pc, #92]	@ (8002374 <HAL_RCC_OscConfig+0x274>)
 8002318:	2201      	movs	r2, #1
 800231a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800231c:	f7ff fc14 	bl	8001b48 <HAL_GetTick>
 8002320:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002322:	e008      	b.n	8002336 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002324:	f7ff fc10 	bl	8001b48 <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	2b02      	cmp	r3, #2
 8002330:	d901      	bls.n	8002336 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e160      	b.n	80025f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002336:	4b0d      	ldr	r3, [pc, #52]	@ (800236c <HAL_RCC_OscConfig+0x26c>)
 8002338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800233a:	f003 0302 	and.w	r3, r3, #2
 800233e:	2b00      	cmp	r3, #0
 8002340:	d0f0      	beq.n	8002324 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002342:	2001      	movs	r0, #1
 8002344:	f000 fa9c 	bl	8002880 <RCC_Delay>
 8002348:	e01c      	b.n	8002384 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800234a:	4b0a      	ldr	r3, [pc, #40]	@ (8002374 <HAL_RCC_OscConfig+0x274>)
 800234c:	2200      	movs	r2, #0
 800234e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002350:	f7ff fbfa 	bl	8001b48 <HAL_GetTick>
 8002354:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002356:	e00f      	b.n	8002378 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002358:	f7ff fbf6 	bl	8001b48 <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	2b02      	cmp	r3, #2
 8002364:	d908      	bls.n	8002378 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e146      	b.n	80025f8 <HAL_RCC_OscConfig+0x4f8>
 800236a:	bf00      	nop
 800236c:	40021000 	.word	0x40021000
 8002370:	42420000 	.word	0x42420000
 8002374:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002378:	4b92      	ldr	r3, [pc, #584]	@ (80025c4 <HAL_RCC_OscConfig+0x4c4>)
 800237a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800237c:	f003 0302 	and.w	r3, r3, #2
 8002380:	2b00      	cmp	r3, #0
 8002382:	d1e9      	bne.n	8002358 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0304 	and.w	r3, r3, #4
 800238c:	2b00      	cmp	r3, #0
 800238e:	f000 80a6 	beq.w	80024de <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002392:	2300      	movs	r3, #0
 8002394:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002396:	4b8b      	ldr	r3, [pc, #556]	@ (80025c4 <HAL_RCC_OscConfig+0x4c4>)
 8002398:	69db      	ldr	r3, [r3, #28]
 800239a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d10d      	bne.n	80023be <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023a2:	4b88      	ldr	r3, [pc, #544]	@ (80025c4 <HAL_RCC_OscConfig+0x4c4>)
 80023a4:	69db      	ldr	r3, [r3, #28]
 80023a6:	4a87      	ldr	r2, [pc, #540]	@ (80025c4 <HAL_RCC_OscConfig+0x4c4>)
 80023a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023ac:	61d3      	str	r3, [r2, #28]
 80023ae:	4b85      	ldr	r3, [pc, #532]	@ (80025c4 <HAL_RCC_OscConfig+0x4c4>)
 80023b0:	69db      	ldr	r3, [r3, #28]
 80023b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023b6:	60bb      	str	r3, [r7, #8]
 80023b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023ba:	2301      	movs	r3, #1
 80023bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023be:	4b82      	ldr	r3, [pc, #520]	@ (80025c8 <HAL_RCC_OscConfig+0x4c8>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d118      	bne.n	80023fc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023ca:	4b7f      	ldr	r3, [pc, #508]	@ (80025c8 <HAL_RCC_OscConfig+0x4c8>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a7e      	ldr	r2, [pc, #504]	@ (80025c8 <HAL_RCC_OscConfig+0x4c8>)
 80023d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023d6:	f7ff fbb7 	bl	8001b48 <HAL_GetTick>
 80023da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023dc:	e008      	b.n	80023f0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023de:	f7ff fbb3 	bl	8001b48 <HAL_GetTick>
 80023e2:	4602      	mov	r2, r0
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	2b64      	cmp	r3, #100	@ 0x64
 80023ea:	d901      	bls.n	80023f0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80023ec:	2303      	movs	r3, #3
 80023ee:	e103      	b.n	80025f8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023f0:	4b75      	ldr	r3, [pc, #468]	@ (80025c8 <HAL_RCC_OscConfig+0x4c8>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d0f0      	beq.n	80023de <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	2b01      	cmp	r3, #1
 8002402:	d106      	bne.n	8002412 <HAL_RCC_OscConfig+0x312>
 8002404:	4b6f      	ldr	r3, [pc, #444]	@ (80025c4 <HAL_RCC_OscConfig+0x4c4>)
 8002406:	6a1b      	ldr	r3, [r3, #32]
 8002408:	4a6e      	ldr	r2, [pc, #440]	@ (80025c4 <HAL_RCC_OscConfig+0x4c4>)
 800240a:	f043 0301 	orr.w	r3, r3, #1
 800240e:	6213      	str	r3, [r2, #32]
 8002410:	e02d      	b.n	800246e <HAL_RCC_OscConfig+0x36e>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d10c      	bne.n	8002434 <HAL_RCC_OscConfig+0x334>
 800241a:	4b6a      	ldr	r3, [pc, #424]	@ (80025c4 <HAL_RCC_OscConfig+0x4c4>)
 800241c:	6a1b      	ldr	r3, [r3, #32]
 800241e:	4a69      	ldr	r2, [pc, #420]	@ (80025c4 <HAL_RCC_OscConfig+0x4c4>)
 8002420:	f023 0301 	bic.w	r3, r3, #1
 8002424:	6213      	str	r3, [r2, #32]
 8002426:	4b67      	ldr	r3, [pc, #412]	@ (80025c4 <HAL_RCC_OscConfig+0x4c4>)
 8002428:	6a1b      	ldr	r3, [r3, #32]
 800242a:	4a66      	ldr	r2, [pc, #408]	@ (80025c4 <HAL_RCC_OscConfig+0x4c4>)
 800242c:	f023 0304 	bic.w	r3, r3, #4
 8002430:	6213      	str	r3, [r2, #32]
 8002432:	e01c      	b.n	800246e <HAL_RCC_OscConfig+0x36e>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	2b05      	cmp	r3, #5
 800243a:	d10c      	bne.n	8002456 <HAL_RCC_OscConfig+0x356>
 800243c:	4b61      	ldr	r3, [pc, #388]	@ (80025c4 <HAL_RCC_OscConfig+0x4c4>)
 800243e:	6a1b      	ldr	r3, [r3, #32]
 8002440:	4a60      	ldr	r2, [pc, #384]	@ (80025c4 <HAL_RCC_OscConfig+0x4c4>)
 8002442:	f043 0304 	orr.w	r3, r3, #4
 8002446:	6213      	str	r3, [r2, #32]
 8002448:	4b5e      	ldr	r3, [pc, #376]	@ (80025c4 <HAL_RCC_OscConfig+0x4c4>)
 800244a:	6a1b      	ldr	r3, [r3, #32]
 800244c:	4a5d      	ldr	r2, [pc, #372]	@ (80025c4 <HAL_RCC_OscConfig+0x4c4>)
 800244e:	f043 0301 	orr.w	r3, r3, #1
 8002452:	6213      	str	r3, [r2, #32]
 8002454:	e00b      	b.n	800246e <HAL_RCC_OscConfig+0x36e>
 8002456:	4b5b      	ldr	r3, [pc, #364]	@ (80025c4 <HAL_RCC_OscConfig+0x4c4>)
 8002458:	6a1b      	ldr	r3, [r3, #32]
 800245a:	4a5a      	ldr	r2, [pc, #360]	@ (80025c4 <HAL_RCC_OscConfig+0x4c4>)
 800245c:	f023 0301 	bic.w	r3, r3, #1
 8002460:	6213      	str	r3, [r2, #32]
 8002462:	4b58      	ldr	r3, [pc, #352]	@ (80025c4 <HAL_RCC_OscConfig+0x4c4>)
 8002464:	6a1b      	ldr	r3, [r3, #32]
 8002466:	4a57      	ldr	r2, [pc, #348]	@ (80025c4 <HAL_RCC_OscConfig+0x4c4>)
 8002468:	f023 0304 	bic.w	r3, r3, #4
 800246c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d015      	beq.n	80024a2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002476:	f7ff fb67 	bl	8001b48 <HAL_GetTick>
 800247a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800247c:	e00a      	b.n	8002494 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800247e:	f7ff fb63 	bl	8001b48 <HAL_GetTick>
 8002482:	4602      	mov	r2, r0
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	f241 3288 	movw	r2, #5000	@ 0x1388
 800248c:	4293      	cmp	r3, r2
 800248e:	d901      	bls.n	8002494 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002490:	2303      	movs	r3, #3
 8002492:	e0b1      	b.n	80025f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002494:	4b4b      	ldr	r3, [pc, #300]	@ (80025c4 <HAL_RCC_OscConfig+0x4c4>)
 8002496:	6a1b      	ldr	r3, [r3, #32]
 8002498:	f003 0302 	and.w	r3, r3, #2
 800249c:	2b00      	cmp	r3, #0
 800249e:	d0ee      	beq.n	800247e <HAL_RCC_OscConfig+0x37e>
 80024a0:	e014      	b.n	80024cc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024a2:	f7ff fb51 	bl	8001b48 <HAL_GetTick>
 80024a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024a8:	e00a      	b.n	80024c0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024aa:	f7ff fb4d 	bl	8001b48 <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d901      	bls.n	80024c0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80024bc:	2303      	movs	r3, #3
 80024be:	e09b      	b.n	80025f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024c0:	4b40      	ldr	r3, [pc, #256]	@ (80025c4 <HAL_RCC_OscConfig+0x4c4>)
 80024c2:	6a1b      	ldr	r3, [r3, #32]
 80024c4:	f003 0302 	and.w	r3, r3, #2
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d1ee      	bne.n	80024aa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80024cc:	7dfb      	ldrb	r3, [r7, #23]
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d105      	bne.n	80024de <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024d2:	4b3c      	ldr	r3, [pc, #240]	@ (80025c4 <HAL_RCC_OscConfig+0x4c4>)
 80024d4:	69db      	ldr	r3, [r3, #28]
 80024d6:	4a3b      	ldr	r2, [pc, #236]	@ (80025c4 <HAL_RCC_OscConfig+0x4c4>)
 80024d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80024dc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	69db      	ldr	r3, [r3, #28]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	f000 8087 	beq.w	80025f6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024e8:	4b36      	ldr	r3, [pc, #216]	@ (80025c4 <HAL_RCC_OscConfig+0x4c4>)
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f003 030c 	and.w	r3, r3, #12
 80024f0:	2b08      	cmp	r3, #8
 80024f2:	d061      	beq.n	80025b8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	69db      	ldr	r3, [r3, #28]
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d146      	bne.n	800258a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024fc:	4b33      	ldr	r3, [pc, #204]	@ (80025cc <HAL_RCC_OscConfig+0x4cc>)
 80024fe:	2200      	movs	r2, #0
 8002500:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002502:	f7ff fb21 	bl	8001b48 <HAL_GetTick>
 8002506:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002508:	e008      	b.n	800251c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800250a:	f7ff fb1d 	bl	8001b48 <HAL_GetTick>
 800250e:	4602      	mov	r2, r0
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	2b02      	cmp	r3, #2
 8002516:	d901      	bls.n	800251c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002518:	2303      	movs	r3, #3
 800251a:	e06d      	b.n	80025f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800251c:	4b29      	ldr	r3, [pc, #164]	@ (80025c4 <HAL_RCC_OscConfig+0x4c4>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d1f0      	bne.n	800250a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6a1b      	ldr	r3, [r3, #32]
 800252c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002530:	d108      	bne.n	8002544 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002532:	4b24      	ldr	r3, [pc, #144]	@ (80025c4 <HAL_RCC_OscConfig+0x4c4>)
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	4921      	ldr	r1, [pc, #132]	@ (80025c4 <HAL_RCC_OscConfig+0x4c4>)
 8002540:	4313      	orrs	r3, r2
 8002542:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002544:	4b1f      	ldr	r3, [pc, #124]	@ (80025c4 <HAL_RCC_OscConfig+0x4c4>)
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6a19      	ldr	r1, [r3, #32]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002554:	430b      	orrs	r3, r1
 8002556:	491b      	ldr	r1, [pc, #108]	@ (80025c4 <HAL_RCC_OscConfig+0x4c4>)
 8002558:	4313      	orrs	r3, r2
 800255a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800255c:	4b1b      	ldr	r3, [pc, #108]	@ (80025cc <HAL_RCC_OscConfig+0x4cc>)
 800255e:	2201      	movs	r2, #1
 8002560:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002562:	f7ff faf1 	bl	8001b48 <HAL_GetTick>
 8002566:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002568:	e008      	b.n	800257c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800256a:	f7ff faed 	bl	8001b48 <HAL_GetTick>
 800256e:	4602      	mov	r2, r0
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	2b02      	cmp	r3, #2
 8002576:	d901      	bls.n	800257c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	e03d      	b.n	80025f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800257c:	4b11      	ldr	r3, [pc, #68]	@ (80025c4 <HAL_RCC_OscConfig+0x4c4>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d0f0      	beq.n	800256a <HAL_RCC_OscConfig+0x46a>
 8002588:	e035      	b.n	80025f6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800258a:	4b10      	ldr	r3, [pc, #64]	@ (80025cc <HAL_RCC_OscConfig+0x4cc>)
 800258c:	2200      	movs	r2, #0
 800258e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002590:	f7ff fada 	bl	8001b48 <HAL_GetTick>
 8002594:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002596:	e008      	b.n	80025aa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002598:	f7ff fad6 	bl	8001b48 <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d901      	bls.n	80025aa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e026      	b.n	80025f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025aa:	4b06      	ldr	r3, [pc, #24]	@ (80025c4 <HAL_RCC_OscConfig+0x4c4>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d1f0      	bne.n	8002598 <HAL_RCC_OscConfig+0x498>
 80025b6:	e01e      	b.n	80025f6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	69db      	ldr	r3, [r3, #28]
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d107      	bne.n	80025d0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e019      	b.n	80025f8 <HAL_RCC_OscConfig+0x4f8>
 80025c4:	40021000 	.word	0x40021000
 80025c8:	40007000 	.word	0x40007000
 80025cc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002600 <HAL_RCC_OscConfig+0x500>)
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6a1b      	ldr	r3, [r3, #32]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d106      	bne.n	80025f2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d001      	beq.n	80025f6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e000      	b.n	80025f8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80025f6:	2300      	movs	r3, #0
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3718      	adds	r7, #24
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	40021000 	.word	0x40021000

08002604 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d101      	bne.n	8002618 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e0d0      	b.n	80027ba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002618:	4b6a      	ldr	r3, [pc, #424]	@ (80027c4 <HAL_RCC_ClockConfig+0x1c0>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0307 	and.w	r3, r3, #7
 8002620:	683a      	ldr	r2, [r7, #0]
 8002622:	429a      	cmp	r2, r3
 8002624:	d910      	bls.n	8002648 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002626:	4b67      	ldr	r3, [pc, #412]	@ (80027c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f023 0207 	bic.w	r2, r3, #7
 800262e:	4965      	ldr	r1, [pc, #404]	@ (80027c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	4313      	orrs	r3, r2
 8002634:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002636:	4b63      	ldr	r3, [pc, #396]	@ (80027c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0307 	and.w	r3, r3, #7
 800263e:	683a      	ldr	r2, [r7, #0]
 8002640:	429a      	cmp	r2, r3
 8002642:	d001      	beq.n	8002648 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e0b8      	b.n	80027ba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0302 	and.w	r3, r3, #2
 8002650:	2b00      	cmp	r3, #0
 8002652:	d020      	beq.n	8002696 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0304 	and.w	r3, r3, #4
 800265c:	2b00      	cmp	r3, #0
 800265e:	d005      	beq.n	800266c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002660:	4b59      	ldr	r3, [pc, #356]	@ (80027c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	4a58      	ldr	r2, [pc, #352]	@ (80027c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002666:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800266a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0308 	and.w	r3, r3, #8
 8002674:	2b00      	cmp	r3, #0
 8002676:	d005      	beq.n	8002684 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002678:	4b53      	ldr	r3, [pc, #332]	@ (80027c8 <HAL_RCC_ClockConfig+0x1c4>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	4a52      	ldr	r2, [pc, #328]	@ (80027c8 <HAL_RCC_ClockConfig+0x1c4>)
 800267e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002682:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002684:	4b50      	ldr	r3, [pc, #320]	@ (80027c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	494d      	ldr	r1, [pc, #308]	@ (80027c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002692:	4313      	orrs	r3, r2
 8002694:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0301 	and.w	r3, r3, #1
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d040      	beq.n	8002724 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d107      	bne.n	80026ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026aa:	4b47      	ldr	r3, [pc, #284]	@ (80027c8 <HAL_RCC_ClockConfig+0x1c4>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d115      	bne.n	80026e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e07f      	b.n	80027ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d107      	bne.n	80026d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026c2:	4b41      	ldr	r3, [pc, #260]	@ (80027c8 <HAL_RCC_ClockConfig+0x1c4>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d109      	bne.n	80026e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e073      	b.n	80027ba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026d2:	4b3d      	ldr	r3, [pc, #244]	@ (80027c8 <HAL_RCC_ClockConfig+0x1c4>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0302 	and.w	r3, r3, #2
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d101      	bne.n	80026e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e06b      	b.n	80027ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026e2:	4b39      	ldr	r3, [pc, #228]	@ (80027c8 <HAL_RCC_ClockConfig+0x1c4>)
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f023 0203 	bic.w	r2, r3, #3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	4936      	ldr	r1, [pc, #216]	@ (80027c8 <HAL_RCC_ClockConfig+0x1c4>)
 80026f0:	4313      	orrs	r3, r2
 80026f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026f4:	f7ff fa28 	bl	8001b48 <HAL_GetTick>
 80026f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026fa:	e00a      	b.n	8002712 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026fc:	f7ff fa24 	bl	8001b48 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	f241 3288 	movw	r2, #5000	@ 0x1388
 800270a:	4293      	cmp	r3, r2
 800270c:	d901      	bls.n	8002712 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e053      	b.n	80027ba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002712:	4b2d      	ldr	r3, [pc, #180]	@ (80027c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f003 020c 	and.w	r2, r3, #12
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	429a      	cmp	r2, r3
 8002722:	d1eb      	bne.n	80026fc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002724:	4b27      	ldr	r3, [pc, #156]	@ (80027c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0307 	and.w	r3, r3, #7
 800272c:	683a      	ldr	r2, [r7, #0]
 800272e:	429a      	cmp	r2, r3
 8002730:	d210      	bcs.n	8002754 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002732:	4b24      	ldr	r3, [pc, #144]	@ (80027c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f023 0207 	bic.w	r2, r3, #7
 800273a:	4922      	ldr	r1, [pc, #136]	@ (80027c4 <HAL_RCC_ClockConfig+0x1c0>)
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	4313      	orrs	r3, r2
 8002740:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002742:	4b20      	ldr	r3, [pc, #128]	@ (80027c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0307 	and.w	r3, r3, #7
 800274a:	683a      	ldr	r2, [r7, #0]
 800274c:	429a      	cmp	r2, r3
 800274e:	d001      	beq.n	8002754 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e032      	b.n	80027ba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0304 	and.w	r3, r3, #4
 800275c:	2b00      	cmp	r3, #0
 800275e:	d008      	beq.n	8002772 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002760:	4b19      	ldr	r3, [pc, #100]	@ (80027c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	4916      	ldr	r1, [pc, #88]	@ (80027c8 <HAL_RCC_ClockConfig+0x1c4>)
 800276e:	4313      	orrs	r3, r2
 8002770:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0308 	and.w	r3, r3, #8
 800277a:	2b00      	cmp	r3, #0
 800277c:	d009      	beq.n	8002792 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800277e:	4b12      	ldr	r3, [pc, #72]	@ (80027c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	00db      	lsls	r3, r3, #3
 800278c:	490e      	ldr	r1, [pc, #56]	@ (80027c8 <HAL_RCC_ClockConfig+0x1c4>)
 800278e:	4313      	orrs	r3, r2
 8002790:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002792:	f000 f821 	bl	80027d8 <HAL_RCC_GetSysClockFreq>
 8002796:	4602      	mov	r2, r0
 8002798:	4b0b      	ldr	r3, [pc, #44]	@ (80027c8 <HAL_RCC_ClockConfig+0x1c4>)
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	091b      	lsrs	r3, r3, #4
 800279e:	f003 030f 	and.w	r3, r3, #15
 80027a2:	490a      	ldr	r1, [pc, #40]	@ (80027cc <HAL_RCC_ClockConfig+0x1c8>)
 80027a4:	5ccb      	ldrb	r3, [r1, r3]
 80027a6:	fa22 f303 	lsr.w	r3, r2, r3
 80027aa:	4a09      	ldr	r2, [pc, #36]	@ (80027d0 <HAL_RCC_ClockConfig+0x1cc>)
 80027ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80027ae:	4b09      	ldr	r3, [pc, #36]	@ (80027d4 <HAL_RCC_ClockConfig+0x1d0>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4618      	mov	r0, r3
 80027b4:	f7ff f986 	bl	8001ac4 <HAL_InitTick>

  return HAL_OK;
 80027b8:	2300      	movs	r3, #0
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3710      	adds	r7, #16
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	40022000 	.word	0x40022000
 80027c8:	40021000 	.word	0x40021000
 80027cc:	080030e4 	.word	0x080030e4
 80027d0:	2000002c 	.word	0x2000002c
 80027d4:	20000038 	.word	0x20000038

080027d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	b087      	sub	sp, #28
 80027dc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027de:	2300      	movs	r3, #0
 80027e0:	60fb      	str	r3, [r7, #12]
 80027e2:	2300      	movs	r3, #0
 80027e4:	60bb      	str	r3, [r7, #8]
 80027e6:	2300      	movs	r3, #0
 80027e8:	617b      	str	r3, [r7, #20]
 80027ea:	2300      	movs	r3, #0
 80027ec:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80027ee:	2300      	movs	r3, #0
 80027f0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80027f2:	4b1e      	ldr	r3, [pc, #120]	@ (800286c <HAL_RCC_GetSysClockFreq+0x94>)
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f003 030c 	and.w	r3, r3, #12
 80027fe:	2b04      	cmp	r3, #4
 8002800:	d002      	beq.n	8002808 <HAL_RCC_GetSysClockFreq+0x30>
 8002802:	2b08      	cmp	r3, #8
 8002804:	d003      	beq.n	800280e <HAL_RCC_GetSysClockFreq+0x36>
 8002806:	e027      	b.n	8002858 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002808:	4b19      	ldr	r3, [pc, #100]	@ (8002870 <HAL_RCC_GetSysClockFreq+0x98>)
 800280a:	613b      	str	r3, [r7, #16]
      break;
 800280c:	e027      	b.n	800285e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	0c9b      	lsrs	r3, r3, #18
 8002812:	f003 030f 	and.w	r3, r3, #15
 8002816:	4a17      	ldr	r2, [pc, #92]	@ (8002874 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002818:	5cd3      	ldrb	r3, [r2, r3]
 800281a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d010      	beq.n	8002848 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002826:	4b11      	ldr	r3, [pc, #68]	@ (800286c <HAL_RCC_GetSysClockFreq+0x94>)
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	0c5b      	lsrs	r3, r3, #17
 800282c:	f003 0301 	and.w	r3, r3, #1
 8002830:	4a11      	ldr	r2, [pc, #68]	@ (8002878 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002832:	5cd3      	ldrb	r3, [r2, r3]
 8002834:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a0d      	ldr	r2, [pc, #52]	@ (8002870 <HAL_RCC_GetSysClockFreq+0x98>)
 800283a:	fb03 f202 	mul.w	r2, r3, r2
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	fbb2 f3f3 	udiv	r3, r2, r3
 8002844:	617b      	str	r3, [r7, #20]
 8002846:	e004      	b.n	8002852 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	4a0c      	ldr	r2, [pc, #48]	@ (800287c <HAL_RCC_GetSysClockFreq+0xa4>)
 800284c:	fb02 f303 	mul.w	r3, r2, r3
 8002850:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	613b      	str	r3, [r7, #16]
      break;
 8002856:	e002      	b.n	800285e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002858:	4b05      	ldr	r3, [pc, #20]	@ (8002870 <HAL_RCC_GetSysClockFreq+0x98>)
 800285a:	613b      	str	r3, [r7, #16]
      break;
 800285c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800285e:	693b      	ldr	r3, [r7, #16]
}
 8002860:	4618      	mov	r0, r3
 8002862:	371c      	adds	r7, #28
 8002864:	46bd      	mov	sp, r7
 8002866:	bc80      	pop	{r7}
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	40021000 	.word	0x40021000
 8002870:	007a1200 	.word	0x007a1200
 8002874:	080030f4 	.word	0x080030f4
 8002878:	08003104 	.word	0x08003104
 800287c:	003d0900 	.word	0x003d0900

08002880 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002880:	b480      	push	{r7}
 8002882:	b085      	sub	sp, #20
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002888:	4b0a      	ldr	r3, [pc, #40]	@ (80028b4 <RCC_Delay+0x34>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a0a      	ldr	r2, [pc, #40]	@ (80028b8 <RCC_Delay+0x38>)
 800288e:	fba2 2303 	umull	r2, r3, r2, r3
 8002892:	0a5b      	lsrs	r3, r3, #9
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	fb02 f303 	mul.w	r3, r2, r3
 800289a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800289c:	bf00      	nop
  }
  while (Delay --);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	1e5a      	subs	r2, r3, #1
 80028a2:	60fa      	str	r2, [r7, #12]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d1f9      	bne.n	800289c <RCC_Delay+0x1c>
}
 80028a8:	bf00      	nop
 80028aa:	bf00      	nop
 80028ac:	3714      	adds	r7, #20
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bc80      	pop	{r7}
 80028b2:	4770      	bx	lr
 80028b4:	2000002c 	.word	0x2000002c
 80028b8:	10624dd3 	.word	0x10624dd3

080028bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d101      	bne.n	80028ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e041      	b.n	8002952 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d106      	bne.n	80028e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f7fe fcec 	bl	80012c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2202      	movs	r2, #2
 80028ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	3304      	adds	r3, #4
 80028f8:	4619      	mov	r1, r3
 80028fa:	4610      	mov	r0, r2
 80028fc:	f000 fa56 	bl	8002dac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002950:	2300      	movs	r3, #0
}
 8002952:	4618      	mov	r0, r3
 8002954:	3708      	adds	r7, #8
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
	...

0800295c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800295c:	b480      	push	{r7}
 800295e:	b085      	sub	sp, #20
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800296a:	b2db      	uxtb	r3, r3
 800296c:	2b01      	cmp	r3, #1
 800296e:	d001      	beq.n	8002974 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e035      	b.n	80029e0 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2202      	movs	r2, #2
 8002978:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	68da      	ldr	r2, [r3, #12]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f042 0201 	orr.w	r2, r2, #1
 800298a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a16      	ldr	r2, [pc, #88]	@ (80029ec <HAL_TIM_Base_Start_IT+0x90>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d009      	beq.n	80029aa <HAL_TIM_Base_Start_IT+0x4e>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800299e:	d004      	beq.n	80029aa <HAL_TIM_Base_Start_IT+0x4e>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a12      	ldr	r2, [pc, #72]	@ (80029f0 <HAL_TIM_Base_Start_IT+0x94>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d111      	bne.n	80029ce <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f003 0307 	and.w	r3, r3, #7
 80029b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2b06      	cmp	r3, #6
 80029ba:	d010      	beq.n	80029de <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f042 0201 	orr.w	r2, r2, #1
 80029ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029cc:	e007      	b.n	80029de <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f042 0201 	orr.w	r2, r2, #1
 80029dc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029de:	2300      	movs	r3, #0
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3714      	adds	r7, #20
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bc80      	pop	{r7}
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop
 80029ec:	40012c00 	.word	0x40012c00
 80029f0:	40000400 	.word	0x40000400

080029f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	f003 0302 	and.w	r3, r3, #2
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d020      	beq.n	8002a58 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	f003 0302 	and.w	r3, r3, #2
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d01b      	beq.n	8002a58 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f06f 0202 	mvn.w	r2, #2
 8002a28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	699b      	ldr	r3, [r3, #24]
 8002a36:	f003 0303 	and.w	r3, r3, #3
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d003      	beq.n	8002a46 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f000 f998 	bl	8002d74 <HAL_TIM_IC_CaptureCallback>
 8002a44:	e005      	b.n	8002a52 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f000 f98b 	bl	8002d62 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f000 f99a 	bl	8002d86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	f003 0304 	and.w	r3, r3, #4
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d020      	beq.n	8002aa4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	f003 0304 	and.w	r3, r3, #4
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d01b      	beq.n	8002aa4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f06f 0204 	mvn.w	r2, #4
 8002a74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2202      	movs	r2, #2
 8002a7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	699b      	ldr	r3, [r3, #24]
 8002a82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d003      	beq.n	8002a92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f000 f972 	bl	8002d74 <HAL_TIM_IC_CaptureCallback>
 8002a90:	e005      	b.n	8002a9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f000 f965 	bl	8002d62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f000 f974 	bl	8002d86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	f003 0308 	and.w	r3, r3, #8
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d020      	beq.n	8002af0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	f003 0308 	and.w	r3, r3, #8
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d01b      	beq.n	8002af0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f06f 0208 	mvn.w	r2, #8
 8002ac0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2204      	movs	r2, #4
 8002ac6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	69db      	ldr	r3, [r3, #28]
 8002ace:	f003 0303 	and.w	r3, r3, #3
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d003      	beq.n	8002ade <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f000 f94c 	bl	8002d74 <HAL_TIM_IC_CaptureCallback>
 8002adc:	e005      	b.n	8002aea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f000 f93f 	bl	8002d62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f000 f94e 	bl	8002d86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	f003 0310 	and.w	r3, r3, #16
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d020      	beq.n	8002b3c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f003 0310 	and.w	r3, r3, #16
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d01b      	beq.n	8002b3c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f06f 0210 	mvn.w	r2, #16
 8002b0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2208      	movs	r2, #8
 8002b12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	69db      	ldr	r3, [r3, #28]
 8002b1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d003      	beq.n	8002b2a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f000 f926 	bl	8002d74 <HAL_TIM_IC_CaptureCallback>
 8002b28:	e005      	b.n	8002b36 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 f919 	bl	8002d62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f000 f928 	bl	8002d86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	f003 0301 	and.w	r3, r3, #1
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d00c      	beq.n	8002b60 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	f003 0301 	and.w	r3, r3, #1
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d007      	beq.n	8002b60 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f06f 0201 	mvn.w	r2, #1
 8002b58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f7fe fa34 	bl	8000fc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d00c      	beq.n	8002b84 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d007      	beq.n	8002b84 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002b7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f000 fa6f 	bl	8003062 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d00c      	beq.n	8002ba8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d007      	beq.n	8002ba8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002ba0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f000 f8f8 	bl	8002d98 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	f003 0320 	and.w	r3, r3, #32
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d00c      	beq.n	8002bcc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	f003 0320 	and.w	r3, r3, #32
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d007      	beq.n	8002bcc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f06f 0220 	mvn.w	r2, #32
 8002bc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f000 fa42 	bl	8003050 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002bcc:	bf00      	nop
 8002bce:	3710      	adds	r7, #16
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bde:	2300      	movs	r3, #0
 8002be0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d101      	bne.n	8002bf0 <HAL_TIM_ConfigClockSource+0x1c>
 8002bec:	2302      	movs	r3, #2
 8002bee:	e0b4      	b.n	8002d5a <HAL_TIM_ConfigClockSource+0x186>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2202      	movs	r2, #2
 8002bfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002c0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002c16:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	68ba      	ldr	r2, [r7, #8]
 8002c1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c28:	d03e      	beq.n	8002ca8 <HAL_TIM_ConfigClockSource+0xd4>
 8002c2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c2e:	f200 8087 	bhi.w	8002d40 <HAL_TIM_ConfigClockSource+0x16c>
 8002c32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c36:	f000 8086 	beq.w	8002d46 <HAL_TIM_ConfigClockSource+0x172>
 8002c3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c3e:	d87f      	bhi.n	8002d40 <HAL_TIM_ConfigClockSource+0x16c>
 8002c40:	2b70      	cmp	r3, #112	@ 0x70
 8002c42:	d01a      	beq.n	8002c7a <HAL_TIM_ConfigClockSource+0xa6>
 8002c44:	2b70      	cmp	r3, #112	@ 0x70
 8002c46:	d87b      	bhi.n	8002d40 <HAL_TIM_ConfigClockSource+0x16c>
 8002c48:	2b60      	cmp	r3, #96	@ 0x60
 8002c4a:	d050      	beq.n	8002cee <HAL_TIM_ConfigClockSource+0x11a>
 8002c4c:	2b60      	cmp	r3, #96	@ 0x60
 8002c4e:	d877      	bhi.n	8002d40 <HAL_TIM_ConfigClockSource+0x16c>
 8002c50:	2b50      	cmp	r3, #80	@ 0x50
 8002c52:	d03c      	beq.n	8002cce <HAL_TIM_ConfigClockSource+0xfa>
 8002c54:	2b50      	cmp	r3, #80	@ 0x50
 8002c56:	d873      	bhi.n	8002d40 <HAL_TIM_ConfigClockSource+0x16c>
 8002c58:	2b40      	cmp	r3, #64	@ 0x40
 8002c5a:	d058      	beq.n	8002d0e <HAL_TIM_ConfigClockSource+0x13a>
 8002c5c:	2b40      	cmp	r3, #64	@ 0x40
 8002c5e:	d86f      	bhi.n	8002d40 <HAL_TIM_ConfigClockSource+0x16c>
 8002c60:	2b30      	cmp	r3, #48	@ 0x30
 8002c62:	d064      	beq.n	8002d2e <HAL_TIM_ConfigClockSource+0x15a>
 8002c64:	2b30      	cmp	r3, #48	@ 0x30
 8002c66:	d86b      	bhi.n	8002d40 <HAL_TIM_ConfigClockSource+0x16c>
 8002c68:	2b20      	cmp	r3, #32
 8002c6a:	d060      	beq.n	8002d2e <HAL_TIM_ConfigClockSource+0x15a>
 8002c6c:	2b20      	cmp	r3, #32
 8002c6e:	d867      	bhi.n	8002d40 <HAL_TIM_ConfigClockSource+0x16c>
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d05c      	beq.n	8002d2e <HAL_TIM_ConfigClockSource+0x15a>
 8002c74:	2b10      	cmp	r3, #16
 8002c76:	d05a      	beq.n	8002d2e <HAL_TIM_ConfigClockSource+0x15a>
 8002c78:	e062      	b.n	8002d40 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002c8a:	f000 f96a 	bl	8002f62 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002c9c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	68ba      	ldr	r2, [r7, #8]
 8002ca4:	609a      	str	r2, [r3, #8]
      break;
 8002ca6:	e04f      	b.n	8002d48 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002cb8:	f000 f953 	bl	8002f62 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	689a      	ldr	r2, [r3, #8]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002cca:	609a      	str	r2, [r3, #8]
      break;
 8002ccc:	e03c      	b.n	8002d48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cda:	461a      	mov	r2, r3
 8002cdc:	f000 f8ca 	bl	8002e74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2150      	movs	r1, #80	@ 0x50
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f000 f921 	bl	8002f2e <TIM_ITRx_SetConfig>
      break;
 8002cec:	e02c      	b.n	8002d48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	f000 f8e8 	bl	8002ed0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2160      	movs	r1, #96	@ 0x60
 8002d06:	4618      	mov	r0, r3
 8002d08:	f000 f911 	bl	8002f2e <TIM_ITRx_SetConfig>
      break;
 8002d0c:	e01c      	b.n	8002d48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	f000 f8aa 	bl	8002e74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2140      	movs	r1, #64	@ 0x40
 8002d26:	4618      	mov	r0, r3
 8002d28:	f000 f901 	bl	8002f2e <TIM_ITRx_SetConfig>
      break;
 8002d2c:	e00c      	b.n	8002d48 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4619      	mov	r1, r3
 8002d38:	4610      	mov	r0, r2
 8002d3a:	f000 f8f8 	bl	8002f2e <TIM_ITRx_SetConfig>
      break;
 8002d3e:	e003      	b.n	8002d48 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	73fb      	strb	r3, [r7, #15]
      break;
 8002d44:	e000      	b.n	8002d48 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002d46:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3710      	adds	r7, #16
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}

08002d62 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d62:	b480      	push	{r7}
 8002d64:	b083      	sub	sp, #12
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d6a:	bf00      	nop
 8002d6c:	370c      	adds	r7, #12
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bc80      	pop	{r7}
 8002d72:	4770      	bx	lr

08002d74 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d7c:	bf00      	nop
 8002d7e:	370c      	adds	r7, #12
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bc80      	pop	{r7}
 8002d84:	4770      	bx	lr

08002d86 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d86:	b480      	push	{r7}
 8002d88:	b083      	sub	sp, #12
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d8e:	bf00      	nop
 8002d90:	370c      	adds	r7, #12
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bc80      	pop	{r7}
 8002d96:	4770      	bx	lr

08002d98 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002da0:	bf00      	nop
 8002da2:	370c      	adds	r7, #12
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bc80      	pop	{r7}
 8002da8:	4770      	bx	lr
	...

08002dac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b085      	sub	sp, #20
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	4a2b      	ldr	r2, [pc, #172]	@ (8002e6c <TIM_Base_SetConfig+0xc0>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d007      	beq.n	8002dd4 <TIM_Base_SetConfig+0x28>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002dca:	d003      	beq.n	8002dd4 <TIM_Base_SetConfig+0x28>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	4a28      	ldr	r2, [pc, #160]	@ (8002e70 <TIM_Base_SetConfig+0xc4>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d108      	bne.n	8002de6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002dda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	68fa      	ldr	r2, [r7, #12]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a20      	ldr	r2, [pc, #128]	@ (8002e6c <TIM_Base_SetConfig+0xc0>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d007      	beq.n	8002dfe <TIM_Base_SetConfig+0x52>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002df4:	d003      	beq.n	8002dfe <TIM_Base_SetConfig+0x52>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4a1d      	ldr	r2, [pc, #116]	@ (8002e70 <TIM_Base_SetConfig+0xc4>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d108      	bne.n	8002e10 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	68fa      	ldr	r2, [r7, #12]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	695b      	ldr	r3, [r3, #20]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	68fa      	ldr	r2, [r7, #12]
 8002e22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	689a      	ldr	r2, [r3, #8]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	4a0d      	ldr	r2, [pc, #52]	@ (8002e6c <TIM_Base_SetConfig+0xc0>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d103      	bne.n	8002e44 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	691a      	ldr	r2, [r3, #16]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	691b      	ldr	r3, [r3, #16]
 8002e4e:	f003 0301 	and.w	r3, r3, #1
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d005      	beq.n	8002e62 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	691b      	ldr	r3, [r3, #16]
 8002e5a:	f023 0201 	bic.w	r2, r3, #1
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	611a      	str	r2, [r3, #16]
  }
}
 8002e62:	bf00      	nop
 8002e64:	3714      	adds	r7, #20
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bc80      	pop	{r7}
 8002e6a:	4770      	bx	lr
 8002e6c:	40012c00 	.word	0x40012c00
 8002e70:	40000400 	.word	0x40000400

08002e74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b087      	sub	sp, #28
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	60b9      	str	r1, [r7, #8]
 8002e7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6a1b      	ldr	r3, [r3, #32]
 8002e84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	6a1b      	ldr	r3, [r3, #32]
 8002e8a:	f023 0201 	bic.w	r2, r3, #1
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	699b      	ldr	r3, [r3, #24]
 8002e96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002e9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	011b      	lsls	r3, r3, #4
 8002ea4:	693a      	ldr	r2, [r7, #16]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	f023 030a 	bic.w	r3, r3, #10
 8002eb0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002eb2:	697a      	ldr	r2, [r7, #20]
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	693a      	ldr	r2, [r7, #16]
 8002ebe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	697a      	ldr	r2, [r7, #20]
 8002ec4:	621a      	str	r2, [r3, #32]
}
 8002ec6:	bf00      	nop
 8002ec8:	371c      	adds	r7, #28
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bc80      	pop	{r7}
 8002ece:	4770      	bx	lr

08002ed0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b087      	sub	sp, #28
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	60b9      	str	r1, [r7, #8]
 8002eda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6a1b      	ldr	r3, [r3, #32]
 8002ee0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	6a1b      	ldr	r3, [r3, #32]
 8002ee6:	f023 0210 	bic.w	r2, r3, #16
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	699b      	ldr	r3, [r3, #24]
 8002ef2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002efa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	031b      	lsls	r3, r3, #12
 8002f00:	693a      	ldr	r2, [r7, #16]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002f0c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	011b      	lsls	r3, r3, #4
 8002f12:	697a      	ldr	r2, [r7, #20]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	693a      	ldr	r2, [r7, #16]
 8002f1c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	697a      	ldr	r2, [r7, #20]
 8002f22:	621a      	str	r2, [r3, #32]
}
 8002f24:	bf00      	nop
 8002f26:	371c      	adds	r7, #28
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bc80      	pop	{r7}
 8002f2c:	4770      	bx	lr

08002f2e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f2e:	b480      	push	{r7}
 8002f30:	b085      	sub	sp, #20
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	6078      	str	r0, [r7, #4]
 8002f36:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f44:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f46:	683a      	ldr	r2, [r7, #0]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	f043 0307 	orr.w	r3, r3, #7
 8002f50:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	68fa      	ldr	r2, [r7, #12]
 8002f56:	609a      	str	r2, [r3, #8]
}
 8002f58:	bf00      	nop
 8002f5a:	3714      	adds	r7, #20
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bc80      	pop	{r7}
 8002f60:	4770      	bx	lr

08002f62 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f62:	b480      	push	{r7}
 8002f64:	b087      	sub	sp, #28
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	60f8      	str	r0, [r7, #12]
 8002f6a:	60b9      	str	r1, [r7, #8]
 8002f6c:	607a      	str	r2, [r7, #4]
 8002f6e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002f7c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	021a      	lsls	r2, r3, #8
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	431a      	orrs	r2, r3
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	697a      	ldr	r2, [r7, #20]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	697a      	ldr	r2, [r7, #20]
 8002f94:	609a      	str	r2, [r3, #8]
}
 8002f96:	bf00      	nop
 8002f98:	371c      	adds	r7, #28
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bc80      	pop	{r7}
 8002f9e:	4770      	bx	lr

08002fa0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b085      	sub	sp, #20
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d101      	bne.n	8002fb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002fb4:	2302      	movs	r3, #2
 8002fb6:	e041      	b.n	800303c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2202      	movs	r2, #2
 8002fc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002fde:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	68fa      	ldr	r2, [r7, #12]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	68fa      	ldr	r2, [r7, #12]
 8002ff0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a14      	ldr	r2, [pc, #80]	@ (8003048 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d009      	beq.n	8003010 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003004:	d004      	beq.n	8003010 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a10      	ldr	r2, [pc, #64]	@ (800304c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d10c      	bne.n	800302a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003016:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	68ba      	ldr	r2, [r7, #8]
 800301e:	4313      	orrs	r3, r2
 8003020:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	68ba      	ldr	r2, [r7, #8]
 8003028:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2201      	movs	r2, #1
 800302e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800303a:	2300      	movs	r3, #0
}
 800303c:	4618      	mov	r0, r3
 800303e:	3714      	adds	r7, #20
 8003040:	46bd      	mov	sp, r7
 8003042:	bc80      	pop	{r7}
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	40012c00 	.word	0x40012c00
 800304c:	40000400 	.word	0x40000400

08003050 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003058:	bf00      	nop
 800305a:	370c      	adds	r7, #12
 800305c:	46bd      	mov	sp, r7
 800305e:	bc80      	pop	{r7}
 8003060:	4770      	bx	lr

08003062 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003062:	b480      	push	{r7}
 8003064:	b083      	sub	sp, #12
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800306a:	bf00      	nop
 800306c:	370c      	adds	r7, #12
 800306e:	46bd      	mov	sp, r7
 8003070:	bc80      	pop	{r7}
 8003072:	4770      	bx	lr

08003074 <memset>:
 8003074:	4603      	mov	r3, r0
 8003076:	4402      	add	r2, r0
 8003078:	4293      	cmp	r3, r2
 800307a:	d100      	bne.n	800307e <memset+0xa>
 800307c:	4770      	bx	lr
 800307e:	f803 1b01 	strb.w	r1, [r3], #1
 8003082:	e7f9      	b.n	8003078 <memset+0x4>

08003084 <__libc_init_array>:
 8003084:	b570      	push	{r4, r5, r6, lr}
 8003086:	2600      	movs	r6, #0
 8003088:	4d0c      	ldr	r5, [pc, #48]	@ (80030bc <__libc_init_array+0x38>)
 800308a:	4c0d      	ldr	r4, [pc, #52]	@ (80030c0 <__libc_init_array+0x3c>)
 800308c:	1b64      	subs	r4, r4, r5
 800308e:	10a4      	asrs	r4, r4, #2
 8003090:	42a6      	cmp	r6, r4
 8003092:	d109      	bne.n	80030a8 <__libc_init_array+0x24>
 8003094:	f000 f81a 	bl	80030cc <_init>
 8003098:	2600      	movs	r6, #0
 800309a:	4d0a      	ldr	r5, [pc, #40]	@ (80030c4 <__libc_init_array+0x40>)
 800309c:	4c0a      	ldr	r4, [pc, #40]	@ (80030c8 <__libc_init_array+0x44>)
 800309e:	1b64      	subs	r4, r4, r5
 80030a0:	10a4      	asrs	r4, r4, #2
 80030a2:	42a6      	cmp	r6, r4
 80030a4:	d105      	bne.n	80030b2 <__libc_init_array+0x2e>
 80030a6:	bd70      	pop	{r4, r5, r6, pc}
 80030a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80030ac:	4798      	blx	r3
 80030ae:	3601      	adds	r6, #1
 80030b0:	e7ee      	b.n	8003090 <__libc_init_array+0xc>
 80030b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80030b6:	4798      	blx	r3
 80030b8:	3601      	adds	r6, #1
 80030ba:	e7f2      	b.n	80030a2 <__libc_init_array+0x1e>
 80030bc:	08003108 	.word	0x08003108
 80030c0:	08003108 	.word	0x08003108
 80030c4:	08003108 	.word	0x08003108
 80030c8:	0800310c 	.word	0x0800310c

080030cc <_init>:
 80030cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030ce:	bf00      	nop
 80030d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030d2:	bc08      	pop	{r3}
 80030d4:	469e      	mov	lr, r3
 80030d6:	4770      	bx	lr

080030d8 <_fini>:
 80030d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030da:	bf00      	nop
 80030dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030de:	bc08      	pop	{r3}
 80030e0:	469e      	mov	lr, r3
 80030e2:	4770      	bx	lr
